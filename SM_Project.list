
SM_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab6c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  0800ad40  0800ad40  0001ad40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b19c  0800b19c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b19c  0800b19c  0001b19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1a4  0800b1a4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1a4  0800b1a4  0001b1a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1a8  0800b1a8  0001b1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b1ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000700  200001e4  0800b390  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008e4  0800b390  000208e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153fb  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028eb  00000000  00000000  0003560f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  00037f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  00039098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ab1  00000000  00000000  0003a128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014cdc  00000000  00000000  00061bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4af7  00000000  00000000  000768b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016b3ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f64  00000000  00000000  0016b3fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ad24 	.word	0x0800ad24

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800ad24 	.word	0x0800ad24

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <HAL_UART_RxCpltCallback>:
float prev_error=0;
float prev_prev_error=0;
float yr=13.0; //wartosc zadana

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	int yr_pom;
	HAL_UART_Receive_IT(&huart3,received_data,strlen("yr=10"));
 8000ef4:	2205      	movs	r2, #5
 8000ef6:	491c      	ldr	r1, [pc, #112]	; (8000f68 <HAL_UART_RxCpltCallback+0x7c>)
 8000ef8:	481c      	ldr	r0, [pc, #112]	; (8000f6c <HAL_UART_RxCpltCallback+0x80>)
 8000efa:	f004 fd53 	bl	80059a4 <HAL_UART_Receive_IT>
	sscanf(received_data, "yr=%d;", &yr_pom);
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	461a      	mov	r2, r3
 8000f04:	491a      	ldr	r1, [pc, #104]	; (8000f70 <HAL_UART_RxCpltCallback+0x84>)
 8000f06:	4818      	ldr	r0, [pc, #96]	; (8000f68 <HAL_UART_RxCpltCallback+0x7c>)
 8000f08:	f006 ffd6 	bl	8007eb8 <siscanf>
	if(yr_pom>17)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b11      	cmp	r3, #17
 8000f10:	dd05      	ble.n	8000f1e <HAL_UART_RxCpltCallback+0x32>
		{HAL_UART_Transmit_IT(&huart3,(const uint8_t*)"Too far\r",strlen("Too far\r"));}
 8000f12:	2208      	movs	r2, #8
 8000f14:	4917      	ldr	r1, [pc, #92]	; (8000f74 <HAL_UART_RxCpltCallback+0x88>)
 8000f16:	4815      	ldr	r0, [pc, #84]	; (8000f6c <HAL_UART_RxCpltCallback+0x80>)
 8000f18:	f004 fce6 	bl	80058e8 <HAL_UART_Transmit_IT>
		{HAL_UART_Transmit_IT(&huart3,(const uint8_t*)"Too close\r",strlen("Too close\r"));}
	else
		{yr=yr_pom;
		 snprintf(rx_data,20,"New setpoint: %d\r",yr_pom);
		 HAL_UART_Transmit_IT(&huart3,received_data,strlen(received_data));}
}
 8000f1c:	e020      	b.n	8000f60 <HAL_UART_RxCpltCallback+0x74>
	else if (yr_pom<8)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2b07      	cmp	r3, #7
 8000f22:	dc05      	bgt.n	8000f30 <HAL_UART_RxCpltCallback+0x44>
		{HAL_UART_Transmit_IT(&huart3,(const uint8_t*)"Too close\r",strlen("Too close\r"));}
 8000f24:	220a      	movs	r2, #10
 8000f26:	4914      	ldr	r1, [pc, #80]	; (8000f78 <HAL_UART_RxCpltCallback+0x8c>)
 8000f28:	4810      	ldr	r0, [pc, #64]	; (8000f6c <HAL_UART_RxCpltCallback+0x80>)
 8000f2a:	f004 fcdd 	bl	80058e8 <HAL_UART_Transmit_IT>
}
 8000f2e:	e017      	b.n	8000f60 <HAL_UART_RxCpltCallback+0x74>
		{yr=yr_pom;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	ee07 3a90 	vmov	s15, r3
 8000f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <HAL_UART_RxCpltCallback+0x90>)
 8000f3c:	edc3 7a00 	vstr	s15, [r3]
		 snprintf(rx_data,20,"New setpoint: %d\r",yr_pom);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4a0f      	ldr	r2, [pc, #60]	; (8000f80 <HAL_UART_RxCpltCallback+0x94>)
 8000f44:	2114      	movs	r1, #20
 8000f46:	480f      	ldr	r0, [pc, #60]	; (8000f84 <HAL_UART_RxCpltCallback+0x98>)
 8000f48:	f006 ff82 	bl	8007e50 <sniprintf>
		 HAL_UART_Transmit_IT(&huart3,received_data,strlen(received_data));}
 8000f4c:	4806      	ldr	r0, [pc, #24]	; (8000f68 <HAL_UART_RxCpltCallback+0x7c>)
 8000f4e:	f7ff f95f 	bl	8000210 <strlen>
 8000f52:	4603      	mov	r3, r0
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	461a      	mov	r2, r3
 8000f58:	4903      	ldr	r1, [pc, #12]	; (8000f68 <HAL_UART_RxCpltCallback+0x7c>)
 8000f5a:	4804      	ldr	r0, [pc, #16]	; (8000f6c <HAL_UART_RxCpltCallback+0x80>)
 8000f5c:	f004 fcc4 	bl	80058e8 <HAL_UART_Transmit_IT>
}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200008ac 	.word	0x200008ac
 8000f6c:	200002e4 	.word	0x200002e4
 8000f70:	0800ad40 	.word	0x0800ad40
 8000f74:	0800ad48 	.word	0x0800ad48
 8000f78:	0800ad54 	.word	0x0800ad54
 8000f7c:	20000004 	.word	0x20000004
 8000f80:	0800ad60 	.word	0x0800ad60
 8000f84:	20000878 	.word	0x20000878

08000f88 <seg7_show_digit>:

void seg7_show_digit(uint32_t value)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	uint16_t pom=value%10;
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	4b4f      	ldr	r3, [pc, #316]	; (80010d0 <seg7_show_digit+0x148>)
 8000f94:	fba3 2301 	umull	r2, r3, r3, r1
 8000f98:	08da      	lsrs	r2, r3, #3
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	1aca      	subs	r2, r1, r3
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	81fb      	strh	r3, [r7, #14]

	if (pom==1 || pom==4)
 8000fa8:	89fb      	ldrh	r3, [r7, #14]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d002      	beq.n	8000fb4 <seg7_show_digit+0x2c>
 8000fae:	89fb      	ldrh	r3, [r7, #14]
 8000fb0:	2b04      	cmp	r3, #4
 8000fb2:	d105      	bne.n	8000fc0 <seg7_show_digit+0x38>
	{HAL_GPIO_WritePin(UP_GPIO_Port, UP_Pin, GPIO_PIN_RESET);}
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2104      	movs	r1, #4
 8000fb8:	4846      	ldr	r0, [pc, #280]	; (80010d4 <seg7_show_digit+0x14c>)
 8000fba:	f001 fcef 	bl	800299c <HAL_GPIO_WritePin>
 8000fbe:	e004      	b.n	8000fca <seg7_show_digit+0x42>
	else
	{HAL_GPIO_WritePin(UP_GPIO_Port, UP_Pin, GPIO_PIN_SET);}
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2104      	movs	r1, #4
 8000fc4:	4843      	ldr	r0, [pc, #268]	; (80010d4 <seg7_show_digit+0x14c>)
 8000fc6:	f001 fce9 	bl	800299c <HAL_GPIO_WritePin>
	if (pom==5 || pom==6)
 8000fca:	89fb      	ldrh	r3, [r7, #14]
 8000fcc:	2b05      	cmp	r3, #5
 8000fce:	d002      	beq.n	8000fd6 <seg7_show_digit+0x4e>
 8000fd0:	89fb      	ldrh	r3, [r7, #14]
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d105      	bne.n	8000fe2 <seg7_show_digit+0x5a>
	{HAL_GPIO_WritePin(UP_RIGHT_GPIO_Port, UP_RIGHT_Pin, GPIO_PIN_RESET);}
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2110      	movs	r1, #16
 8000fda:	483e      	ldr	r0, [pc, #248]	; (80010d4 <seg7_show_digit+0x14c>)
 8000fdc:	f001 fcde 	bl	800299c <HAL_GPIO_WritePin>
 8000fe0:	e004      	b.n	8000fec <seg7_show_digit+0x64>
	else
	{HAL_GPIO_WritePin(UP_RIGHT_GPIO_Port, UP_RIGHT_Pin, GPIO_PIN_SET);}
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2110      	movs	r1, #16
 8000fe6:	483b      	ldr	r0, [pc, #236]	; (80010d4 <seg7_show_digit+0x14c>)
 8000fe8:	f001 fcd8 	bl	800299c <HAL_GPIO_WritePin>
	if (pom==2)
 8000fec:	89fb      	ldrh	r3, [r7, #14]
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d105      	bne.n	8000ffe <seg7_show_digit+0x76>
	{HAL_GPIO_WritePin(BOTTOM_RIGHT_GPIO_Port, BOTTOM_RIGHT_Pin, GPIO_PIN_RESET);}
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2120      	movs	r1, #32
 8000ff6:	4837      	ldr	r0, [pc, #220]	; (80010d4 <seg7_show_digit+0x14c>)
 8000ff8:	f001 fcd0 	bl	800299c <HAL_GPIO_WritePin>
 8000ffc:	e004      	b.n	8001008 <seg7_show_digit+0x80>
	else
	{HAL_GPIO_WritePin(BOTTOM_RIGHT_GPIO_Port, BOTTOM_RIGHT_Pin, GPIO_PIN_SET);	}
 8000ffe:	2201      	movs	r2, #1
 8001000:	2120      	movs	r1, #32
 8001002:	4834      	ldr	r0, [pc, #208]	; (80010d4 <seg7_show_digit+0x14c>)
 8001004:	f001 fcca 	bl	800299c <HAL_GPIO_WritePin>
	if (pom==1 || pom==4 || pom==7)
 8001008:	89fb      	ldrh	r3, [r7, #14]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d005      	beq.n	800101a <seg7_show_digit+0x92>
 800100e:	89fb      	ldrh	r3, [r7, #14]
 8001010:	2b04      	cmp	r3, #4
 8001012:	d002      	beq.n	800101a <seg7_show_digit+0x92>
 8001014:	89fb      	ldrh	r3, [r7, #14]
 8001016:	2b07      	cmp	r3, #7
 8001018:	d105      	bne.n	8001026 <seg7_show_digit+0x9e>
	{HAL_GPIO_WritePin(BOTTOM_GPIO_Port, BOTTOM_Pin, GPIO_PIN_RESET);}
 800101a:	2200      	movs	r2, #0
 800101c:	2140      	movs	r1, #64	; 0x40
 800101e:	482d      	ldr	r0, [pc, #180]	; (80010d4 <seg7_show_digit+0x14c>)
 8001020:	f001 fcbc 	bl	800299c <HAL_GPIO_WritePin>
 8001024:	e004      	b.n	8001030 <seg7_show_digit+0xa8>
	else
	{HAL_GPIO_WritePin(BOTTOM_GPIO_Port, BOTTOM_Pin, GPIO_PIN_SET);}
 8001026:	2201      	movs	r2, #1
 8001028:	2140      	movs	r1, #64	; 0x40
 800102a:	482a      	ldr	r0, [pc, #168]	; (80010d4 <seg7_show_digit+0x14c>)
 800102c:	f001 fcb6 	bl	800299c <HAL_GPIO_WritePin>
	if (pom==1 || pom==3 || pom==4 || pom==5 || pom==7 || pom==9)
 8001030:	89fb      	ldrh	r3, [r7, #14]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d00e      	beq.n	8001054 <seg7_show_digit+0xcc>
 8001036:	89fb      	ldrh	r3, [r7, #14]
 8001038:	2b03      	cmp	r3, #3
 800103a:	d00b      	beq.n	8001054 <seg7_show_digit+0xcc>
 800103c:	89fb      	ldrh	r3, [r7, #14]
 800103e:	2b04      	cmp	r3, #4
 8001040:	d008      	beq.n	8001054 <seg7_show_digit+0xcc>
 8001042:	89fb      	ldrh	r3, [r7, #14]
 8001044:	2b05      	cmp	r3, #5
 8001046:	d005      	beq.n	8001054 <seg7_show_digit+0xcc>
 8001048:	89fb      	ldrh	r3, [r7, #14]
 800104a:	2b07      	cmp	r3, #7
 800104c:	d002      	beq.n	8001054 <seg7_show_digit+0xcc>
 800104e:	89fb      	ldrh	r3, [r7, #14]
 8001050:	2b09      	cmp	r3, #9
 8001052:	d105      	bne.n	8001060 <seg7_show_digit+0xd8>
	{HAL_GPIO_WritePin(BOTTOM_LEFT_GPIO_Port, BOTTOM_LEFT_Pin, GPIO_PIN_RESET);}
 8001054:	2200      	movs	r2, #0
 8001056:	2108      	movs	r1, #8
 8001058:	481e      	ldr	r0, [pc, #120]	; (80010d4 <seg7_show_digit+0x14c>)
 800105a:	f001 fc9f 	bl	800299c <HAL_GPIO_WritePin>
 800105e:	e004      	b.n	800106a <seg7_show_digit+0xe2>
	else
	{HAL_GPIO_WritePin(BOTTOM_LEFT_GPIO_Port, BOTTOM_LEFT_Pin, GPIO_PIN_SET);}
 8001060:	2201      	movs	r2, #1
 8001062:	2108      	movs	r1, #8
 8001064:	481b      	ldr	r0, [pc, #108]	; (80010d4 <seg7_show_digit+0x14c>)
 8001066:	f001 fc99 	bl	800299c <HAL_GPIO_WritePin>
	if (pom==1 || pom==2 || pom==3 || pom==7)
 800106a:	89fb      	ldrh	r3, [r7, #14]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d008      	beq.n	8001082 <seg7_show_digit+0xfa>
 8001070:	89fb      	ldrh	r3, [r7, #14]
 8001072:	2b02      	cmp	r3, #2
 8001074:	d005      	beq.n	8001082 <seg7_show_digit+0xfa>
 8001076:	89fb      	ldrh	r3, [r7, #14]
 8001078:	2b03      	cmp	r3, #3
 800107a:	d002      	beq.n	8001082 <seg7_show_digit+0xfa>
 800107c:	89fb      	ldrh	r3, [r7, #14]
 800107e:	2b07      	cmp	r3, #7
 8001080:	d106      	bne.n	8001090 <seg7_show_digit+0x108>
	{HAL_GPIO_WritePin(UP_LEFT_GPIO_Port, UP_LEFT_Pin, GPIO_PIN_RESET);}
 8001082:	2200      	movs	r2, #0
 8001084:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001088:	4813      	ldr	r0, [pc, #76]	; (80010d8 <seg7_show_digit+0x150>)
 800108a:	f001 fc87 	bl	800299c <HAL_GPIO_WritePin>
 800108e:	e005      	b.n	800109c <seg7_show_digit+0x114>
	else
	{HAL_GPIO_WritePin(UP_LEFT_GPIO_Port, UP_LEFT_Pin, GPIO_PIN_SET);}
 8001090:	2201      	movs	r2, #1
 8001092:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001096:	4810      	ldr	r0, [pc, #64]	; (80010d8 <seg7_show_digit+0x150>)
 8001098:	f001 fc80 	bl	800299c <HAL_GPIO_WritePin>
	if (pom==0 || pom==1 || pom==7)
 800109c:	89fb      	ldrh	r3, [r7, #14]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d005      	beq.n	80010ae <seg7_show_digit+0x126>
 80010a2:	89fb      	ldrh	r3, [r7, #14]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d002      	beq.n	80010ae <seg7_show_digit+0x126>
 80010a8:	89fb      	ldrh	r3, [r7, #14]
 80010aa:	2b07      	cmp	r3, #7
 80010ac:	d105      	bne.n	80010ba <seg7_show_digit+0x132>
	{HAL_GPIO_WritePin(MIDDLE_GPIO_Port, MIDDLE_Pin, GPIO_PIN_RESET);}
 80010ae:	2200      	movs	r2, #0
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	4809      	ldr	r0, [pc, #36]	; (80010d8 <seg7_show_digit+0x150>)
 80010b4:	f001 fc72 	bl	800299c <HAL_GPIO_WritePin>
 80010b8:	e005      	b.n	80010c6 <seg7_show_digit+0x13e>
	else
	{HAL_GPIO_WritePin(MIDDLE_GPIO_Port, MIDDLE_Pin, GPIO_PIN_SET);}
 80010ba:	2201      	movs	r2, #1
 80010bc:	2180      	movs	r1, #128	; 0x80
 80010be:	4806      	ldr	r0, [pc, #24]	; (80010d8 <seg7_show_digit+0x150>)
 80010c0:	f001 fc6c 	bl	800299c <HAL_GPIO_WritePin>
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	cccccccd 	.word	0xcccccccd
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40021400 	.word	0x40021400

080010dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	if(htim==&htim6)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d12d      	bne.n	8001148 <HAL_TIM_PeriodElapsedCallback+0x6c>
	{
		seg7_show_digit(display_digit/choose_digit);
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a1a      	ldr	r2, [pc, #104]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80010f2:	8812      	ldrh	r2, [r2, #0]
 80010f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff45 	bl	8000f88 <seg7_show_digit>
		switch (choose_digit)
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d002      	beq.n	800110c <HAL_TIM_PeriodElapsedCallback+0x30>
 8001106:	2b0a      	cmp	r3, #10
 8001108:	d00f      	beq.n	800112a <HAL_TIM_PeriodElapsedCallback+0x4e>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
			choose_digit=1;
			break;
		}
	}
}
 800110a:	e01e      	b.n	800114a <HAL_TIM_PeriodElapsedCallback+0x6e>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001112:	4813      	ldr	r0, [pc, #76]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001114:	f001 fc42 	bl	800299c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	2102      	movs	r1, #2
 800111c:	4811      	ldr	r0, [pc, #68]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800111e:	f001 fc3d 	bl	800299c <HAL_GPIO_WritePin>
			choose_digit=10;
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001124:	220a      	movs	r2, #10
 8001126:	801a      	strh	r2, [r3, #0]
			break;
 8001128:	e00f      	b.n	800114a <HAL_TIM_PeriodElapsedCallback+0x6e>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 800112a:	2201      	movs	r2, #1
 800112c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001130:	480b      	ldr	r0, [pc, #44]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001132:	f001 fc33 	bl	800299c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	2102      	movs	r1, #2
 800113a:	480a      	ldr	r0, [pc, #40]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800113c:	f001 fc2e 	bl	800299c <HAL_GPIO_WritePin>
			choose_digit=1;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001142:	2201      	movs	r2, #1
 8001144:	801a      	strh	r2, [r3, #0]
			break;
 8001146:	e000      	b.n	800114a <HAL_TIM_PeriodElapsedCallback+0x6e>
	}
 8001148:	bf00      	nop
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000298 	.word	0x20000298
 8001158:	20000874 	.word	0x20000874
 800115c:	20000000 	.word	0x20000000
 8001160:	40021400 	.word	0x40021400
 8001164:	40021800 	.word	0x40021800

08001168 <Regulator>:

int Regulator(float Kp, float Ki, float Kd, float val_now, float set_point,float dt)
{
 8001168:	b480      	push	{r7}
 800116a:	b08d      	sub	sp, #52	; 0x34
 800116c:	af00      	add	r7, sp, #0
 800116e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001172:	edc7 0a04 	vstr	s1, [r7, #16]
 8001176:	ed87 1a03 	vstr	s2, [r7, #12]
 800117a:	edc7 1a02 	vstr	s3, [r7, #8]
 800117e:	ed87 2a01 	vstr	s4, [r7, #4]
 8001182:	edc7 2a00 	vstr	s5, [r7]
	float error_now=set_point-val_now;
 8001186:	ed97 7a01 	vldr	s14, [r7, #4]
 800118a:	edd7 7a02 	vldr	s15, [r7, #8]
 800118e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001192:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	//czesc proporcjonalna
	if ((prev_error-prev_prev_error)>0 && val_now<3)
 8001196:	4b43      	ldr	r3, [pc, #268]	; (80012a4 <Regulator+0x13c>)
 8001198:	ed93 7a00 	vldr	s14, [r3]
 800119c:	4b42      	ldr	r3, [pc, #264]	; (80012a8 <Regulator+0x140>)
 800119e:	edd3 7a00 	vldr	s15, [r3]
 80011a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ae:	dd0b      	ble.n	80011c8 <Regulator+0x60>
 80011b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80011b4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80011b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c0:	d502      	bpl.n	80011c8 <Regulator+0x60>
	{
		error_now=prev_error;
 80011c2:	4b38      	ldr	r3, [pc, #224]	; (80012a4 <Regulator+0x13c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	float roznica_bledow=error_now-prev_error;
 80011c8:	4b36      	ldr	r3, [pc, #216]	; (80012a4 <Regulator+0x13c>)
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80011d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	if(roznica_bledow>20 || roznica_bledow<-20) //zabezpieczenie przed blednym odczytem z czujnika
 80011da:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011de:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80011e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ea:	dc08      	bgt.n	80011fe <Regulator+0x96>
 80011ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011f0:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80011f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fc:	d502      	bpl.n	8001204 <Regulator+0x9c>
	{
		error_now=prev_error;
 80011fe:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <Regulator+0x13c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	//czesc calkujaca
	float new_integration=integration+(error_now+prev_error)*dt/2;
 8001204:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <Regulator+0x13c>)
 8001206:	ed93 7a00 	vldr	s14, [r3]
 800120a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800120e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001212:	edd7 7a00 	vldr	s15, [r7]
 8001216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800121a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800121e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001222:	4b22      	ldr	r3, [pc, #136]	; (80012ac <Regulator+0x144>)
 8001224:	edd3 7a00 	vldr	s15, [r3]
 8001228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	integration=new_integration;
 8001230:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <Regulator+0x144>)
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	6013      	str	r3, [r2, #0]
	//czesc rozniczkujaca
	float derivative=(error_now-prev_error)/dt;
 8001236:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <Regulator+0x13c>)
 8001238:	edd3 7a00 	vldr	s15, [r3]
 800123c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001240:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001244:	ed97 7a00 	vldr	s14, [r7]
 8001248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800124c:	edc7 7a08 	vstr	s15, [r7, #32]
	prev_prev_error=prev_error;
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <Regulator+0x13c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <Regulator+0x140>)
 8001256:	6013      	str	r3, [r2, #0]
	prev_error=error_now;
 8001258:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <Regulator+0x13c>)
 800125a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125c:	6013      	str	r3, [r2, #0]
	int u_pid=(int)(Kp*error_now+Ki*new_integration+Kd*derivative);
 800125e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001262:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001266:	ee27 7a27 	vmul.f32	s14, s14, s15
 800126a:	edd7 6a04 	vldr	s13, [r7, #16]
 800126e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001272:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001276:	ee37 7a27 	vadd.f32	s14, s14, s15
 800127a:	edd7 6a03 	vldr	s13, [r7, #12]
 800127e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001282:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800128a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800128e:	ee17 3a90 	vmov	r3, s15
 8001292:	61fb      	str	r3, [r7, #28]
	return u_pid;
 8001294:	69fb      	ldr	r3, [r7, #28]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3734      	adds	r7, #52	; 0x34
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	200008c4 	.word	0x200008c4
 80012a8:	200008c8 	.word	0x200008c8
 80012ac:	200008c0 	.word	0x200008c0

080012b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08e      	sub	sp, #56	; 0x38
 80012b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b6:	f000 ffa0 	bl	80021fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ba:	f000 f903 	bl	80014c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012be:	f000 fb1f 	bl	8001900 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80012c2:	f000 fabf 	bl	8001844 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80012c6:	f000 faed 	bl	80018a4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80012ca:	f000 f9db 	bl	8001684 <MX_TIM3_Init>
  MX_TIM6_Init();
 80012ce:	f000 fa83 	bl	80017d8 <MX_TIM6_Init>
  MX_TIM2_Init();
 80012d2:	f000 f95f 	bl	8001594 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);
 80012d6:	2100      	movs	r1, #0
 80012d8:	486c      	ldr	r0, [pc, #432]	; (800148c <main+0x1dc>)
 80012da:	f003 f819 	bl	8004310 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 80012de:	2104      	movs	r1, #4
 80012e0:	486a      	ldr	r0, [pc, #424]	; (800148c <main+0x1dc>)
 80012e2:	f003 f815 	bl	8004310 <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80012e6:	2108      	movs	r1, #8
 80012e8:	4868      	ldr	r0, [pc, #416]	; (800148c <main+0x1dc>)
 80012ea:	f002 feb5 	bl	8004058 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80012ee:	2100      	movs	r1, #0
 80012f0:	4867      	ldr	r0, [pc, #412]	; (8001490 <main+0x1e0>)
 80012f2:	f002 feb1 	bl	8004058 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3,received_data, 5);
 80012f6:	2205      	movs	r2, #5
 80012f8:	4966      	ldr	r1, [pc, #408]	; (8001494 <main+0x1e4>)
 80012fa:	4867      	ldr	r0, [pc, #412]	; (8001498 <main+0x1e8>)
 80012fc:	f004 fb52 	bl	80059a4 <HAL_UART_Receive_IT>
  HAL_Delay(1000);
 8001300:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001304:	f000 ffd6 	bl	80022b4 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim6);
 8001308:	4864      	ldr	r0, [pc, #400]	; (800149c <main+0x1ec>)
 800130a:	f002 fdcb 	bl	8003ea4 <HAL_TIM_Base_Start_IT>
  uint8_t flaga=0;
 800130e:	2300      	movs	r3, #0
 8001310:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  float kp=1; //wzmocnienie członu proporcjonalnego
 8001314:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001318:	61bb      	str	r3, [r7, #24]
  float kd=0.15; //wzmocnienie członu różniczkującego
 800131a:	4b61      	ldr	r3, [pc, #388]	; (80014a0 <main+0x1f0>)
 800131c:	617b      	str	r3, [r7, #20]
  float ki=0.2; //wzmocnienie członu całkującego
 800131e:	4b61      	ldr	r3, [pc, #388]	; (80014a4 <main+0x1f4>)
 8001320:	613b      	str	r3, [r7, #16]
  float avg_pom=0.0;
 8001322:	f04f 0300 	mov.w	r3, #0
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
  float e_pom=0.0;
 8001328:	f04f 0300 	mov.w	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
  float dziel=0.0;
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
  int setangle=0; //wypełnienie PWM serwo
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  uint32_t start = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1); //poczatek sygnalu zwracanego przez czujnik
 8001338:	2100      	movs	r1, #0
 800133a:	4854      	ldr	r0, [pc, #336]	; (800148c <main+0x1dc>)
 800133c:	f003 fc86 	bl	8004c4c <HAL_TIM_ReadCapturedValue>
 8001340:	60f8      	str	r0, [r7, #12]
	  uint32_t stop = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2); //zakonczenie sygnalu zwracanego przez czujnik
 8001342:	2104      	movs	r1, #4
 8001344:	4851      	ldr	r0, [pc, #324]	; (800148c <main+0x1dc>)
 8001346:	f003 fc81 	bl	8004c4c <HAL_TIM_ReadCapturedValue>
 800134a:	60b8      	str	r0, [r7, #8]
//	  uint32_t value=(stop-start)/58;
	  float float_value=(float)(stop-start)/58.0; //obliczenie odleglosci
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	ee07 3a90 	vmov	s15, r3
 8001356:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800135a:	eddf 6a53 	vldr	s13, [pc, #332]	; 80014a8 <main+0x1f8>
 800135e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001362:	edc7 7a01 	vstr	s15, [r7, #4]
	  //snprintf(rx_data,15,"%.2f \r",float_value);
	  //HAL_UART_Transmit_IT(&huart3,rx_data,strlen(rx_data));
	  //display_digit=value;
	  HAL_Delay(10);//opoznienie pomiedzy kolejnymi pomiarami
 8001366:	200a      	movs	r0, #10
 8001368:	f000 ffa4 	bl	80022b4 <HAL_Delay>
	  if(float_value<40.0) //ten warunek ma na celu odfiltrowanie zbyt duzych wynikow, ktore sa bledne i zaklocalyby pomiary
 800136c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001370:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80014ac <main+0x1fc>
 8001374:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137c:	f140 8084 	bpl.w	8001488 <main+0x1d8>
	  {avg_pom+=float_value;
 8001380:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001384:	edd7 7a01 	vldr	s15, [r7, #4]
 8001388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800138c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		  dziel+=1.0;
 8001390:	edd7 7a08 	vldr	s15, [r7, #32]
 8001394:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001398:	ee77 7a87 	vadd.f32	s15, s15, s14
 800139c:	edc7 7a08 	vstr	s15, [r7, #32]
//		  snprintf(rx_data,15,"%.2f \r",float_value);
//		  HAL_UART_Transmit_IT(&huart3,rx_data,strlen(rx_data));}
	  flaga+=1;
 80013a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013a4:	3301      	adds	r3, #1
 80013a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  if (flaga==9)
 80013aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013ae:	2b09      	cmp	r3, #9
 80013b0:	d1c2      	bne.n	8001338 <main+0x88>
	  {	  if(dziel>0.0)
 80013b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80013b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013be:	dd0d      	ble.n	80013dc <main+0x12c>
		  {
		  e_pom=avg_pom/dziel;//obliczanie sredniej z pomiarow z ostatnich 100ms
 80013c0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80013c4:	ed97 7a08 	vldr	s14, [r7, #32]
 80013c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013cc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		  avg_pom=0.0;
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
		  dziel=0.0;
 80013d6:	f04f 0300 	mov.w	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
		  }
		  setangle=10*(Regulator(kp,ki,kd,e_pom,yr,0.1))+830;//obliczenie wypelnienia PWM serwomechanizmu
 80013dc:	4b34      	ldr	r3, [pc, #208]	; (80014b0 <main+0x200>)
 80013de:	edd3 7a00 	vldr	s15, [r3]
 80013e2:	eddf 2a34 	vldr	s5, [pc, #208]	; 80014b4 <main+0x204>
 80013e6:	eeb0 2a67 	vmov.f32	s4, s15
 80013ea:	edd7 1a09 	vldr	s3, [r7, #36]	; 0x24
 80013ee:	ed97 1a05 	vldr	s2, [r7, #20]
 80013f2:	edd7 0a04 	vldr	s1, [r7, #16]
 80013f6:	ed97 0a06 	vldr	s0, [r7, #24]
 80013fa:	f7ff feb5 	bl	8001168 <Regulator>
 80013fe:	4602      	mov	r2, r0
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	f203 333e 	addw	r3, r3, #830	; 0x33e
 800140c:	61fb      	str	r3, [r7, #28]
		  if(setangle>1200) //ograniczenie maksymalnego wychylenia
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001414:	dd03      	ble.n	800141e <main+0x16e>
		  {setangle=1200;}
 8001416:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	e006      	b.n	800142c <main+0x17c>
		  else if(setangle<450)
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8001424:	da02      	bge.n	800142c <main+0x17c>
		  {setangle=450;}
 8001426:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 800142a:	61fb      	str	r3, [r7, #28]
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,setangle); //przypisanie wypelnienia PWM
 800142c:	4b18      	ldr	r3, [pc, #96]	; (8001490 <main+0x1e0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	69fa      	ldr	r2, [r7, #28]
 8001432:	635a      	str	r2, [r3, #52]	; 0x34
		  snprintf(rx_data,15,"%.1f \r",e_pom);
 8001434:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001436:	f7ff f8a7 	bl	8000588 <__aeabi_f2d>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	e9cd 2300 	strd	r2, r3, [sp]
 8001442:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <main+0x208>)
 8001444:	210f      	movs	r1, #15
 8001446:	481d      	ldr	r0, [pc, #116]	; (80014bc <main+0x20c>)
 8001448:	f006 fd02 	bl	8007e50 <sniprintf>
		  HAL_UART_Transmit_IT(&huart3,rx_data,strlen(rx_data));//przeslanie po UART sredniej z pomiarow
 800144c:	481b      	ldr	r0, [pc, #108]	; (80014bc <main+0x20c>)
 800144e:	f7fe fedf 	bl	8000210 <strlen>
 8001452:	4603      	mov	r3, r0
 8001454:	b29b      	uxth	r3, r3
 8001456:	461a      	mov	r2, r3
 8001458:	4918      	ldr	r1, [pc, #96]	; (80014bc <main+0x20c>)
 800145a:	480f      	ldr	r0, [pc, #60]	; (8001498 <main+0x1e8>)
 800145c:	f004 fa44 	bl	80058e8 <HAL_UART_Transmit_IT>
		  e_pom=roundf(e_pom);//zaokraglenie sredniej z pomiarow
 8001460:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001464:	f009 fc3a 	bl	800acdc <roundf>
 8001468:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
		  flaga=0;
 800146c:	2300      	movs	r3, #0
 800146e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  display_digit=e_pom;//przypisanie sredniego pomiaru do liczby wyswietlanej na czujniku
 8001472:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800147a:	ee17 2a90 	vmov	r2, s15
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <main+0x210>)
 8001480:	601a      	str	r2, [r3, #0]
		  HAL_Delay(10); //opoznienie, ktore ma na celu eliminacje zakloconych pomiarow podczas obrotu
 8001482:	200a      	movs	r0, #10
 8001484:	f000 ff16 	bl	80022b4 <HAL_Delay>
  {
 8001488:	e756      	b.n	8001338 <main+0x88>
 800148a:	bf00      	nop
 800148c:	2000024c 	.word	0x2000024c
 8001490:	20000200 	.word	0x20000200
 8001494:	200008ac 	.word	0x200008ac
 8001498:	200002e4 	.word	0x200002e4
 800149c:	20000298 	.word	0x20000298
 80014a0:	3e19999a 	.word	0x3e19999a
 80014a4:	3e4ccccd 	.word	0x3e4ccccd
 80014a8:	42680000 	.word	0x42680000
 80014ac:	42200000 	.word	0x42200000
 80014b0:	20000004 	.word	0x20000004
 80014b4:	3dcccccd 	.word	0x3dcccccd
 80014b8:	0800ad74 	.word	0x0800ad74
 80014bc:	20000878 	.word	0x20000878
 80014c0:	20000874 	.word	0x20000874

080014c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b094      	sub	sp, #80	; 0x50
 80014c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ca:	f107 0320 	add.w	r3, r7, #32
 80014ce:	2230      	movs	r2, #48	; 0x30
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f006 f84a 	bl	800756c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014e8:	f001 fbba 	bl	8002c60 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ec:	4b27      	ldr	r3, [pc, #156]	; (800158c <SystemClock_Config+0xc8>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	4a26      	ldr	r2, [pc, #152]	; (800158c <SystemClock_Config+0xc8>)
 80014f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f6:	6413      	str	r3, [r2, #64]	; 0x40
 80014f8:	4b24      	ldr	r3, [pc, #144]	; (800158c <SystemClock_Config+0xc8>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001504:	4b22      	ldr	r3, [pc, #136]	; (8001590 <SystemClock_Config+0xcc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800150c:	4a20      	ldr	r2, [pc, #128]	; (8001590 <SystemClock_Config+0xcc>)
 800150e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b1e      	ldr	r3, [pc, #120]	; (8001590 <SystemClock_Config+0xcc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001520:	2301      	movs	r3, #1
 8001522:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001524:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152a:	2302      	movs	r3, #2
 800152c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800152e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001532:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001534:	2304      	movs	r3, #4
 8001536:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001538:	2348      	movs	r3, #72	; 0x48
 800153a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800153c:	2302      	movs	r3, #2
 800153e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001540:	2303      	movs	r3, #3
 8001542:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001544:	f107 0320 	add.w	r3, r7, #32
 8001548:	4618      	mov	r0, r3
 800154a:	f001 fb99 	bl	8002c80 <HAL_RCC_OscConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001554:	f000 fb26 	bl	8001ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001558:	230f      	movs	r3, #15
 800155a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155c:	2302      	movs	r3, #2
 800155e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001568:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800156e:	f107 030c 	add.w	r3, r7, #12
 8001572:	2102      	movs	r1, #2
 8001574:	4618      	mov	r0, r3
 8001576:	f001 fe27 	bl	80031c8 <HAL_RCC_ClockConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001580:	f000 fb10 	bl	8001ba4 <Error_Handler>
  }
}
 8001584:	bf00      	nop
 8001586:	3750      	adds	r7, #80	; 0x50
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40023800 	.word	0x40023800
 8001590:	40007000 	.word	0x40007000

08001594 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08e      	sub	sp, #56	; 0x38
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015b4:	463b      	mov	r3, r7
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
 80015c0:	611a      	str	r2, [r3, #16]
 80015c2:	615a      	str	r2, [r3, #20]
 80015c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015c6:	4b2e      	ldr	r3, [pc, #184]	; (8001680 <MX_TIM2_Init+0xec>)
 80015c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80015ce:	4b2c      	ldr	r3, [pc, #176]	; (8001680 <MX_TIM2_Init+0xec>)
 80015d0:	2247      	movs	r2, #71	; 0x47
 80015d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d4:	4b2a      	ldr	r3, [pc, #168]	; (8001680 <MX_TIM2_Init+0xec>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80015da:	4b29      	ldr	r3, [pc, #164]	; (8001680 <MX_TIM2_Init+0xec>)
 80015dc:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80015e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e2:	4b27      	ldr	r3, [pc, #156]	; (8001680 <MX_TIM2_Init+0xec>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e8:	4b25      	ldr	r3, [pc, #148]	; (8001680 <MX_TIM2_Init+0xec>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015ee:	4824      	ldr	r0, [pc, #144]	; (8001680 <MX_TIM2_Init+0xec>)
 80015f0:	f002 fc00 	bl	8003df4 <HAL_TIM_Base_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80015fa:	f000 fad3 	bl	8001ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001604:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001608:	4619      	mov	r1, r3
 800160a:	481d      	ldr	r0, [pc, #116]	; (8001680 <MX_TIM2_Init+0xec>)
 800160c:	f003 fa54 	bl	8004ab8 <HAL_TIM_ConfigClockSource>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001616:	f000 fac5 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800161a:	4819      	ldr	r0, [pc, #100]	; (8001680 <MX_TIM2_Init+0xec>)
 800161c:	f002 fcba 	bl	8003f94 <HAL_TIM_PWM_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001626:	f000 fabd 	bl	8001ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	4619      	mov	r1, r3
 8001638:	4811      	ldr	r0, [pc, #68]	; (8001680 <MX_TIM2_Init+0xec>)
 800163a:	f004 f85b 	bl	80056f4 <HAL_TIMEx_MasterConfigSynchronization>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001644:	f000 faae 	bl	8001ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001648:	2360      	movs	r3, #96	; 0x60
 800164a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 830;
 800164c:	f240 333e 	movw	r3, #830	; 0x33e
 8001650:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001652:	2300      	movs	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800165a:	463b      	mov	r3, r7
 800165c:	2200      	movs	r2, #0
 800165e:	4619      	mov	r1, r3
 8001660:	4807      	ldr	r0, [pc, #28]	; (8001680 <MX_TIM2_Init+0xec>)
 8001662:	f003 f915 	bl	8004890 <HAL_TIM_PWM_ConfigChannel>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800166c:	f000 fa9a 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001670:	4803      	ldr	r0, [pc, #12]	; (8001680 <MX_TIM2_Init+0xec>)
 8001672:	f000 fb3b 	bl	8001cec <HAL_TIM_MspPostInit>

}
 8001676:	bf00      	nop
 8001678:	3738      	adds	r7, #56	; 0x38
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000200 	.word	0x20000200

08001684 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b092      	sub	sp, #72	; 0x48
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800168a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001698:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b2:	463b      	mov	r3, r7
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
 80016c0:	615a      	str	r2, [r3, #20]
 80016c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016c4:	4b42      	ldr	r3, [pc, #264]	; (80017d0 <MX_TIM3_Init+0x14c>)
 80016c6:	4a43      	ldr	r2, [pc, #268]	; (80017d4 <MX_TIM3_Init+0x150>)
 80016c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80016ca:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <MX_TIM3_Init+0x14c>)
 80016cc:	2247      	movs	r2, #71	; 0x47
 80016ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b3f      	ldr	r3, [pc, #252]	; (80017d0 <MX_TIM3_Init+0x14c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80016d6:	4b3e      	ldr	r3, [pc, #248]	; (80017d0 <MX_TIM3_Init+0x14c>)
 80016d8:	f242 720f 	movw	r2, #9999	; 0x270f
 80016dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016de:	4b3c      	ldr	r3, [pc, #240]	; (80017d0 <MX_TIM3_Init+0x14c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e4:	4b3a      	ldr	r3, [pc, #232]	; (80017d0 <MX_TIM3_Init+0x14c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016ea:	4839      	ldr	r0, [pc, #228]	; (80017d0 <MX_TIM3_Init+0x14c>)
 80016ec:	f002 fb82 	bl	8003df4 <HAL_TIM_Base_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80016f6:	f000 fa55 	bl	8001ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001700:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001704:	4619      	mov	r1, r3
 8001706:	4832      	ldr	r0, [pc, #200]	; (80017d0 <MX_TIM3_Init+0x14c>)
 8001708:	f003 f9d6 	bl	8004ab8 <HAL_TIM_ConfigClockSource>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001712:	f000 fa47 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001716:	482e      	ldr	r0, [pc, #184]	; (80017d0 <MX_TIM3_Init+0x14c>)
 8001718:	f002 fd98 	bl	800424c <HAL_TIM_IC_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001722:	f000 fa3f 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001726:	482a      	ldr	r0, [pc, #168]	; (80017d0 <MX_TIM3_Init+0x14c>)
 8001728:	f002 fc34 	bl	8003f94 <HAL_TIM_PWM_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001732:	f000 fa37 	bl	8001ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001736:	2300      	movs	r3, #0
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800173e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001742:	4619      	mov	r1, r3
 8001744:	4822      	ldr	r0, [pc, #136]	; (80017d0 <MX_TIM3_Init+0x14c>)
 8001746:	f003 ffd5 	bl	80056f4 <HAL_TIMEx_MasterConfigSynchronization>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001750:	f000 fa28 	bl	8001ba4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001758:	2301      	movs	r3, #1
 800175a:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	2200      	movs	r2, #0
 800176a:	4619      	mov	r1, r3
 800176c:	4818      	ldr	r0, [pc, #96]	; (80017d0 <MX_TIM3_Init+0x14c>)
 800176e:	f002 fff2 	bl	8004756 <HAL_TIM_IC_ConfigChannel>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8001778:	f000 fa14 	bl	8001ba4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800177c:	2302      	movs	r3, #2
 800177e:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001780:	2302      	movs	r3, #2
 8001782:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	2204      	movs	r2, #4
 800178a:	4619      	mov	r1, r3
 800178c:	4810      	ldr	r0, [pc, #64]	; (80017d0 <MX_TIM3_Init+0x14c>)
 800178e:	f002 ffe2 	bl	8004756 <HAL_TIM_IC_ConfigChannel>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001798:	f000 fa04 	bl	8001ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800179c:	2360      	movs	r3, #96	; 0x60
 800179e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 80017a0:	230a      	movs	r3, #10
 80017a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017ac:	463b      	mov	r3, r7
 80017ae:	2208      	movs	r2, #8
 80017b0:	4619      	mov	r1, r3
 80017b2:	4807      	ldr	r0, [pc, #28]	; (80017d0 <MX_TIM3_Init+0x14c>)
 80017b4:	f003 f86c 	bl	8004890 <HAL_TIM_PWM_ConfigChannel>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM3_Init+0x13e>
  {
    Error_Handler();
 80017be:	f000 f9f1 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017c2:	4803      	ldr	r0, [pc, #12]	; (80017d0 <MX_TIM3_Init+0x14c>)
 80017c4:	f000 fa92 	bl	8001cec <HAL_TIM_MspPostInit>

}
 80017c8:	bf00      	nop
 80017ca:	3748      	adds	r7, #72	; 0x48
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	2000024c 	.word	0x2000024c
 80017d4:	40000400 	.word	0x40000400

080017d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_TIM6_Init+0x64>)
 80017ea:	4a15      	ldr	r2, [pc, #84]	; (8001840 <MX_TIM6_Init+0x68>)
 80017ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <MX_TIM6_Init+0x64>)
 80017f0:	2247      	movs	r2, #71	; 0x47
 80017f2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_TIM6_Init+0x64>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <MX_TIM6_Init+0x64>)
 80017fc:	f242 720f 	movw	r2, #9999	; 0x270f
 8001800:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <MX_TIM6_Init+0x64>)
 8001804:	2280      	movs	r2, #128	; 0x80
 8001806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001808:	480c      	ldr	r0, [pc, #48]	; (800183c <MX_TIM6_Init+0x64>)
 800180a:	f002 faf3 	bl	8003df4 <HAL_TIM_Base_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001814:	f000 f9c6 	bl	8001ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001818:	2300      	movs	r3, #0
 800181a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	4619      	mov	r1, r3
 8001824:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_TIM6_Init+0x64>)
 8001826:	f003 ff65 	bl	80056f4 <HAL_TIMEx_MasterConfigSynchronization>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001830:	f000 f9b8 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000298 	.word	0x20000298
 8001840:	40001000 	.word	0x40001000

08001844 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <MX_USART3_UART_Init+0x58>)
 800184a:	4a15      	ldr	r2, [pc, #84]	; (80018a0 <MX_USART3_UART_Init+0x5c>)
 800184c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800184e:	4b13      	ldr	r3, [pc, #76]	; (800189c <MX_USART3_UART_Init+0x58>)
 8001850:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001854:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <MX_USART3_UART_Init+0x58>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <MX_USART3_UART_Init+0x58>)
 800185e:	2200      	movs	r2, #0
 8001860:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <MX_USART3_UART_Init+0x58>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <MX_USART3_UART_Init+0x58>)
 800186a:	220c      	movs	r2, #12
 800186c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <MX_USART3_UART_Init+0x58>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <MX_USART3_UART_Init+0x58>)
 8001876:	2200      	movs	r2, #0
 8001878:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <MX_USART3_UART_Init+0x58>)
 800187c:	2200      	movs	r2, #0
 800187e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <MX_USART3_UART_Init+0x58>)
 8001882:	2200      	movs	r2, #0
 8001884:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <MX_USART3_UART_Init+0x58>)
 8001888:	f003 ffe0 	bl	800584c <HAL_UART_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001892:	f000 f987 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200002e4 	.word	0x200002e4
 80018a0:	40004800 	.word	0x40004800

080018a4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80018a8:	4b14      	ldr	r3, [pc, #80]	; (80018fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80018ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018b2:	2206      	movs	r2, #6
 80018b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80018b6:	4b11      	ldr	r3, [pc, #68]	; (80018fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018b8:	2202      	movs	r2, #2
 80018ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018be:	2200      	movs	r2, #0
 80018c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018c4:	2202      	movs	r2, #2
 80018c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80018da:	4b08      	ldr	r3, [pc, #32]	; (80018fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018dc:	2201      	movs	r2, #1
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80018e6:	4805      	ldr	r0, [pc, #20]	; (80018fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018e8:	f001 f871 	bl	80029ce <HAL_PCD_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80018f2:	f000 f957 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2000036c 	.word	0x2000036c

08001900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08e      	sub	sp, #56	; 0x38
 8001904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001916:	4b9c      	ldr	r3, [pc, #624]	; (8001b88 <MX_GPIO_Init+0x288>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a9b      	ldr	r2, [pc, #620]	; (8001b88 <MX_GPIO_Init+0x288>)
 800191c:	f043 0310 	orr.w	r3, r3, #16
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b99      	ldr	r3, [pc, #612]	; (8001b88 <MX_GPIO_Init+0x288>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0310 	and.w	r3, r3, #16
 800192a:	623b      	str	r3, [r7, #32]
 800192c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192e:	4b96      	ldr	r3, [pc, #600]	; (8001b88 <MX_GPIO_Init+0x288>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a95      	ldr	r2, [pc, #596]	; (8001b88 <MX_GPIO_Init+0x288>)
 8001934:	f043 0304 	orr.w	r3, r3, #4
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b93      	ldr	r3, [pc, #588]	; (8001b88 <MX_GPIO_Init+0x288>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	61fb      	str	r3, [r7, #28]
 8001944:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001946:	4b90      	ldr	r3, [pc, #576]	; (8001b88 <MX_GPIO_Init+0x288>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a8f      	ldr	r2, [pc, #572]	; (8001b88 <MX_GPIO_Init+0x288>)
 800194c:	f043 0320 	orr.w	r3, r3, #32
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b8d      	ldr	r3, [pc, #564]	; (8001b88 <MX_GPIO_Init+0x288>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0320 	and.w	r3, r3, #32
 800195a:	61bb      	str	r3, [r7, #24]
 800195c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800195e:	4b8a      	ldr	r3, [pc, #552]	; (8001b88 <MX_GPIO_Init+0x288>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a89      	ldr	r2, [pc, #548]	; (8001b88 <MX_GPIO_Init+0x288>)
 8001964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b87      	ldr	r3, [pc, #540]	; (8001b88 <MX_GPIO_Init+0x288>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001976:	4b84      	ldr	r3, [pc, #528]	; (8001b88 <MX_GPIO_Init+0x288>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a83      	ldr	r2, [pc, #524]	; (8001b88 <MX_GPIO_Init+0x288>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b81      	ldr	r3, [pc, #516]	; (8001b88 <MX_GPIO_Init+0x288>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800198e:	4b7e      	ldr	r3, [pc, #504]	; (8001b88 <MX_GPIO_Init+0x288>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a7d      	ldr	r2, [pc, #500]	; (8001b88 <MX_GPIO_Init+0x288>)
 8001994:	f043 0302 	orr.w	r3, r3, #2
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b7b      	ldr	r3, [pc, #492]	; (8001b88 <MX_GPIO_Init+0x288>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019a6:	4b78      	ldr	r3, [pc, #480]	; (8001b88 <MX_GPIO_Init+0x288>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a77      	ldr	r2, [pc, #476]	; (8001b88 <MX_GPIO_Init+0x288>)
 80019ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b75      	ldr	r3, [pc, #468]	; (8001b88 <MX_GPIO_Init+0x288>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019be:	4b72      	ldr	r3, [pc, #456]	; (8001b88 <MX_GPIO_Init+0x288>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a71      	ldr	r2, [pc, #452]	; (8001b88 <MX_GPIO_Init+0x288>)
 80019c4:	f043 0308 	orr.w	r3, r3, #8
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b6f      	ldr	r3, [pc, #444]	; (8001b88 <MX_GPIO_Init+0x288>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, UP_Pin|BOTTOM_LEFT_Pin|UP_RIGHT_Pin|BOTTOM_RIGHT_Pin
 80019d6:	2200      	movs	r2, #0
 80019d8:	217c      	movs	r1, #124	; 0x7c
 80019da:	486c      	ldr	r0, [pc, #432]	; (8001b8c <MX_GPIO_Init+0x28c>)
 80019dc:	f000 ffde 	bl	800299c <HAL_GPIO_WritePin>
                          |BOTTOM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MIDDLE_Pin|UP_LEFT_Pin, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80019e6:	486a      	ldr	r0, [pc, #424]	; (8001b90 <MX_GPIO_Init+0x290>)
 80019e8:	f000 ffd8 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 80019ec:	2201      	movs	r2, #1
 80019ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019f2:	4867      	ldr	r0, [pc, #412]	; (8001b90 <MX_GPIO_Init+0x290>)
 80019f4:	f000 ffd2 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80019f8:	2200      	movs	r2, #0
 80019fa:	f244 0181 	movw	r1, #16513	; 0x4081
 80019fe:	4865      	ldr	r0, [pc, #404]	; (8001b94 <MX_GPIO_Init+0x294>)
 8001a00:	f000 ffcc 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 8001a04:	2201      	movs	r2, #1
 8001a06:	2102      	movs	r1, #2
 8001a08:	4863      	ldr	r0, [pc, #396]	; (8001b98 <MX_GPIO_Init+0x298>)
 8001a0a:	f000 ffc7 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2140      	movs	r1, #64	; 0x40
 8001a12:	4861      	ldr	r0, [pc, #388]	; (8001b98 <MX_GPIO_Init+0x298>)
 8001a14:	f000 ffc2 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : UP_Pin BOTTOM_LEFT_Pin UP_RIGHT_Pin BOTTOM_RIGHT_Pin
                           BOTTOM_Pin */
  GPIO_InitStruct.Pin = UP_Pin|BOTTOM_LEFT_Pin|UP_RIGHT_Pin|BOTTOM_RIGHT_Pin
 8001a18:	237c      	movs	r3, #124	; 0x7c
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
                          |BOTTOM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4857      	ldr	r0, [pc, #348]	; (8001b8c <MX_GPIO_Init+0x28c>)
 8001a30:	f000 fe08 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001a34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a3a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4854      	ldr	r0, [pc, #336]	; (8001b9c <MX_GPIO_Init+0x29c>)
 8001a4c:	f000 fdfa 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIDDLE_Pin UP_LEFT_Pin */
  GPIO_InitStruct.Pin = MIDDLE_Pin|UP_LEFT_Pin;
 8001a50:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a56:	2301      	movs	r3, #1
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a66:	4619      	mov	r1, r3
 8001a68:	4849      	ldr	r0, [pc, #292]	; (8001b90 <MX_GPIO_Init+0x290>)
 8001a6a:	f000 fdeb 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_1_Pin */
  GPIO_InitStruct.Pin = SEG_1_Pin;
 8001a6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a74:	2311      	movs	r3, #17
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SEG_1_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a84:	4619      	mov	r1, r3
 8001a86:	4842      	ldr	r0, [pc, #264]	; (8001b90 <MX_GPIO_Init+0x290>)
 8001a88:	f000 fddc 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001a8c:	2332      	movs	r3, #50	; 0x32
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	2302      	movs	r3, #2
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a9c:	230b      	movs	r3, #11
 8001a9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	483d      	ldr	r0, [pc, #244]	; (8001b9c <MX_GPIO_Init+0x29c>)
 8001aa8:	f000 fdcc 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001aac:	2386      	movs	r3, #134	; 0x86
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001abc:	230b      	movs	r3, #11
 8001abe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4836      	ldr	r0, [pc, #216]	; (8001ba0 <MX_GPIO_Init+0x2a0>)
 8001ac8:	f000 fdbc 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001acc:	f244 0381 	movw	r3, #16513	; 0x4081
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	482b      	ldr	r0, [pc, #172]	; (8001b94 <MX_GPIO_Init+0x294>)
 8001ae6:	f000 fdad 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_2_Pin */
  GPIO_InitStruct.Pin = SEG_2_Pin;
 8001aea:	2302      	movs	r3, #2
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001aee:	2311      	movs	r3, #17
 8001af0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SEG_2_GPIO_Port, &GPIO_InitStruct);
 8001afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001afe:	4619      	mov	r1, r3
 8001b00:	4825      	ldr	r0, [pc, #148]	; (8001b98 <MX_GPIO_Init+0x298>)
 8001b02:	f000 fd9f 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b18:	230b      	movs	r3, #11
 8001b1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b20:	4619      	mov	r1, r3
 8001b22:	481c      	ldr	r0, [pc, #112]	; (8001b94 <MX_GPIO_Init+0x294>)
 8001b24:	f000 fd8e 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001b28:	2340      	movs	r3, #64	; 0x40
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4816      	ldr	r0, [pc, #88]	; (8001b98 <MX_GPIO_Init+0x298>)
 8001b40:	f000 fd80 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b54:	4619      	mov	r1, r3
 8001b56:	4810      	ldr	r0, [pc, #64]	; (8001b98 <MX_GPIO_Init+0x298>)
 8001b58:	f000 fd74 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001b5c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b6e:	230b      	movs	r3, #11
 8001b70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b76:	4619      	mov	r1, r3
 8001b78:	4807      	ldr	r0, [pc, #28]	; (8001b98 <MX_GPIO_Init+0x298>)
 8001b7a:	f000 fd63 	bl	8002644 <HAL_GPIO_Init>

}
 8001b7e:	bf00      	nop
 8001b80:	3738      	adds	r7, #56	; 0x38
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40021400 	.word	0x40021400
 8001b94:	40020400 	.word	0x40020400
 8001b98:	40021800 	.word	0x40021800
 8001b9c:	40020800 	.word	0x40020800
 8001ba0:	40020000 	.word	0x40020000

08001ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba8:	b672      	cpsid	i
}
 8001baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bac:	e7fe      	b.n	8001bac <Error_Handler+0x8>
	...

08001bb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <HAL_MspInit+0x44>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	4a0e      	ldr	r2, [pc, #56]	; (8001bf4 <HAL_MspInit+0x44>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <HAL_MspInit+0x44>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_MspInit+0x44>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	4a08      	ldr	r2, [pc, #32]	; (8001bf4 <HAL_MspInit+0x44>)
 8001bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_MspInit+0x44>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800

08001bf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08c      	sub	sp, #48	; 0x30
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c18:	d114      	bne.n	8001c44 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c1a:	4b30      	ldr	r3, [pc, #192]	; (8001cdc <HAL_TIM_Base_MspInit+0xe4>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a2f      	ldr	r2, [pc, #188]	; (8001cdc <HAL_TIM_Base_MspInit+0xe4>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b2d      	ldr	r3, [pc, #180]	; (8001cdc <HAL_TIM_Base_MspInit+0xe4>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	61bb      	str	r3, [r7, #24]
 8001c30:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2100      	movs	r1, #0
 8001c36:	201c      	movs	r0, #28
 8001c38:	f000 fc3b 	bl	80024b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c3c:	201c      	movs	r0, #28
 8001c3e:	f000 fc54 	bl	80024ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001c42:	e046      	b.n	8001cd2 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a25      	ldr	r2, [pc, #148]	; (8001ce0 <HAL_TIM_Base_MspInit+0xe8>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d128      	bne.n	8001ca0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c4e:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <HAL_TIM_Base_MspInit+0xe4>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	4a22      	ldr	r2, [pc, #136]	; (8001cdc <HAL_TIM_Base_MspInit+0xe4>)
 8001c54:	f043 0302 	orr.w	r3, r3, #2
 8001c58:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5a:	4b20      	ldr	r3, [pc, #128]	; (8001cdc <HAL_TIM_Base_MspInit+0xe4>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <HAL_TIM_Base_MspInit+0xe4>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a1c      	ldr	r2, [pc, #112]	; (8001cdc <HAL_TIM_Base_MspInit+0xe4>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <HAL_TIM_Base_MspInit+0xe4>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c7e:	2340      	movs	r3, #64	; 0x40
 8001c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	f107 031c 	add.w	r3, r7, #28
 8001c96:	4619      	mov	r1, r3
 8001c98:	4812      	ldr	r0, [pc, #72]	; (8001ce4 <HAL_TIM_Base_MspInit+0xec>)
 8001c9a:	f000 fcd3 	bl	8002644 <HAL_GPIO_Init>
}
 8001c9e:	e018      	b.n	8001cd2 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM6)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a10      	ldr	r2, [pc, #64]	; (8001ce8 <HAL_TIM_Base_MspInit+0xf0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d113      	bne.n	8001cd2 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_TIM_Base_MspInit+0xe4>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	4a0b      	ldr	r2, [pc, #44]	; (8001cdc <HAL_TIM_Base_MspInit+0xe4>)
 8001cb0:	f043 0310 	orr.w	r3, r3, #16
 8001cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_TIM_Base_MspInit+0xe4>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f003 0310 	and.w	r3, r3, #16
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	2036      	movs	r0, #54	; 0x36
 8001cc8:	f000 fbf3 	bl	80024b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ccc:	2036      	movs	r0, #54	; 0x36
 8001cce:	f000 fc0c 	bl	80024ea <HAL_NVIC_EnableIRQ>
}
 8001cd2:	bf00      	nop
 8001cd4:	3730      	adds	r7, #48	; 0x30
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40000400 	.word	0x40000400
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	40001000 	.word	0x40001000

08001cec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	; 0x28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d0c:	d11c      	bne.n	8001d48 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <HAL_TIM_MspPostInit+0xa8>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a20      	ldr	r2, [pc, #128]	; (8001d94 <HAL_TIM_MspPostInit+0xa8>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <HAL_TIM_MspPostInit+0xa8>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d26:	2320      	movs	r3, #32
 8001d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d36:	2301      	movs	r3, #1
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4815      	ldr	r0, [pc, #84]	; (8001d98 <HAL_TIM_MspPostInit+0xac>)
 8001d42:	f000 fc7f 	bl	8002644 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d46:	e021      	b.n	8001d8c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a13      	ldr	r2, [pc, #76]	; (8001d9c <HAL_TIM_MspPostInit+0xb0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d11c      	bne.n	8001d8c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d52:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <HAL_TIM_MspPostInit+0xa8>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a0f      	ldr	r2, [pc, #60]	; (8001d94 <HAL_TIM_MspPostInit+0xa8>)
 8001d58:	f043 0304 	orr.w	r3, r3, #4
 8001d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <HAL_TIM_MspPostInit+0xa8>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	4619      	mov	r1, r3
 8001d86:	4806      	ldr	r0, [pc, #24]	; (8001da0 <HAL_TIM_MspPostInit+0xb4>)
 8001d88:	f000 fc5c 	bl	8002644 <HAL_GPIO_Init>
}
 8001d8c:	bf00      	nop
 8001d8e:	3728      	adds	r7, #40	; 0x28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	40000400 	.word	0x40000400
 8001da0:	40020800 	.word	0x40020800

08001da4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b0aa      	sub	sp, #168	; 0xa8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dbc:	f107 0310 	add.w	r3, r7, #16
 8001dc0:	2284      	movs	r2, #132	; 0x84
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f005 fbd1 	bl	800756c <memset>
  if(huart->Instance==USART3)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a26      	ldr	r2, [pc, #152]	; (8001e68 <HAL_UART_MspInit+0xc4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d144      	bne.n	8001e5e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001dd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dd8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dde:	f107 0310 	add.w	r3, r7, #16
 8001de2:	4618      	mov	r0, r3
 8001de4:	f001 fc16 	bl	8003614 <HAL_RCCEx_PeriphCLKConfig>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001dee:	f7ff fed9 	bl	8001ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001df2:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <HAL_UART_MspInit+0xc8>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	4a1d      	ldr	r2, [pc, #116]	; (8001e6c <HAL_UART_MspInit+0xc8>)
 8001df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfe:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <HAL_UART_MspInit+0xc8>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e0a:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <HAL_UART_MspInit+0xc8>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a17      	ldr	r2, [pc, #92]	; (8001e6c <HAL_UART_MspInit+0xc8>)
 8001e10:	f043 0308 	orr.w	r3, r3, #8
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <HAL_UART_MspInit+0xc8>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001e22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e36:	2303      	movs	r3, #3
 8001e38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e3c:	2307      	movs	r3, #7
 8001e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e42:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e46:	4619      	mov	r1, r3
 8001e48:	4809      	ldr	r0, [pc, #36]	; (8001e70 <HAL_UART_MspInit+0xcc>)
 8001e4a:	f000 fbfb 	bl	8002644 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	2027      	movs	r0, #39	; 0x27
 8001e54:	f000 fb2d 	bl	80024b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e58:	2027      	movs	r0, #39	; 0x27
 8001e5a:	f000 fb46 	bl	80024ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e5e:	bf00      	nop
 8001e60:	37a8      	adds	r7, #168	; 0xa8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40004800 	.word	0x40004800
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020c00 	.word	0x40020c00

08001e74 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b0ac      	sub	sp, #176	; 0xb0
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e8c:	f107 0318 	add.w	r3, r7, #24
 8001e90:	2284      	movs	r2, #132	; 0x84
 8001e92:	2100      	movs	r1, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f005 fb69 	bl	800756c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ea2:	d159      	bne.n	8001f58 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001ea4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ea8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eb0:	f107 0318 	add.w	r3, r7, #24
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f001 fbad 	bl	8003614 <HAL_RCCEx_PeriphCLKConfig>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001ec0:	f7ff fe70 	bl	8001ba4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec4:	4b26      	ldr	r3, [pc, #152]	; (8001f60 <HAL_PCD_MspInit+0xec>)
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	4a25      	ldr	r2, [pc, #148]	; (8001f60 <HAL_PCD_MspInit+0xec>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed0:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <HAL_PCD_MspInit+0xec>)
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001edc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001ee0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ef6:	230a      	movs	r3, #10
 8001ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f00:	4619      	mov	r1, r3
 8001f02:	4818      	ldr	r0, [pc, #96]	; (8001f64 <HAL_PCD_MspInit+0xf0>)
 8001f04:	f000 fb9e 	bl	8002644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001f08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f20:	4619      	mov	r1, r3
 8001f22:	4810      	ldr	r0, [pc, #64]	; (8001f64 <HAL_PCD_MspInit+0xf0>)
 8001f24:	f000 fb8e 	bl	8002644 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f28:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <HAL_PCD_MspInit+0xec>)
 8001f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2c:	4a0c      	ldr	r2, [pc, #48]	; (8001f60 <HAL_PCD_MspInit+0xec>)
 8001f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f32:	6353      	str	r3, [r2, #52]	; 0x34
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <HAL_PCD_MspInit+0xec>)
 8001f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <HAL_PCD_MspInit+0xec>)
 8001f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f44:	4a06      	ldr	r2, [pc, #24]	; (8001f60 <HAL_PCD_MspInit+0xec>)
 8001f46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f4a:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4c:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <HAL_PCD_MspInit+0xec>)
 8001f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001f58:	bf00      	nop
 8001f5a:	37b0      	adds	r7, #176	; 0xb0
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40020000 	.word	0x40020000

08001f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <NMI_Handler+0x4>

08001f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f72:	e7fe      	b.n	8001f72 <HardFault_Handler+0x4>

08001f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <MemManage_Handler+0x4>

08001f7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f7e:	e7fe      	b.n	8001f7e <BusFault_Handler+0x4>

08001f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <UsageFault_Handler+0x4>

08001f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fb4:	f000 f95e 	bl	8002274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fc0:	4802      	ldr	r0, [pc, #8]	; (8001fcc <TIM2_IRQHandler+0x10>)
 8001fc2:	f002 faa9 	bl	8004518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000200 	.word	0x20000200

08001fd0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001fd4:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <USART3_IRQHandler+0x10>)
 8001fd6:	f003 fd29 	bl	8005a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200002e4 	.word	0x200002e4

08001fe4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001fe8:	4802      	ldr	r0, [pc, #8]	; (8001ff4 <TIM6_DAC_IRQHandler+0x10>)
 8001fea:	f002 fa95 	bl	8004518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000298 	.word	0x20000298

08001ff8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
	return 1;
 8001ffc:	2301      	movs	r3, #1
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <_kill>:

int _kill(int pid, int sig)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002012:	f005 fa81 	bl	8007518 <__errno>
 8002016:	4603      	mov	r3, r0
 8002018:	2216      	movs	r2, #22
 800201a:	601a      	str	r2, [r3, #0]
	return -1;
 800201c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <_exit>:

void _exit (int status)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002030:	f04f 31ff 	mov.w	r1, #4294967295
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ffe7 	bl	8002008 <_kill>
	while (1) {}		/* Make sure we hang here */
 800203a:	e7fe      	b.n	800203a <_exit+0x12>

0800203c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	e00a      	b.n	8002064 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800204e:	f3af 8000 	nop.w
 8002052:	4601      	mov	r1, r0
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	60ba      	str	r2, [r7, #8]
 800205a:	b2ca      	uxtb	r2, r1
 800205c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	3301      	adds	r3, #1
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	429a      	cmp	r2, r3
 800206a:	dbf0      	blt.n	800204e <_read+0x12>
	}

return len;
 800206c:	687b      	ldr	r3, [r7, #4]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b086      	sub	sp, #24
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	e009      	b.n	800209c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	60ba      	str	r2, [r7, #8]
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	3301      	adds	r3, #1
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	dbf1      	blt.n	8002088 <_write+0x12>
	}
	return len;
 80020a4:	687b      	ldr	r3, [r7, #4]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <_close>:

int _close(int file)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
	return -1;
 80020b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020d6:	605a      	str	r2, [r3, #4]
	return 0;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <_isatty>:

int _isatty(int file)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
	return 1;
 80020ee:	2301      	movs	r3, #1
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
	return 0;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002120:	4a14      	ldr	r2, [pc, #80]	; (8002174 <_sbrk+0x5c>)
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <_sbrk+0x60>)
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800212c:	4b13      	ldr	r3, [pc, #76]	; (800217c <_sbrk+0x64>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d102      	bne.n	800213a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002134:	4b11      	ldr	r3, [pc, #68]	; (800217c <_sbrk+0x64>)
 8002136:	4a12      	ldr	r2, [pc, #72]	; (8002180 <_sbrk+0x68>)
 8002138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800213a:	4b10      	ldr	r3, [pc, #64]	; (800217c <_sbrk+0x64>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	429a      	cmp	r2, r3
 8002146:	d207      	bcs.n	8002158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002148:	f005 f9e6 	bl	8007518 <__errno>
 800214c:	4603      	mov	r3, r0
 800214e:	220c      	movs	r2, #12
 8002150:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002152:	f04f 33ff 	mov.w	r3, #4294967295
 8002156:	e009      	b.n	800216c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <_sbrk+0x64>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800215e:	4b07      	ldr	r3, [pc, #28]	; (800217c <_sbrk+0x64>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	4a05      	ldr	r2, [pc, #20]	; (800217c <_sbrk+0x64>)
 8002168:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800216a:	68fb      	ldr	r3, [r7, #12]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20050000 	.word	0x20050000
 8002178:	00000400 	.word	0x00000400
 800217c:	200008cc 	.word	0x200008cc
 8002180:	200008e8 	.word	0x200008e8

08002184 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <SystemInit+0x20>)
 800218a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218e:	4a05      	ldr	r2, [pc, #20]	; (80021a4 <SystemInit+0x20>)
 8002190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021ac:	480d      	ldr	r0, [pc, #52]	; (80021e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021ae:	490e      	ldr	r1, [pc, #56]	; (80021e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021b0:	4a0e      	ldr	r2, [pc, #56]	; (80021ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021b4:	e002      	b.n	80021bc <LoopCopyDataInit>

080021b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ba:	3304      	adds	r3, #4

080021bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021c0:	d3f9      	bcc.n	80021b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021c2:	4a0b      	ldr	r2, [pc, #44]	; (80021f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021c4:	4c0b      	ldr	r4, [pc, #44]	; (80021f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c8:	e001      	b.n	80021ce <LoopFillZerobss>

080021ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021cc:	3204      	adds	r2, #4

080021ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021d0:	d3fb      	bcc.n	80021ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021d2:	f7ff ffd7 	bl	8002184 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021d6:	f005 f9a5 	bl	8007524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021da:	f7ff f869 	bl	80012b0 <main>
  bx  lr    
 80021de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021e0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80021e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021e8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80021ec:	0800b1ac 	.word	0x0800b1ac
  ldr r2, =_sbss
 80021f0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80021f4:	200008e4 	.word	0x200008e4

080021f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021f8:	e7fe      	b.n	80021f8 <ADC_IRQHandler>

080021fa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021fe:	2003      	movs	r0, #3
 8002200:	f000 f94c 	bl	800249c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002204:	2000      	movs	r0, #0
 8002206:	f000 f805 	bl	8002214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800220a:	f7ff fcd1 	bl	8001bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800221c:	4b12      	ldr	r3, [pc, #72]	; (8002268 <HAL_InitTick+0x54>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_InitTick+0x58>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4619      	mov	r1, r3
 8002226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800222a:	fbb3 f3f1 	udiv	r3, r3, r1
 800222e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f967 	bl	8002506 <HAL_SYSTICK_Config>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e00e      	b.n	8002260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b0f      	cmp	r3, #15
 8002246:	d80a      	bhi.n	800225e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002248:	2200      	movs	r2, #0
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f000 f92f 	bl	80024b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002254:	4a06      	ldr	r2, [pc, #24]	; (8002270 <HAL_InitTick+0x5c>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	e000      	b.n	8002260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
}
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000008 	.word	0x20000008
 800226c:	20000010 	.word	0x20000010
 8002270:	2000000c 	.word	0x2000000c

08002274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_IncTick+0x20>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_IncTick+0x24>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4413      	add	r3, r2
 8002284:	4a04      	ldr	r2, [pc, #16]	; (8002298 <HAL_IncTick+0x24>)
 8002286:	6013      	str	r3, [r2, #0]
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	20000010 	.word	0x20000010
 8002298:	200008d0 	.word	0x200008d0

0800229c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return uwTick;
 80022a0:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <HAL_GetTick+0x14>)
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	200008d0 	.word	0x200008d0

080022b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022bc:	f7ff ffee 	bl	800229c <HAL_GetTick>
 80022c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022cc:	d005      	beq.n	80022da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <HAL_Delay+0x44>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4413      	add	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022da:	bf00      	nop
 80022dc:	f7ff ffde 	bl	800229c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d8f7      	bhi.n	80022dc <HAL_Delay+0x28>
  {
  }
}
 80022ec:	bf00      	nop
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000010 	.word	0x20000010

080022fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <__NVIC_SetPriorityGrouping+0x40>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002318:	4013      	ands	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 8002326:	4313      	orrs	r3, r2
 8002328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232a:	4a04      	ldr	r2, [pc, #16]	; (800233c <__NVIC_SetPriorityGrouping+0x40>)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	60d3      	str	r3, [r2, #12]
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000ed00 	.word	0xe000ed00
 8002340:	05fa0000 	.word	0x05fa0000

08002344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <__NVIC_GetPriorityGrouping+0x18>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	f003 0307 	and.w	r3, r3, #7
}
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	2b00      	cmp	r3, #0
 8002370:	db0b      	blt.n	800238a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	f003 021f 	and.w	r2, r3, #31
 8002378:	4907      	ldr	r1, [pc, #28]	; (8002398 <__NVIC_EnableIRQ+0x38>)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2001      	movs	r0, #1
 8002382:	fa00 f202 	lsl.w	r2, r0, r2
 8002386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000e100 	.word	0xe000e100

0800239c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	6039      	str	r1, [r7, #0]
 80023a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	db0a      	blt.n	80023c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	490c      	ldr	r1, [pc, #48]	; (80023e8 <__NVIC_SetPriority+0x4c>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	0112      	lsls	r2, r2, #4
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	440b      	add	r3, r1
 80023c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c4:	e00a      	b.n	80023dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	4908      	ldr	r1, [pc, #32]	; (80023ec <__NVIC_SetPriority+0x50>)
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	3b04      	subs	r3, #4
 80023d4:	0112      	lsls	r2, r2, #4
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	440b      	add	r3, r1
 80023da:	761a      	strb	r2, [r3, #24]
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000e100 	.word	0xe000e100
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b089      	sub	sp, #36	; 0x24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f1c3 0307 	rsb	r3, r3, #7
 800240a:	2b04      	cmp	r3, #4
 800240c:	bf28      	it	cs
 800240e:	2304      	movcs	r3, #4
 8002410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3304      	adds	r3, #4
 8002416:	2b06      	cmp	r3, #6
 8002418:	d902      	bls.n	8002420 <NVIC_EncodePriority+0x30>
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3b03      	subs	r3, #3
 800241e:	e000      	b.n	8002422 <NVIC_EncodePriority+0x32>
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	f04f 32ff 	mov.w	r2, #4294967295
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43da      	mvns	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	401a      	ands	r2, r3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002438:	f04f 31ff 	mov.w	r1, #4294967295
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	43d9      	mvns	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002448:	4313      	orrs	r3, r2
         );
}
 800244a:	4618      	mov	r0, r3
 800244c:	3724      	adds	r7, #36	; 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3b01      	subs	r3, #1
 8002464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002468:	d301      	bcc.n	800246e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800246a:	2301      	movs	r3, #1
 800246c:	e00f      	b.n	800248e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800246e:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <SysTick_Config+0x40>)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3b01      	subs	r3, #1
 8002474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002476:	210f      	movs	r1, #15
 8002478:	f04f 30ff 	mov.w	r0, #4294967295
 800247c:	f7ff ff8e 	bl	800239c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <SysTick_Config+0x40>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002486:	4b04      	ldr	r3, [pc, #16]	; (8002498 <SysTick_Config+0x40>)
 8002488:	2207      	movs	r2, #7
 800248a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	e000e010 	.word	0xe000e010

0800249c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ff29 	bl	80022fc <__NVIC_SetPriorityGrouping>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b086      	sub	sp, #24
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	4603      	mov	r3, r0
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024c4:	f7ff ff3e 	bl	8002344 <__NVIC_GetPriorityGrouping>
 80024c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	6978      	ldr	r0, [r7, #20]
 80024d0:	f7ff ff8e 	bl	80023f0 <NVIC_EncodePriority>
 80024d4:	4602      	mov	r2, r0
 80024d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024da:	4611      	mov	r1, r2
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ff5d 	bl	800239c <__NVIC_SetPriority>
}
 80024e2:	bf00      	nop
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	4603      	mov	r3, r0
 80024f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff31 	bl	8002360 <__NVIC_EnableIRQ>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff ffa2 	bl	8002458 <SysTick_Config>
 8002514:	4603      	mov	r3, r0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800252c:	f7ff feb6 	bl	800229c <HAL_GetTick>
 8002530:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d008      	beq.n	8002550 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2280      	movs	r2, #128	; 0x80
 8002542:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e052      	b.n	80025f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0216 	bic.w	r2, r2, #22
 800255e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695a      	ldr	r2, [r3, #20]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800256e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	2b00      	cmp	r3, #0
 8002576:	d103      	bne.n	8002580 <HAL_DMA_Abort+0x62>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0208 	bic.w	r2, r2, #8
 800258e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0201 	bic.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a0:	e013      	b.n	80025ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025a2:	f7ff fe7b 	bl	800229c <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b05      	cmp	r3, #5
 80025ae:	d90c      	bls.n	80025ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2220      	movs	r2, #32
 80025b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2203      	movs	r2, #3
 80025ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e015      	b.n	80025f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1e4      	bne.n	80025a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025dc:	223f      	movs	r2, #63	; 0x3f
 80025de:	409a      	lsls	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d004      	beq.n	800261c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2280      	movs	r2, #128	; 0x80
 8002616:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e00c      	b.n	8002636 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2205      	movs	r2, #5
 8002620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0201 	bic.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	; 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800265a:	2300      	movs	r3, #0
 800265c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
 8002662:	e175      	b.n	8002950 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002664:	2201      	movs	r2, #1
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	4013      	ands	r3, r2
 8002676:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	429a      	cmp	r2, r3
 800267e:	f040 8164 	bne.w	800294a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	2b01      	cmp	r3, #1
 800268c:	d005      	beq.n	800269a <HAL_GPIO_Init+0x56>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d130      	bne.n	80026fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	2203      	movs	r2, #3
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026d0:	2201      	movs	r2, #1
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	091b      	lsrs	r3, r3, #4
 80026e6:	f003 0201 	and.w	r2, r3, #1
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	2b03      	cmp	r3, #3
 8002706:	d017      	beq.n	8002738 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	2203      	movs	r2, #3
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 0303 	and.w	r3, r3, #3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d123      	bne.n	800278c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	08da      	lsrs	r2, r3, #3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3208      	adds	r2, #8
 800274c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	220f      	movs	r2, #15
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	08da      	lsrs	r2, r3, #3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3208      	adds	r2, #8
 8002786:	69b9      	ldr	r1, [r7, #24]
 8002788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	2203      	movs	r2, #3
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 0203 	and.w	r2, r3, #3
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 80be 	beq.w	800294a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ce:	4b66      	ldr	r3, [pc, #408]	; (8002968 <HAL_GPIO_Init+0x324>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	4a65      	ldr	r2, [pc, #404]	; (8002968 <HAL_GPIO_Init+0x324>)
 80027d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d8:	6453      	str	r3, [r2, #68]	; 0x44
 80027da:	4b63      	ldr	r3, [pc, #396]	; (8002968 <HAL_GPIO_Init+0x324>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80027e6:	4a61      	ldr	r2, [pc, #388]	; (800296c <HAL_GPIO_Init+0x328>)
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	089b      	lsrs	r3, r3, #2
 80027ec:	3302      	adds	r3, #2
 80027ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	220f      	movs	r2, #15
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a58      	ldr	r2, [pc, #352]	; (8002970 <HAL_GPIO_Init+0x32c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d037      	beq.n	8002882 <HAL_GPIO_Init+0x23e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a57      	ldr	r2, [pc, #348]	; (8002974 <HAL_GPIO_Init+0x330>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d031      	beq.n	800287e <HAL_GPIO_Init+0x23a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a56      	ldr	r2, [pc, #344]	; (8002978 <HAL_GPIO_Init+0x334>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d02b      	beq.n	800287a <HAL_GPIO_Init+0x236>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a55      	ldr	r2, [pc, #340]	; (800297c <HAL_GPIO_Init+0x338>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d025      	beq.n	8002876 <HAL_GPIO_Init+0x232>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a54      	ldr	r2, [pc, #336]	; (8002980 <HAL_GPIO_Init+0x33c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d01f      	beq.n	8002872 <HAL_GPIO_Init+0x22e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a53      	ldr	r2, [pc, #332]	; (8002984 <HAL_GPIO_Init+0x340>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d019      	beq.n	800286e <HAL_GPIO_Init+0x22a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a52      	ldr	r2, [pc, #328]	; (8002988 <HAL_GPIO_Init+0x344>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d013      	beq.n	800286a <HAL_GPIO_Init+0x226>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a51      	ldr	r2, [pc, #324]	; (800298c <HAL_GPIO_Init+0x348>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00d      	beq.n	8002866 <HAL_GPIO_Init+0x222>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a50      	ldr	r2, [pc, #320]	; (8002990 <HAL_GPIO_Init+0x34c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d007      	beq.n	8002862 <HAL_GPIO_Init+0x21e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a4f      	ldr	r2, [pc, #316]	; (8002994 <HAL_GPIO_Init+0x350>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d101      	bne.n	800285e <HAL_GPIO_Init+0x21a>
 800285a:	2309      	movs	r3, #9
 800285c:	e012      	b.n	8002884 <HAL_GPIO_Init+0x240>
 800285e:	230a      	movs	r3, #10
 8002860:	e010      	b.n	8002884 <HAL_GPIO_Init+0x240>
 8002862:	2308      	movs	r3, #8
 8002864:	e00e      	b.n	8002884 <HAL_GPIO_Init+0x240>
 8002866:	2307      	movs	r3, #7
 8002868:	e00c      	b.n	8002884 <HAL_GPIO_Init+0x240>
 800286a:	2306      	movs	r3, #6
 800286c:	e00a      	b.n	8002884 <HAL_GPIO_Init+0x240>
 800286e:	2305      	movs	r3, #5
 8002870:	e008      	b.n	8002884 <HAL_GPIO_Init+0x240>
 8002872:	2304      	movs	r3, #4
 8002874:	e006      	b.n	8002884 <HAL_GPIO_Init+0x240>
 8002876:	2303      	movs	r3, #3
 8002878:	e004      	b.n	8002884 <HAL_GPIO_Init+0x240>
 800287a:	2302      	movs	r3, #2
 800287c:	e002      	b.n	8002884 <HAL_GPIO_Init+0x240>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <HAL_GPIO_Init+0x240>
 8002882:	2300      	movs	r3, #0
 8002884:	69fa      	ldr	r2, [r7, #28]
 8002886:	f002 0203 	and.w	r2, r2, #3
 800288a:	0092      	lsls	r2, r2, #2
 800288c:	4093      	lsls	r3, r2
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002894:	4935      	ldr	r1, [pc, #212]	; (800296c <HAL_GPIO_Init+0x328>)
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	089b      	lsrs	r3, r3, #2
 800289a:	3302      	adds	r3, #2
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028a2:	4b3d      	ldr	r3, [pc, #244]	; (8002998 <HAL_GPIO_Init+0x354>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4013      	ands	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028c6:	4a34      	ldr	r2, [pc, #208]	; (8002998 <HAL_GPIO_Init+0x354>)
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028cc:	4b32      	ldr	r3, [pc, #200]	; (8002998 <HAL_GPIO_Init+0x354>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028f0:	4a29      	ldr	r2, [pc, #164]	; (8002998 <HAL_GPIO_Init+0x354>)
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028f6:	4b28      	ldr	r3, [pc, #160]	; (8002998 <HAL_GPIO_Init+0x354>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	43db      	mvns	r3, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4013      	ands	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800291a:	4a1f      	ldr	r2, [pc, #124]	; (8002998 <HAL_GPIO_Init+0x354>)
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002920:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <HAL_GPIO_Init+0x354>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002944:	4a14      	ldr	r2, [pc, #80]	; (8002998 <HAL_GPIO_Init+0x354>)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3301      	adds	r3, #1
 800294e:	61fb      	str	r3, [r7, #28]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	2b0f      	cmp	r3, #15
 8002954:	f67f ae86 	bls.w	8002664 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002958:	bf00      	nop
 800295a:	bf00      	nop
 800295c:	3724      	adds	r7, #36	; 0x24
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40023800 	.word	0x40023800
 800296c:	40013800 	.word	0x40013800
 8002970:	40020000 	.word	0x40020000
 8002974:	40020400 	.word	0x40020400
 8002978:	40020800 	.word	0x40020800
 800297c:	40020c00 	.word	0x40020c00
 8002980:	40021000 	.word	0x40021000
 8002984:	40021400 	.word	0x40021400
 8002988:	40021800 	.word	0x40021800
 800298c:	40021c00 	.word	0x40021c00
 8002990:	40022000 	.word	0x40022000
 8002994:	40022400 	.word	0x40022400
 8002998:	40013c00 	.word	0x40013c00

0800299c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	807b      	strh	r3, [r7, #2]
 80029a8:	4613      	mov	r3, r2
 80029aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029ac:	787b      	ldrb	r3, [r7, #1]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029b2:	887a      	ldrh	r2, [r7, #2]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80029b8:	e003      	b.n	80029c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80029ba:	887b      	ldrh	r3, [r7, #2]
 80029bc:	041a      	lsls	r2, r3, #16
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	619a      	str	r2, [r3, #24]
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029d0:	b08f      	sub	sp, #60	; 0x3c
 80029d2:	af0a      	add	r7, sp, #40	; 0x28
 80029d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e116      	b.n	8002c0e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d106      	bne.n	8002a00 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff fa3a 	bl	8001e74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2203      	movs	r2, #3
 8002a04:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d102      	bne.n	8002a1a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f004 fade 	bl	8006fe0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	603b      	str	r3, [r7, #0]
 8002a2a:	687e      	ldr	r6, [r7, #4]
 8002a2c:	466d      	mov	r5, sp
 8002a2e:	f106 0410 	add.w	r4, r6, #16
 8002a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a42:	1d33      	adds	r3, r6, #4
 8002a44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a46:	6838      	ldr	r0, [r7, #0]
 8002a48:	f004 fa72 	bl	8006f30 <USB_CoreInit>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d005      	beq.n	8002a5e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2202      	movs	r2, #2
 8002a56:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e0d7      	b.n	8002c0e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2100      	movs	r1, #0
 8002a64:	4618      	mov	r0, r3
 8002a66:	f004 facc 	bl	8007002 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	73fb      	strb	r3, [r7, #15]
 8002a6e:	e04a      	b.n	8002b06 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a70:	7bfa      	ldrb	r2, [r7, #15]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	333d      	adds	r3, #61	; 0x3d
 8002a80:	2201      	movs	r2, #1
 8002a82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a84:	7bfa      	ldrb	r2, [r7, #15]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	333c      	adds	r3, #60	; 0x3c
 8002a94:	7bfa      	ldrb	r2, [r7, #15]
 8002a96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a98:	7bfa      	ldrb	r2, [r7, #15]
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	b298      	uxth	r0, r3
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	3344      	adds	r3, #68	; 0x44
 8002aac:	4602      	mov	r2, r0
 8002aae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ab0:	7bfa      	ldrb	r2, [r7, #15]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	3340      	adds	r3, #64	; 0x40
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ac4:	7bfa      	ldrb	r2, [r7, #15]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	3348      	adds	r3, #72	; 0x48
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ad8:	7bfa      	ldrb	r2, [r7, #15]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	334c      	adds	r3, #76	; 0x4c
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002aec:	7bfa      	ldrb	r2, [r7, #15]
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	4413      	add	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	3354      	adds	r3, #84	; 0x54
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	3301      	adds	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
 8002b06:	7bfa      	ldrb	r2, [r7, #15]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d3af      	bcc.n	8002a70 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b10:	2300      	movs	r3, #0
 8002b12:	73fb      	strb	r3, [r7, #15]
 8002b14:	e044      	b.n	8002ba0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b16:	7bfa      	ldrb	r2, [r7, #15]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b2c:	7bfa      	ldrb	r2, [r7, #15]
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002b3e:	7bfa      	ldrb	r2, [r7, #15]
 8002b40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b42:	7bfa      	ldrb	r2, [r7, #15]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b54:	2200      	movs	r2, #0
 8002b56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b58:	7bfa      	ldrb	r2, [r7, #15]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b84:	7bfa      	ldrb	r2, [r7, #15]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d3b5      	bcc.n	8002b16 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	687e      	ldr	r6, [r7, #4]
 8002bb2:	466d      	mov	r5, sp
 8002bb4:	f106 0410 	add.w	r4, r6, #16
 8002bb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bc8:	1d33      	adds	r3, r6, #4
 8002bca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bcc:	6838      	ldr	r0, [r7, #0]
 8002bce:	f004 fa65 	bl	800709c <USB_DevInit>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e014      	b.n	8002c0e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d102      	bne.n	8002c02 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f80b 	bl	8002c18 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f004 fc23 	bl	8007452 <USB_DevDisconnect>

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002c18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_PCDEx_ActivateLPM+0x44>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	10000003 	.word	0x10000003

08002c60 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c64:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a04      	ldr	r2, [pc, #16]	; (8002c7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6e:	6013      	str	r3, [r2, #0]
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40007000 	.word	0x40007000

08002c80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e291      	b.n	80031ba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 8087 	beq.w	8002db2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ca4:	4b96      	ldr	r3, [pc, #600]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 030c 	and.w	r3, r3, #12
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d00c      	beq.n	8002cca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb0:	4b93      	ldr	r3, [pc, #588]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 030c 	and.w	r3, r3, #12
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d112      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x62>
 8002cbc:	4b90      	ldr	r3, [pc, #576]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cc8:	d10b      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cca:	4b8d      	ldr	r3, [pc, #564]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d06c      	beq.n	8002db0 <HAL_RCC_OscConfig+0x130>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d168      	bne.n	8002db0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e26b      	b.n	80031ba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cea:	d106      	bne.n	8002cfa <HAL_RCC_OscConfig+0x7a>
 8002cec:	4b84      	ldr	r3, [pc, #528]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a83      	ldr	r2, [pc, #524]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	e02e      	b.n	8002d58 <HAL_RCC_OscConfig+0xd8>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10c      	bne.n	8002d1c <HAL_RCC_OscConfig+0x9c>
 8002d02:	4b7f      	ldr	r3, [pc, #508]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a7e      	ldr	r2, [pc, #504]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	4b7c      	ldr	r3, [pc, #496]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a7b      	ldr	r2, [pc, #492]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002d14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e01d      	b.n	8002d58 <HAL_RCC_OscConfig+0xd8>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0xc0>
 8002d26:	4b76      	ldr	r3, [pc, #472]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a75      	ldr	r2, [pc, #468]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b73      	ldr	r3, [pc, #460]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a72      	ldr	r2, [pc, #456]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e00b      	b.n	8002d58 <HAL_RCC_OscConfig+0xd8>
 8002d40:	4b6f      	ldr	r3, [pc, #444]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a6e      	ldr	r2, [pc, #440]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	4b6c      	ldr	r3, [pc, #432]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a6b      	ldr	r2, [pc, #428]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d013      	beq.n	8002d88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d60:	f7ff fa9c 	bl	800229c <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d68:	f7ff fa98 	bl	800229c <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	; 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e21f      	b.n	80031ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	4b61      	ldr	r3, [pc, #388]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0xe8>
 8002d86:	e014      	b.n	8002db2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7ff fa88 	bl	800229c <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d90:	f7ff fa84 	bl	800229c <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	; 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e20b      	b.n	80031ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da2:	4b57      	ldr	r3, [pc, #348]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x110>
 8002dae:	e000      	b.n	8002db2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d069      	beq.n	8002e92 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dbe:	4b50      	ldr	r3, [pc, #320]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00b      	beq.n	8002de2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dca:	4b4d      	ldr	r3, [pc, #308]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d11c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x190>
 8002dd6:	4b4a      	ldr	r3, [pc, #296]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d116      	bne.n	8002e10 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de2:	4b47      	ldr	r3, [pc, #284]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <HAL_RCC_OscConfig+0x17a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d001      	beq.n	8002dfa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e1df      	b.n	80031ba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfa:	4b41      	ldr	r3, [pc, #260]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	493d      	ldr	r1, [pc, #244]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0e:	e040      	b.n	8002e92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d023      	beq.n	8002e60 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e18:	4b39      	ldr	r3, [pc, #228]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a38      	ldr	r2, [pc, #224]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7ff fa3a 	bl	800229c <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e2c:	f7ff fa36 	bl	800229c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e1bd      	b.n	80031ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3e:	4b30      	ldr	r3, [pc, #192]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4a:	4b2d      	ldr	r3, [pc, #180]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4929      	ldr	r1, [pc, #164]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	600b      	str	r3, [r1, #0]
 8002e5e:	e018      	b.n	8002e92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e60:	4b27      	ldr	r3, [pc, #156]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a26      	ldr	r2, [pc, #152]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002e66:	f023 0301 	bic.w	r3, r3, #1
 8002e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6c:	f7ff fa16 	bl	800229c <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e74:	f7ff fa12 	bl	800229c <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e199      	b.n	80031ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e86:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f0      	bne.n	8002e74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d038      	beq.n	8002f10 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d019      	beq.n	8002eda <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ea6:	4b16      	ldr	r3, [pc, #88]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eaa:	4a15      	ldr	r2, [pc, #84]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb2:	f7ff f9f3 	bl	800229c <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eba:	f7ff f9ef 	bl	800229c <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e176      	b.n	80031ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f0      	beq.n	8002eba <HAL_RCC_OscConfig+0x23a>
 8002ed8:	e01a      	b.n	8002f10 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eda:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ede:	4a08      	ldr	r2, [pc, #32]	; (8002f00 <HAL_RCC_OscConfig+0x280>)
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee6:	f7ff f9d9 	bl	800229c <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eec:	e00a      	b.n	8002f04 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eee:	f7ff f9d5 	bl	800229c <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d903      	bls.n	8002f04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e15c      	b.n	80031ba <HAL_RCC_OscConfig+0x53a>
 8002f00:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f04:	4b91      	ldr	r3, [pc, #580]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 8002f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1ee      	bne.n	8002eee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80a4 	beq.w	8003066 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f1e:	4b8b      	ldr	r3, [pc, #556]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10d      	bne.n	8002f46 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f2a:	4b88      	ldr	r3, [pc, #544]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	4a87      	ldr	r2, [pc, #540]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 8002f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f34:	6413      	str	r3, [r2, #64]	; 0x40
 8002f36:	4b85      	ldr	r3, [pc, #532]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f42:	2301      	movs	r3, #1
 8002f44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f46:	4b82      	ldr	r3, [pc, #520]	; (8003150 <HAL_RCC_OscConfig+0x4d0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d118      	bne.n	8002f84 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f52:	4b7f      	ldr	r3, [pc, #508]	; (8003150 <HAL_RCC_OscConfig+0x4d0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a7e      	ldr	r2, [pc, #504]	; (8003150 <HAL_RCC_OscConfig+0x4d0>)
 8002f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5e:	f7ff f99d 	bl	800229c <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f66:	f7ff f999 	bl	800229c <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b64      	cmp	r3, #100	; 0x64
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e120      	b.n	80031ba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f78:	4b75      	ldr	r3, [pc, #468]	; (8003150 <HAL_RCC_OscConfig+0x4d0>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d106      	bne.n	8002f9a <HAL_RCC_OscConfig+0x31a>
 8002f8c:	4b6f      	ldr	r3, [pc, #444]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	4a6e      	ldr	r2, [pc, #440]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	6713      	str	r3, [r2, #112]	; 0x70
 8002f98:	e02d      	b.n	8002ff6 <HAL_RCC_OscConfig+0x376>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0x33c>
 8002fa2:	4b6a      	ldr	r3, [pc, #424]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa6:	4a69      	ldr	r2, [pc, #420]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 8002fa8:	f023 0301 	bic.w	r3, r3, #1
 8002fac:	6713      	str	r3, [r2, #112]	; 0x70
 8002fae:	4b67      	ldr	r3, [pc, #412]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb2:	4a66      	ldr	r2, [pc, #408]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 8002fb4:	f023 0304 	bic.w	r3, r3, #4
 8002fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fba:	e01c      	b.n	8002ff6 <HAL_RCC_OscConfig+0x376>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b05      	cmp	r3, #5
 8002fc2:	d10c      	bne.n	8002fde <HAL_RCC_OscConfig+0x35e>
 8002fc4:	4b61      	ldr	r3, [pc, #388]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc8:	4a60      	ldr	r2, [pc, #384]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 8002fca:	f043 0304 	orr.w	r3, r3, #4
 8002fce:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd0:	4b5e      	ldr	r3, [pc, #376]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 8002fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd4:	4a5d      	ldr	r2, [pc, #372]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	6713      	str	r3, [r2, #112]	; 0x70
 8002fdc:	e00b      	b.n	8002ff6 <HAL_RCC_OscConfig+0x376>
 8002fde:	4b5b      	ldr	r3, [pc, #364]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe2:	4a5a      	ldr	r2, [pc, #360]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 8002fe4:	f023 0301 	bic.w	r3, r3, #1
 8002fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fea:	4b58      	ldr	r3, [pc, #352]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 8002fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fee:	4a57      	ldr	r2, [pc, #348]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 8002ff0:	f023 0304 	bic.w	r3, r3, #4
 8002ff4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d015      	beq.n	800302a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffe:	f7ff f94d 	bl	800229c <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003004:	e00a      	b.n	800301c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003006:	f7ff f949 	bl	800229c <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	f241 3288 	movw	r2, #5000	; 0x1388
 8003014:	4293      	cmp	r3, r2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e0ce      	b.n	80031ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301c:	4b4b      	ldr	r3, [pc, #300]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 800301e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0ee      	beq.n	8003006 <HAL_RCC_OscConfig+0x386>
 8003028:	e014      	b.n	8003054 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302a:	f7ff f937 	bl	800229c <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003030:	e00a      	b.n	8003048 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003032:	f7ff f933 	bl	800229c <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003040:	4293      	cmp	r3, r2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e0b8      	b.n	80031ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003048:	4b40      	ldr	r3, [pc, #256]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 800304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1ee      	bne.n	8003032 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003054:	7dfb      	ldrb	r3, [r7, #23]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d105      	bne.n	8003066 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800305a:	4b3c      	ldr	r3, [pc, #240]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	4a3b      	ldr	r2, [pc, #236]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 8003060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003064:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 80a4 	beq.w	80031b8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003070:	4b36      	ldr	r3, [pc, #216]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 030c 	and.w	r3, r3, #12
 8003078:	2b08      	cmp	r3, #8
 800307a:	d06b      	beq.n	8003154 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	2b02      	cmp	r3, #2
 8003082:	d149      	bne.n	8003118 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003084:	4b31      	ldr	r3, [pc, #196]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a30      	ldr	r2, [pc, #192]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 800308a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800308e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003090:	f7ff f904 	bl	800229c <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003098:	f7ff f900 	bl	800229c <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e087      	b.n	80031ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030aa:	4b28      	ldr	r3, [pc, #160]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f0      	bne.n	8003098 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69da      	ldr	r2, [r3, #28]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	019b      	lsls	r3, r3, #6
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	085b      	lsrs	r3, r3, #1
 80030ce:	3b01      	subs	r3, #1
 80030d0:	041b      	lsls	r3, r3, #16
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	061b      	lsls	r3, r3, #24
 80030da:	4313      	orrs	r3, r2
 80030dc:	4a1b      	ldr	r2, [pc, #108]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 80030de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80030e2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e4:	4b19      	ldr	r3, [pc, #100]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a18      	ldr	r2, [pc, #96]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 80030ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7ff f8d4 	bl	800229c <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f8:	f7ff f8d0 	bl	800229c <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e057      	b.n	80031ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800310a:	4b10      	ldr	r3, [pc, #64]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0x478>
 8003116:	e04f      	b.n	80031b8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003118:	4b0c      	ldr	r3, [pc, #48]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a0b      	ldr	r2, [pc, #44]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 800311e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7ff f8ba 	bl	800229c <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800312c:	f7ff f8b6 	bl	800229c <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e03d      	b.n	80031ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313e:	4b03      	ldr	r3, [pc, #12]	; (800314c <HAL_RCC_OscConfig+0x4cc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0x4ac>
 800314a:	e035      	b.n	80031b8 <HAL_RCC_OscConfig+0x538>
 800314c:	40023800 	.word	0x40023800
 8003150:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003154:	4b1b      	ldr	r3, [pc, #108]	; (80031c4 <HAL_RCC_OscConfig+0x544>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d028      	beq.n	80031b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800316c:	429a      	cmp	r2, r3
 800316e:	d121      	bne.n	80031b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317a:	429a      	cmp	r2, r3
 800317c:	d11a      	bne.n	80031b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003184:	4013      	ands	r3, r2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800318a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800318c:	4293      	cmp	r3, r2
 800318e:	d111      	bne.n	80031b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	085b      	lsrs	r3, r3, #1
 800319c:	3b01      	subs	r3, #1
 800319e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d107      	bne.n	80031b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800

080031c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0d0      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031e0:	4b6a      	ldr	r3, [pc, #424]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 030f 	and.w	r3, r3, #15
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d910      	bls.n	8003210 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ee:	4b67      	ldr	r3, [pc, #412]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 020f 	bic.w	r2, r3, #15
 80031f6:	4965      	ldr	r1, [pc, #404]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fe:	4b63      	ldr	r3, [pc, #396]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d001      	beq.n	8003210 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0b8      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d020      	beq.n	800325e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003228:	4b59      	ldr	r3, [pc, #356]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	4a58      	ldr	r2, [pc, #352]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 800322e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003232:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003240:	4b53      	ldr	r3, [pc, #332]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	4a52      	ldr	r2, [pc, #328]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 8003246:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800324a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800324c:	4b50      	ldr	r3, [pc, #320]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	494d      	ldr	r1, [pc, #308]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 800325a:	4313      	orrs	r3, r2
 800325c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d040      	beq.n	80032ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d107      	bne.n	8003282 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	4b47      	ldr	r3, [pc, #284]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d115      	bne.n	80032aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e07f      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d107      	bne.n	800329a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328a:	4b41      	ldr	r3, [pc, #260]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d109      	bne.n	80032aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e073      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329a:	4b3d      	ldr	r3, [pc, #244]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e06b      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032aa:	4b39      	ldr	r3, [pc, #228]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f023 0203 	bic.w	r2, r3, #3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	4936      	ldr	r1, [pc, #216]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032bc:	f7fe ffee 	bl	800229c <HAL_GetTick>
 80032c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c2:	e00a      	b.n	80032da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c4:	f7fe ffea 	bl	800229c <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e053      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032da:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 020c 	and.w	r2, r3, #12
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d1eb      	bne.n	80032c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032ec:	4b27      	ldr	r3, [pc, #156]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 030f 	and.w	r3, r3, #15
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d210      	bcs.n	800331c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fa:	4b24      	ldr	r3, [pc, #144]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 020f 	bic.w	r2, r3, #15
 8003302:	4922      	ldr	r1, [pc, #136]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	4313      	orrs	r3, r2
 8003308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800330a:	4b20      	ldr	r3, [pc, #128]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d001      	beq.n	800331c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e032      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003328:	4b19      	ldr	r3, [pc, #100]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4916      	ldr	r1, [pc, #88]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 8003336:	4313      	orrs	r3, r2
 8003338:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d009      	beq.n	800335a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003346:	4b12      	ldr	r3, [pc, #72]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	490e      	ldr	r1, [pc, #56]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800335a:	f000 f821 	bl	80033a0 <HAL_RCC_GetSysClockFreq>
 800335e:	4602      	mov	r2, r0
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	091b      	lsrs	r3, r3, #4
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	490a      	ldr	r1, [pc, #40]	; (8003394 <HAL_RCC_ClockConfig+0x1cc>)
 800336c:	5ccb      	ldrb	r3, [r1, r3]
 800336e:	fa22 f303 	lsr.w	r3, r2, r3
 8003372:	4a09      	ldr	r2, [pc, #36]	; (8003398 <HAL_RCC_ClockConfig+0x1d0>)
 8003374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003376:	4b09      	ldr	r3, [pc, #36]	; (800339c <HAL_RCC_ClockConfig+0x1d4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe ff4a 	bl	8002214 <HAL_InitTick>

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40023c00 	.word	0x40023c00
 8003390:	40023800 	.word	0x40023800
 8003394:	0800ad88 	.word	0x0800ad88
 8003398:	20000008 	.word	0x20000008
 800339c:	2000000c 	.word	0x2000000c

080033a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a4:	b094      	sub	sp, #80	; 0x50
 80033a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80033a8:	2300      	movs	r3, #0
 80033aa:	647b      	str	r3, [r7, #68]	; 0x44
 80033ac:	2300      	movs	r3, #0
 80033ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033b0:	2300      	movs	r3, #0
 80033b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033b8:	4b79      	ldr	r3, [pc, #484]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 030c 	and.w	r3, r3, #12
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d00d      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0x40>
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	f200 80e1 	bhi.w	800358c <HAL_RCC_GetSysClockFreq+0x1ec>
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <HAL_RCC_GetSysClockFreq+0x34>
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d003      	beq.n	80033da <HAL_RCC_GetSysClockFreq+0x3a>
 80033d2:	e0db      	b.n	800358c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033d4:	4b73      	ldr	r3, [pc, #460]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80033d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033d8:	e0db      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033da:	4b73      	ldr	r3, [pc, #460]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80033dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033de:	e0d8      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033e0:	4b6f      	ldr	r3, [pc, #444]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033e8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80033ea:	4b6d      	ldr	r3, [pc, #436]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d063      	beq.n	80034be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f6:	4b6a      	ldr	r3, [pc, #424]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	099b      	lsrs	r3, r3, #6
 80033fc:	2200      	movs	r2, #0
 80033fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003400:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003408:	633b      	str	r3, [r7, #48]	; 0x30
 800340a:	2300      	movs	r3, #0
 800340c:	637b      	str	r3, [r7, #52]	; 0x34
 800340e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003412:	4622      	mov	r2, r4
 8003414:	462b      	mov	r3, r5
 8003416:	f04f 0000 	mov.w	r0, #0
 800341a:	f04f 0100 	mov.w	r1, #0
 800341e:	0159      	lsls	r1, r3, #5
 8003420:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003424:	0150      	lsls	r0, r2, #5
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	4621      	mov	r1, r4
 800342c:	1a51      	subs	r1, r2, r1
 800342e:	6139      	str	r1, [r7, #16]
 8003430:	4629      	mov	r1, r5
 8003432:	eb63 0301 	sbc.w	r3, r3, r1
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003444:	4659      	mov	r1, fp
 8003446:	018b      	lsls	r3, r1, #6
 8003448:	4651      	mov	r1, sl
 800344a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800344e:	4651      	mov	r1, sl
 8003450:	018a      	lsls	r2, r1, #6
 8003452:	4651      	mov	r1, sl
 8003454:	ebb2 0801 	subs.w	r8, r2, r1
 8003458:	4659      	mov	r1, fp
 800345a:	eb63 0901 	sbc.w	r9, r3, r1
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800346a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800346e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003472:	4690      	mov	r8, r2
 8003474:	4699      	mov	r9, r3
 8003476:	4623      	mov	r3, r4
 8003478:	eb18 0303 	adds.w	r3, r8, r3
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	462b      	mov	r3, r5
 8003480:	eb49 0303 	adc.w	r3, r9, r3
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003492:	4629      	mov	r1, r5
 8003494:	024b      	lsls	r3, r1, #9
 8003496:	4621      	mov	r1, r4
 8003498:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800349c:	4621      	mov	r1, r4
 800349e:	024a      	lsls	r2, r1, #9
 80034a0:	4610      	mov	r0, r2
 80034a2:	4619      	mov	r1, r3
 80034a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034a6:	2200      	movs	r2, #0
 80034a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034b0:	f7fd fb9a 	bl	8000be8 <__aeabi_uldivmod>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4613      	mov	r3, r2
 80034ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034bc:	e058      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034be:	4b38      	ldr	r3, [pc, #224]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	099b      	lsrs	r3, r3, #6
 80034c4:	2200      	movs	r2, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	4611      	mov	r1, r2
 80034ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034ce:	623b      	str	r3, [r7, #32]
 80034d0:	2300      	movs	r3, #0
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
 80034d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034d8:	4642      	mov	r2, r8
 80034da:	464b      	mov	r3, r9
 80034dc:	f04f 0000 	mov.w	r0, #0
 80034e0:	f04f 0100 	mov.w	r1, #0
 80034e4:	0159      	lsls	r1, r3, #5
 80034e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ea:	0150      	lsls	r0, r2, #5
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4641      	mov	r1, r8
 80034f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80034f6:	4649      	mov	r1, r9
 80034f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003508:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800350c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003510:	ebb2 040a 	subs.w	r4, r2, sl
 8003514:	eb63 050b 	sbc.w	r5, r3, fp
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	f04f 0300 	mov.w	r3, #0
 8003520:	00eb      	lsls	r3, r5, #3
 8003522:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003526:	00e2      	lsls	r2, r4, #3
 8003528:	4614      	mov	r4, r2
 800352a:	461d      	mov	r5, r3
 800352c:	4643      	mov	r3, r8
 800352e:	18e3      	adds	r3, r4, r3
 8003530:	603b      	str	r3, [r7, #0]
 8003532:	464b      	mov	r3, r9
 8003534:	eb45 0303 	adc.w	r3, r5, r3
 8003538:	607b      	str	r3, [r7, #4]
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003546:	4629      	mov	r1, r5
 8003548:	028b      	lsls	r3, r1, #10
 800354a:	4621      	mov	r1, r4
 800354c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003550:	4621      	mov	r1, r4
 8003552:	028a      	lsls	r2, r1, #10
 8003554:	4610      	mov	r0, r2
 8003556:	4619      	mov	r1, r3
 8003558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800355a:	2200      	movs	r2, #0
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	61fa      	str	r2, [r7, #28]
 8003560:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003564:	f7fd fb40 	bl	8000be8 <__aeabi_uldivmod>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4613      	mov	r3, r2
 800356e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003570:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	0c1b      	lsrs	r3, r3, #16
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	3301      	adds	r3, #1
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003580:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003584:	fbb2 f3f3 	udiv	r3, r2, r3
 8003588:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800358a:	e002      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800358c:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800358e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003590:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003594:	4618      	mov	r0, r3
 8003596:	3750      	adds	r7, #80	; 0x50
 8003598:	46bd      	mov	sp, r7
 800359a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800
 80035a4:	00f42400 	.word	0x00f42400
 80035a8:	007a1200 	.word	0x007a1200

080035ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035b0:	4b03      	ldr	r3, [pc, #12]	; (80035c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035b2:	681b      	ldr	r3, [r3, #0]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	20000008 	.word	0x20000008

080035c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035c8:	f7ff fff0 	bl	80035ac <HAL_RCC_GetHCLKFreq>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	0a9b      	lsrs	r3, r3, #10
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	4903      	ldr	r1, [pc, #12]	; (80035e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40023800 	.word	0x40023800
 80035e8:	0800ad98 	.word	0x0800ad98

080035ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035f0:	f7ff ffdc 	bl	80035ac <HAL_RCC_GetHCLKFreq>
 80035f4:	4602      	mov	r2, r0
 80035f6:	4b05      	ldr	r3, [pc, #20]	; (800360c <HAL_RCC_GetPCLK2Freq+0x20>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	0b5b      	lsrs	r3, r3, #13
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	4903      	ldr	r1, [pc, #12]	; (8003610 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003602:	5ccb      	ldrb	r3, [r1, r3]
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003608:	4618      	mov	r0, r3
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40023800 	.word	0x40023800
 8003610:	0800ad98 	.word	0x0800ad98

08003614 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003620:	2300      	movs	r3, #0
 8003622:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003624:	2300      	movs	r3, #0
 8003626:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003628:	2300      	movs	r3, #0
 800362a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800362c:	2300      	movs	r3, #0
 800362e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d012      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800363c:	4b69      	ldr	r3, [pc, #420]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	4a68      	ldr	r2, [pc, #416]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003642:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003646:	6093      	str	r3, [r2, #8]
 8003648:	4b66      	ldr	r3, [pc, #408]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003650:	4964      	ldr	r1, [pc, #400]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800365e:	2301      	movs	r3, #1
 8003660:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d017      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800366e:	4b5d      	ldr	r3, [pc, #372]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003674:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367c:	4959      	ldr	r1, [pc, #356]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800368c:	d101      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800368e:	2301      	movs	r3, #1
 8003690:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800369a:	2301      	movs	r3, #1
 800369c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d017      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036aa:	4b4e      	ldr	r3, [pc, #312]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	494a      	ldr	r1, [pc, #296]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036c8:	d101      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80036ca:	2301      	movs	r3, #1
 80036cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80036d6:	2301      	movs	r3, #1
 80036d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80036e6:	2301      	movs	r3, #1
 80036e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 808b 	beq.w	800380e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036f8:	4b3a      	ldr	r3, [pc, #232]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	4a39      	ldr	r2, [pc, #228]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003702:	6413      	str	r3, [r2, #64]	; 0x40
 8003704:	4b37      	ldr	r3, [pc, #220]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003710:	4b35      	ldr	r3, [pc, #212]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a34      	ldr	r2, [pc, #208]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800371c:	f7fe fdbe 	bl	800229c <HAL_GetTick>
 8003720:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003724:	f7fe fdba 	bl	800229c <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b64      	cmp	r3, #100	; 0x64
 8003730:	d901      	bls.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e357      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003736:	4b2c      	ldr	r3, [pc, #176]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003742:	4b28      	ldr	r3, [pc, #160]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d035      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	429a      	cmp	r2, r3
 800375e:	d02e      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003760:	4b20      	ldr	r3, [pc, #128]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003768:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800376a:	4b1e      	ldr	r3, [pc, #120]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376e:	4a1d      	ldr	r2, [pc, #116]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003774:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003776:	4b1b      	ldr	r3, [pc, #108]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377a:	4a1a      	ldr	r2, [pc, #104]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800377c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003780:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003782:	4a18      	ldr	r2, [pc, #96]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003788:	4b16      	ldr	r3, [pc, #88]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800378a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b01      	cmp	r3, #1
 8003792:	d114      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003794:	f7fe fd82 	bl	800229c <HAL_GetTick>
 8003798:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379a:	e00a      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800379c:	f7fe fd7e 	bl	800229c <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e319      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b2:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0ee      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ca:	d111      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037d8:	4b04      	ldr	r3, [pc, #16]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037da:	400b      	ands	r3, r1
 80037dc:	4901      	ldr	r1, [pc, #4]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	608b      	str	r3, [r1, #8]
 80037e2:	e00b      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40007000 	.word	0x40007000
 80037ec:	0ffffcff 	.word	0x0ffffcff
 80037f0:	4baa      	ldr	r3, [pc, #680]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	4aa9      	ldr	r2, [pc, #676]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80037fa:	6093      	str	r3, [r2, #8]
 80037fc:	4ba7      	ldr	r3, [pc, #668]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003808:	49a4      	ldr	r1, [pc, #656]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800380a:	4313      	orrs	r3, r2
 800380c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0310 	and.w	r3, r3, #16
 8003816:	2b00      	cmp	r3, #0
 8003818:	d010      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800381a:	4ba0      	ldr	r3, [pc, #640]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800381c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003820:	4a9e      	ldr	r2, [pc, #632]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003822:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003826:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800382a:	4b9c      	ldr	r3, [pc, #624]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800382c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	4999      	ldr	r1, [pc, #612]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003848:	4b94      	ldr	r3, [pc, #592]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003856:	4991      	ldr	r1, [pc, #580]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800386a:	4b8c      	ldr	r3, [pc, #560]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800386c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003870:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003878:	4988      	ldr	r1, [pc, #544]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800388c:	4b83      	ldr	r3, [pc, #524]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800388e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003892:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800389a:	4980      	ldr	r1, [pc, #512]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038ae:	4b7b      	ldr	r3, [pc, #492]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038bc:	4977      	ldr	r1, [pc, #476]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038d0:	4b72      	ldr	r3, [pc, #456]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d6:	f023 0203 	bic.w	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038de:	496f      	ldr	r1, [pc, #444]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038f2:	4b6a      	ldr	r3, [pc, #424]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f8:	f023 020c 	bic.w	r2, r3, #12
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003900:	4966      	ldr	r1, [pc, #408]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003914:	4b61      	ldr	r3, [pc, #388]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003922:	495e      	ldr	r1, [pc, #376]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003924:	4313      	orrs	r3, r2
 8003926:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003936:	4b59      	ldr	r3, [pc, #356]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003944:	4955      	ldr	r1, [pc, #340]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003958:	4b50      	ldr	r3, [pc, #320]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800395a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	494d      	ldr	r1, [pc, #308]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800397a:	4b48      	ldr	r3, [pc, #288]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800397c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003980:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003988:	4944      	ldr	r1, [pc, #272]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800399c:	4b3f      	ldr	r3, [pc, #252]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800399e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039aa:	493c      	ldr	r1, [pc, #240]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80039be:	4b37      	ldr	r3, [pc, #220]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039cc:	4933      	ldr	r1, [pc, #204]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039e0:	4b2e      	ldr	r3, [pc, #184]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ee:	492b      	ldr	r1, [pc, #172]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d011      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a02:	4b26      	ldr	r3, [pc, #152]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a08:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a10:	4922      	ldr	r1, [pc, #136]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a20:	d101      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a22:	2301      	movs	r3, #1
 8003a24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a32:	2301      	movs	r3, #1
 8003a34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a42:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a48:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a50:	4912      	ldr	r1, [pc, #72]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00b      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a64:	4b0d      	ldr	r3, [pc, #52]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a74:	4909      	ldr	r1, [pc, #36]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d006      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80d9 	beq.w	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a90:	4b02      	ldr	r3, [pc, #8]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a01      	ldr	r2, [pc, #4]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a9a:	e001      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aa2:	f7fe fbfb 	bl	800229c <HAL_GetTick>
 8003aa6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003aa8:	e008      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003aaa:	f7fe fbf7 	bl	800229c <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b64      	cmp	r3, #100	; 0x64
 8003ab6:	d901      	bls.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e194      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003abc:	4b6c      	ldr	r3, [pc, #432]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1f0      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d021      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d11d      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003adc:	4b64      	ldr	r3, [pc, #400]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae2:	0c1b      	lsrs	r3, r3, #16
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003aea:	4b61      	ldr	r3, [pc, #388]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af0:	0e1b      	lsrs	r3, r3, #24
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	019a      	lsls	r2, r3, #6
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	041b      	lsls	r3, r3, #16
 8003b02:	431a      	orrs	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	061b      	lsls	r3, r3, #24
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	071b      	lsls	r3, r3, #28
 8003b10:	4957      	ldr	r1, [pc, #348]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d004      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b2c:	d00a      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d02e      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b42:	d129      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b44:	4b4a      	ldr	r3, [pc, #296]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b4a:	0c1b      	lsrs	r3, r3, #16
 8003b4c:	f003 0303 	and.w	r3, r3, #3
 8003b50:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b52:	4b47      	ldr	r3, [pc, #284]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b58:	0f1b      	lsrs	r3, r3, #28
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	019a      	lsls	r2, r3, #6
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	041b      	lsls	r3, r3, #16
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	061b      	lsls	r3, r3, #24
 8003b72:	431a      	orrs	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	071b      	lsls	r3, r3, #28
 8003b78:	493d      	ldr	r1, [pc, #244]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b80:	4b3b      	ldr	r3, [pc, #236]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b86:	f023 021f 	bic.w	r2, r3, #31
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	4937      	ldr	r1, [pc, #220]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01d      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ba4:	4b32      	ldr	r3, [pc, #200]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003baa:	0e1b      	lsrs	r3, r3, #24
 8003bac:	f003 030f 	and.w	r3, r3, #15
 8003bb0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bb2:	4b2f      	ldr	r3, [pc, #188]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb8:	0f1b      	lsrs	r3, r3, #28
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	019a      	lsls	r2, r3, #6
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	041b      	lsls	r3, r3, #16
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	061b      	lsls	r3, r3, #24
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	071b      	lsls	r3, r3, #28
 8003bd8:	4925      	ldr	r1, [pc, #148]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d011      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	019a      	lsls	r2, r3, #6
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	041b      	lsls	r3, r3, #16
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	061b      	lsls	r3, r3, #24
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	071b      	lsls	r3, r3, #28
 8003c08:	4919      	ldr	r1, [pc, #100]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c10:	4b17      	ldr	r3, [pc, #92]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a16      	ldr	r2, [pc, #88]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c1c:	f7fe fb3e 	bl	800229c <HAL_GetTick>
 8003c20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c24:	f7fe fb3a 	bl	800229c <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b64      	cmp	r3, #100	; 0x64
 8003c30:	d901      	bls.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e0d7      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c36:	4b0e      	ldr	r3, [pc, #56]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0f0      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	f040 80cd 	bne.w	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c4a:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a08      	ldr	r2, [pc, #32]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c56:	f7fe fb21 	bl	800229c <HAL_GetTick>
 8003c5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c5c:	e00a      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c5e:	f7fe fb1d 	bl	800229c <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b64      	cmp	r3, #100	; 0x64
 8003c6a:	d903      	bls.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e0ba      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003c70:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c74:	4b5e      	ldr	r3, [pc, #376]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c80:	d0ed      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d009      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d02e      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d12a      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003caa:	4b51      	ldr	r3, [pc, #324]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb0:	0c1b      	lsrs	r3, r3, #16
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cb8:	4b4d      	ldr	r3, [pc, #308]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbe:	0f1b      	lsrs	r3, r3, #28
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	019a      	lsls	r2, r3, #6
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	041b      	lsls	r3, r3, #16
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	061b      	lsls	r3, r3, #24
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	071b      	lsls	r3, r3, #28
 8003cde:	4944      	ldr	r1, [pc, #272]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ce6:	4b42      	ldr	r3, [pc, #264]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	021b      	lsls	r3, r3, #8
 8003cf8:	493d      	ldr	r1, [pc, #244]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d022      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d14:	d11d      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d16:	4b36      	ldr	r3, [pc, #216]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1c:	0e1b      	lsrs	r3, r3, #24
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d24:	4b32      	ldr	r3, [pc, #200]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2a:	0f1b      	lsrs	r3, r3, #28
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	019a      	lsls	r2, r3, #6
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	041b      	lsls	r3, r3, #16
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	061b      	lsls	r3, r3, #24
 8003d44:	431a      	orrs	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	071b      	lsls	r3, r3, #28
 8003d4a:	4929      	ldr	r1, [pc, #164]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d028      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d5e:	4b24      	ldr	r3, [pc, #144]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d64:	0e1b      	lsrs	r3, r3, #24
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d6c:	4b20      	ldr	r3, [pc, #128]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d72:	0c1b      	lsrs	r3, r3, #16
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	019a      	lsls	r2, r3, #6
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	041b      	lsls	r3, r3, #16
 8003d84:	431a      	orrs	r2, r3
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	061b      	lsls	r3, r3, #24
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	071b      	lsls	r3, r3, #28
 8003d92:	4917      	ldr	r1, [pc, #92]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d9a:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003da0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	4911      	ldr	r1, [pc, #68]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003db0:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a0e      	ldr	r2, [pc, #56]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dbc:	f7fe fa6e 	bl	800229c <HAL_GetTick>
 8003dc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003dc4:	f7fe fa6a 	bl	800229c <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b64      	cmp	r3, #100	; 0x64
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e007      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003dd6:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003de2:	d1ef      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3720      	adds	r7, #32
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40023800 	.word	0x40023800

08003df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e049      	b.n	8003e9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7fd feec 	bl	8001bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	4619      	mov	r1, r3
 8003e32:	4610      	mov	r0, r2
 8003e34:	f000 ff76 	bl	8004d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d001      	beq.n	8003ebc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e054      	b.n	8003f66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a26      	ldr	r2, [pc, #152]	; (8003f74 <HAL_TIM_Base_Start_IT+0xd0>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d022      	beq.n	8003f24 <HAL_TIM_Base_Start_IT+0x80>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee6:	d01d      	beq.n	8003f24 <HAL_TIM_Base_Start_IT+0x80>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a22      	ldr	r2, [pc, #136]	; (8003f78 <HAL_TIM_Base_Start_IT+0xd4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d018      	beq.n	8003f24 <HAL_TIM_Base_Start_IT+0x80>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a21      	ldr	r2, [pc, #132]	; (8003f7c <HAL_TIM_Base_Start_IT+0xd8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d013      	beq.n	8003f24 <HAL_TIM_Base_Start_IT+0x80>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a1f      	ldr	r2, [pc, #124]	; (8003f80 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00e      	beq.n	8003f24 <HAL_TIM_Base_Start_IT+0x80>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1e      	ldr	r2, [pc, #120]	; (8003f84 <HAL_TIM_Base_Start_IT+0xe0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d009      	beq.n	8003f24 <HAL_TIM_Base_Start_IT+0x80>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a1c      	ldr	r2, [pc, #112]	; (8003f88 <HAL_TIM_Base_Start_IT+0xe4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d004      	beq.n	8003f24 <HAL_TIM_Base_Start_IT+0x80>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a1b      	ldr	r2, [pc, #108]	; (8003f8c <HAL_TIM_Base_Start_IT+0xe8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d115      	bne.n	8003f50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	4b19      	ldr	r3, [pc, #100]	; (8003f90 <HAL_TIM_Base_Start_IT+0xec>)
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b06      	cmp	r3, #6
 8003f34:	d015      	beq.n	8003f62 <HAL_TIM_Base_Start_IT+0xbe>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f3c:	d011      	beq.n	8003f62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0201 	orr.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4e:	e008      	b.n	8003f62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	e000      	b.n	8003f64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40010000 	.word	0x40010000
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40000800 	.word	0x40000800
 8003f80:	40000c00 	.word	0x40000c00
 8003f84:	40010400 	.word	0x40010400
 8003f88:	40014000 	.word	0x40014000
 8003f8c:	40001800 	.word	0x40001800
 8003f90:	00010007 	.word	0x00010007

08003f94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e049      	b.n	800403a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f841 	bl	8004042 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f000 fea6 	bl	8004d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
	...

08004058 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d109      	bne.n	800407c <HAL_TIM_PWM_Start+0x24>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b01      	cmp	r3, #1
 8004072:	bf14      	ite	ne
 8004074:	2301      	movne	r3, #1
 8004076:	2300      	moveq	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	e03c      	b.n	80040f6 <HAL_TIM_PWM_Start+0x9e>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2b04      	cmp	r3, #4
 8004080:	d109      	bne.n	8004096 <HAL_TIM_PWM_Start+0x3e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b01      	cmp	r3, #1
 800408c:	bf14      	ite	ne
 800408e:	2301      	movne	r3, #1
 8004090:	2300      	moveq	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	e02f      	b.n	80040f6 <HAL_TIM_PWM_Start+0x9e>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b08      	cmp	r3, #8
 800409a:	d109      	bne.n	80040b0 <HAL_TIM_PWM_Start+0x58>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	bf14      	ite	ne
 80040a8:	2301      	movne	r3, #1
 80040aa:	2300      	moveq	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	e022      	b.n	80040f6 <HAL_TIM_PWM_Start+0x9e>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b0c      	cmp	r3, #12
 80040b4:	d109      	bne.n	80040ca <HAL_TIM_PWM_Start+0x72>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b01      	cmp	r3, #1
 80040c0:	bf14      	ite	ne
 80040c2:	2301      	movne	r3, #1
 80040c4:	2300      	moveq	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	e015      	b.n	80040f6 <HAL_TIM_PWM_Start+0x9e>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b10      	cmp	r3, #16
 80040ce:	d109      	bne.n	80040e4 <HAL_TIM_PWM_Start+0x8c>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b01      	cmp	r3, #1
 80040da:	bf14      	ite	ne
 80040dc:	2301      	movne	r3, #1
 80040de:	2300      	moveq	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	e008      	b.n	80040f6 <HAL_TIM_PWM_Start+0x9e>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	bf14      	ite	ne
 80040f0:	2301      	movne	r3, #1
 80040f2:	2300      	moveq	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e092      	b.n	8004224 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d104      	bne.n	800410e <HAL_TIM_PWM_Start+0xb6>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800410c:	e023      	b.n	8004156 <HAL_TIM_PWM_Start+0xfe>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b04      	cmp	r3, #4
 8004112:	d104      	bne.n	800411e <HAL_TIM_PWM_Start+0xc6>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800411c:	e01b      	b.n	8004156 <HAL_TIM_PWM_Start+0xfe>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b08      	cmp	r3, #8
 8004122:	d104      	bne.n	800412e <HAL_TIM_PWM_Start+0xd6>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800412c:	e013      	b.n	8004156 <HAL_TIM_PWM_Start+0xfe>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b0c      	cmp	r3, #12
 8004132:	d104      	bne.n	800413e <HAL_TIM_PWM_Start+0xe6>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800413c:	e00b      	b.n	8004156 <HAL_TIM_PWM_Start+0xfe>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b10      	cmp	r3, #16
 8004142:	d104      	bne.n	800414e <HAL_TIM_PWM_Start+0xf6>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800414c:	e003      	b.n	8004156 <HAL_TIM_PWM_Start+0xfe>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2202      	movs	r2, #2
 8004152:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2201      	movs	r2, #1
 800415c:	6839      	ldr	r1, [r7, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f001 faa2 	bl	80056a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a30      	ldr	r2, [pc, #192]	; (800422c <HAL_TIM_PWM_Start+0x1d4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d004      	beq.n	8004178 <HAL_TIM_PWM_Start+0x120>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a2f      	ldr	r2, [pc, #188]	; (8004230 <HAL_TIM_PWM_Start+0x1d8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d101      	bne.n	800417c <HAL_TIM_PWM_Start+0x124>
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <HAL_TIM_PWM_Start+0x126>
 800417c:	2300      	movs	r3, #0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d007      	beq.n	8004192 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004190:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a25      	ldr	r2, [pc, #148]	; (800422c <HAL_TIM_PWM_Start+0x1d4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d022      	beq.n	80041e2 <HAL_TIM_PWM_Start+0x18a>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a4:	d01d      	beq.n	80041e2 <HAL_TIM_PWM_Start+0x18a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a22      	ldr	r2, [pc, #136]	; (8004234 <HAL_TIM_PWM_Start+0x1dc>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d018      	beq.n	80041e2 <HAL_TIM_PWM_Start+0x18a>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a20      	ldr	r2, [pc, #128]	; (8004238 <HAL_TIM_PWM_Start+0x1e0>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d013      	beq.n	80041e2 <HAL_TIM_PWM_Start+0x18a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a1f      	ldr	r2, [pc, #124]	; (800423c <HAL_TIM_PWM_Start+0x1e4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00e      	beq.n	80041e2 <HAL_TIM_PWM_Start+0x18a>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a19      	ldr	r2, [pc, #100]	; (8004230 <HAL_TIM_PWM_Start+0x1d8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d009      	beq.n	80041e2 <HAL_TIM_PWM_Start+0x18a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a1b      	ldr	r2, [pc, #108]	; (8004240 <HAL_TIM_PWM_Start+0x1e8>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d004      	beq.n	80041e2 <HAL_TIM_PWM_Start+0x18a>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a19      	ldr	r2, [pc, #100]	; (8004244 <HAL_TIM_PWM_Start+0x1ec>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d115      	bne.n	800420e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	4b17      	ldr	r3, [pc, #92]	; (8004248 <HAL_TIM_PWM_Start+0x1f0>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b06      	cmp	r3, #6
 80041f2:	d015      	beq.n	8004220 <HAL_TIM_PWM_Start+0x1c8>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041fa:	d011      	beq.n	8004220 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800420c:	e008      	b.n	8004220 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f042 0201 	orr.w	r2, r2, #1
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	e000      	b.n	8004222 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004220:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40010000 	.word	0x40010000
 8004230:	40010400 	.word	0x40010400
 8004234:	40000400 	.word	0x40000400
 8004238:	40000800 	.word	0x40000800
 800423c:	40000c00 	.word	0x40000c00
 8004240:	40014000 	.word	0x40014000
 8004244:	40001800 	.word	0x40001800
 8004248:	00010007 	.word	0x00010007

0800424c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e049      	b.n	80042f2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f841 	bl	80042fa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3304      	adds	r3, #4
 8004288:	4619      	mov	r1, r3
 800428a:	4610      	mov	r0, r2
 800428c:	f000 fd4a 	bl	8004d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
	...

08004310 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d104      	bne.n	800432a <HAL_TIM_IC_Start+0x1a>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004326:	b2db      	uxtb	r3, r3
 8004328:	e023      	b.n	8004372 <HAL_TIM_IC_Start+0x62>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b04      	cmp	r3, #4
 800432e:	d104      	bne.n	800433a <HAL_TIM_IC_Start+0x2a>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004336:	b2db      	uxtb	r3, r3
 8004338:	e01b      	b.n	8004372 <HAL_TIM_IC_Start+0x62>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b08      	cmp	r3, #8
 800433e:	d104      	bne.n	800434a <HAL_TIM_IC_Start+0x3a>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004346:	b2db      	uxtb	r3, r3
 8004348:	e013      	b.n	8004372 <HAL_TIM_IC_Start+0x62>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b0c      	cmp	r3, #12
 800434e:	d104      	bne.n	800435a <HAL_TIM_IC_Start+0x4a>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004356:	b2db      	uxtb	r3, r3
 8004358:	e00b      	b.n	8004372 <HAL_TIM_IC_Start+0x62>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b10      	cmp	r3, #16
 800435e:	d104      	bne.n	800436a <HAL_TIM_IC_Start+0x5a>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004366:	b2db      	uxtb	r3, r3
 8004368:	e003      	b.n	8004372 <HAL_TIM_IC_Start+0x62>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004370:	b2db      	uxtb	r3, r3
 8004372:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d104      	bne.n	8004384 <HAL_TIM_IC_Start+0x74>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004380:	b2db      	uxtb	r3, r3
 8004382:	e013      	b.n	80043ac <HAL_TIM_IC_Start+0x9c>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2b04      	cmp	r3, #4
 8004388:	d104      	bne.n	8004394 <HAL_TIM_IC_Start+0x84>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004390:	b2db      	uxtb	r3, r3
 8004392:	e00b      	b.n	80043ac <HAL_TIM_IC_Start+0x9c>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	2b08      	cmp	r3, #8
 8004398:	d104      	bne.n	80043a4 <HAL_TIM_IC_Start+0x94>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	e003      	b.n	80043ac <HAL_TIM_IC_Start+0x9c>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d102      	bne.n	80043ba <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80043b4:	7bbb      	ldrb	r3, [r7, #14]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d001      	beq.n	80043be <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e097      	b.n	80044ee <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d104      	bne.n	80043ce <HAL_TIM_IC_Start+0xbe>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043cc:	e023      	b.n	8004416 <HAL_TIM_IC_Start+0x106>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d104      	bne.n	80043de <HAL_TIM_IC_Start+0xce>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043dc:	e01b      	b.n	8004416 <HAL_TIM_IC_Start+0x106>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d104      	bne.n	80043ee <HAL_TIM_IC_Start+0xde>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043ec:	e013      	b.n	8004416 <HAL_TIM_IC_Start+0x106>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b0c      	cmp	r3, #12
 80043f2:	d104      	bne.n	80043fe <HAL_TIM_IC_Start+0xee>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043fc:	e00b      	b.n	8004416 <HAL_TIM_IC_Start+0x106>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b10      	cmp	r3, #16
 8004402:	d104      	bne.n	800440e <HAL_TIM_IC_Start+0xfe>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800440c:	e003      	b.n	8004416 <HAL_TIM_IC_Start+0x106>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2202      	movs	r2, #2
 8004412:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d104      	bne.n	8004426 <HAL_TIM_IC_Start+0x116>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004424:	e013      	b.n	800444e <HAL_TIM_IC_Start+0x13e>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b04      	cmp	r3, #4
 800442a:	d104      	bne.n	8004436 <HAL_TIM_IC_Start+0x126>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004434:	e00b      	b.n	800444e <HAL_TIM_IC_Start+0x13e>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b08      	cmp	r3, #8
 800443a:	d104      	bne.n	8004446 <HAL_TIM_IC_Start+0x136>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004444:	e003      	b.n	800444e <HAL_TIM_IC_Start+0x13e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2202      	movs	r2, #2
 800444a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2201      	movs	r2, #1
 8004454:	6839      	ldr	r1, [r7, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f001 f926 	bl	80056a8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a25      	ldr	r2, [pc, #148]	; (80044f8 <HAL_TIM_IC_Start+0x1e8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d022      	beq.n	80044ac <HAL_TIM_IC_Start+0x19c>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800446e:	d01d      	beq.n	80044ac <HAL_TIM_IC_Start+0x19c>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a21      	ldr	r2, [pc, #132]	; (80044fc <HAL_TIM_IC_Start+0x1ec>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d018      	beq.n	80044ac <HAL_TIM_IC_Start+0x19c>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a20      	ldr	r2, [pc, #128]	; (8004500 <HAL_TIM_IC_Start+0x1f0>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d013      	beq.n	80044ac <HAL_TIM_IC_Start+0x19c>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a1e      	ldr	r2, [pc, #120]	; (8004504 <HAL_TIM_IC_Start+0x1f4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d00e      	beq.n	80044ac <HAL_TIM_IC_Start+0x19c>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a1d      	ldr	r2, [pc, #116]	; (8004508 <HAL_TIM_IC_Start+0x1f8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d009      	beq.n	80044ac <HAL_TIM_IC_Start+0x19c>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1b      	ldr	r2, [pc, #108]	; (800450c <HAL_TIM_IC_Start+0x1fc>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d004      	beq.n	80044ac <HAL_TIM_IC_Start+0x19c>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1a      	ldr	r2, [pc, #104]	; (8004510 <HAL_TIM_IC_Start+0x200>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d115      	bne.n	80044d8 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	4b18      	ldr	r3, [pc, #96]	; (8004514 <HAL_TIM_IC_Start+0x204>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b06      	cmp	r3, #6
 80044bc:	d015      	beq.n	80044ea <HAL_TIM_IC_Start+0x1da>
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c4:	d011      	beq.n	80044ea <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 0201 	orr.w	r2, r2, #1
 80044d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d6:	e008      	b.n	80044ea <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0201 	orr.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	e000      	b.n	80044ec <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40010000 	.word	0x40010000
 80044fc:	40000400 	.word	0x40000400
 8004500:	40000800 	.word	0x40000800
 8004504:	40000c00 	.word	0x40000c00
 8004508:	40010400 	.word	0x40010400
 800450c:	40014000 	.word	0x40014000
 8004510:	40001800 	.word	0x40001800
 8004514:	00010007 	.word	0x00010007

08004518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b02      	cmp	r3, #2
 800452c:	d122      	bne.n	8004574 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b02      	cmp	r3, #2
 800453a:	d11b      	bne.n	8004574 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0202 	mvn.w	r2, #2
 8004544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fbc4 	bl	8004ce8 <HAL_TIM_IC_CaptureCallback>
 8004560:	e005      	b.n	800456e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fbb6 	bl	8004cd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 fbc7 	bl	8004cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b04      	cmp	r3, #4
 8004580:	d122      	bne.n	80045c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b04      	cmp	r3, #4
 800458e:	d11b      	bne.n	80045c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0204 	mvn.w	r2, #4
 8004598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2202      	movs	r2, #2
 800459e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fb9a 	bl	8004ce8 <HAL_TIM_IC_CaptureCallback>
 80045b4:	e005      	b.n	80045c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fb8c 	bl	8004cd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 fb9d 	bl	8004cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d122      	bne.n	800461c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d11b      	bne.n	800461c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0208 	mvn.w	r2, #8
 80045ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2204      	movs	r2, #4
 80045f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fb70 	bl	8004ce8 <HAL_TIM_IC_CaptureCallback>
 8004608:	e005      	b.n	8004616 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fb62 	bl	8004cd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fb73 	bl	8004cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f003 0310 	and.w	r3, r3, #16
 8004626:	2b10      	cmp	r3, #16
 8004628:	d122      	bne.n	8004670 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f003 0310 	and.w	r3, r3, #16
 8004634:	2b10      	cmp	r3, #16
 8004636:	d11b      	bne.n	8004670 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0210 	mvn.w	r2, #16
 8004640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2208      	movs	r2, #8
 8004646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fb46 	bl	8004ce8 <HAL_TIM_IC_CaptureCallback>
 800465c:	e005      	b.n	800466a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fb38 	bl	8004cd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fb49 	bl	8004cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b01      	cmp	r3, #1
 800467c:	d10e      	bne.n	800469c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b01      	cmp	r3, #1
 800468a:	d107      	bne.n	800469c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f06f 0201 	mvn.w	r2, #1
 8004694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fc fd20 	bl	80010dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a6:	2b80      	cmp	r3, #128	; 0x80
 80046a8:	d10e      	bne.n	80046c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b4:	2b80      	cmp	r3, #128	; 0x80
 80046b6:	d107      	bne.n	80046c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f001 f8ae 	bl	8005824 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d6:	d10e      	bne.n	80046f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e2:	2b80      	cmp	r3, #128	; 0x80
 80046e4:	d107      	bne.n	80046f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f001 f8a1 	bl	8005838 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004700:	2b40      	cmp	r3, #64	; 0x40
 8004702:	d10e      	bne.n	8004722 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470e:	2b40      	cmp	r3, #64	; 0x40
 8004710:	d107      	bne.n	8004722 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800471a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 faf7 	bl	8004d10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	f003 0320 	and.w	r3, r3, #32
 800472c:	2b20      	cmp	r3, #32
 800472e:	d10e      	bne.n	800474e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0320 	and.w	r3, r3, #32
 800473a:	2b20      	cmp	r3, #32
 800473c:	d107      	bne.n	800474e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f06f 0220 	mvn.w	r2, #32
 8004746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f001 f861 	bl	8005810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800474e:	bf00      	nop
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b086      	sub	sp, #24
 800475a:	af00      	add	r7, sp, #0
 800475c:	60f8      	str	r0, [r7, #12]
 800475e:	60b9      	str	r1, [r7, #8]
 8004760:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004770:	2302      	movs	r3, #2
 8004772:	e088      	b.n	8004886 <HAL_TIM_IC_ConfigChannel+0x130>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d11b      	bne.n	80047ba <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	6819      	ldr	r1, [r3, #0]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f000 fdc5 	bl	8005320 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	699a      	ldr	r2, [r3, #24]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 020c 	bic.w	r2, r2, #12
 80047a4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6999      	ldr	r1, [r3, #24]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	619a      	str	r2, [r3, #24]
 80047b8:	e060      	b.n	800487c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d11c      	bne.n	80047fa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6818      	ldr	r0, [r3, #0]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	6819      	ldr	r1, [r3, #0]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f000 fe49 	bl	8005466 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	699a      	ldr	r2, [r3, #24]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80047e2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6999      	ldr	r1, [r3, #24]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	021a      	lsls	r2, r3, #8
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	619a      	str	r2, [r3, #24]
 80047f8:	e040      	b.n	800487c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d11b      	bne.n	8004838 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	6819      	ldr	r1, [r3, #0]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f000 fe96 	bl	8005540 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	69da      	ldr	r2, [r3, #28]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 020c 	bic.w	r2, r2, #12
 8004822:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	69d9      	ldr	r1, [r3, #28]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	61da      	str	r2, [r3, #28]
 8004836:	e021      	b.n	800487c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b0c      	cmp	r3, #12
 800483c:	d11c      	bne.n	8004878 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	6819      	ldr	r1, [r3, #0]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f000 feb3 	bl	80055b8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	69da      	ldr	r2, [r3, #28]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004860:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69d9      	ldr	r1, [r3, #28]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	021a      	lsls	r2, r3, #8
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	61da      	str	r2, [r3, #28]
 8004876:	e001      	b.n	800487c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004884:	7dfb      	ldrb	r3, [r7, #23]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e0ff      	b.n	8004aae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b14      	cmp	r3, #20
 80048ba:	f200 80f0 	bhi.w	8004a9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80048be:	a201      	add	r2, pc, #4	; (adr r2, 80048c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c4:	08004919 	.word	0x08004919
 80048c8:	08004a9f 	.word	0x08004a9f
 80048cc:	08004a9f 	.word	0x08004a9f
 80048d0:	08004a9f 	.word	0x08004a9f
 80048d4:	08004959 	.word	0x08004959
 80048d8:	08004a9f 	.word	0x08004a9f
 80048dc:	08004a9f 	.word	0x08004a9f
 80048e0:	08004a9f 	.word	0x08004a9f
 80048e4:	0800499b 	.word	0x0800499b
 80048e8:	08004a9f 	.word	0x08004a9f
 80048ec:	08004a9f 	.word	0x08004a9f
 80048f0:	08004a9f 	.word	0x08004a9f
 80048f4:	080049db 	.word	0x080049db
 80048f8:	08004a9f 	.word	0x08004a9f
 80048fc:	08004a9f 	.word	0x08004a9f
 8004900:	08004a9f 	.word	0x08004a9f
 8004904:	08004a1d 	.word	0x08004a1d
 8004908:	08004a9f 	.word	0x08004a9f
 800490c:	08004a9f 	.word	0x08004a9f
 8004910:	08004a9f 	.word	0x08004a9f
 8004914:	08004a5d 	.word	0x08004a5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68b9      	ldr	r1, [r7, #8]
 800491e:	4618      	mov	r0, r3
 8004920:	f000 faa0 	bl	8004e64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	699a      	ldr	r2, [r3, #24]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0208 	orr.w	r2, r2, #8
 8004932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699a      	ldr	r2, [r3, #24]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0204 	bic.w	r2, r2, #4
 8004942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6999      	ldr	r1, [r3, #24]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	691a      	ldr	r2, [r3, #16]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	619a      	str	r2, [r3, #24]
      break;
 8004956:	e0a5      	b.n	8004aa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68b9      	ldr	r1, [r7, #8]
 800495e:	4618      	mov	r0, r3
 8004960:	f000 faf2 	bl	8004f48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699a      	ldr	r2, [r3, #24]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699a      	ldr	r2, [r3, #24]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6999      	ldr	r1, [r3, #24]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	021a      	lsls	r2, r3, #8
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	619a      	str	r2, [r3, #24]
      break;
 8004998:	e084      	b.n	8004aa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68b9      	ldr	r1, [r7, #8]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fb49 	bl	8005038 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	69da      	ldr	r2, [r3, #28]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f042 0208 	orr.w	r2, r2, #8
 80049b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	69da      	ldr	r2, [r3, #28]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0204 	bic.w	r2, r2, #4
 80049c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69d9      	ldr	r1, [r3, #28]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	61da      	str	r2, [r3, #28]
      break;
 80049d8:	e064      	b.n	8004aa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68b9      	ldr	r1, [r7, #8]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 fb9f 	bl	8005124 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69da      	ldr	r2, [r3, #28]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69da      	ldr	r2, [r3, #28]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69d9      	ldr	r1, [r3, #28]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	021a      	lsls	r2, r3, #8
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	61da      	str	r2, [r3, #28]
      break;
 8004a1a:	e043      	b.n	8004aa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68b9      	ldr	r1, [r7, #8]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 fbd6 	bl	80051d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0208 	orr.w	r2, r2, #8
 8004a36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0204 	bic.w	r2, r2, #4
 8004a46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	691a      	ldr	r2, [r3, #16]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004a5a:	e023      	b.n	8004aa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68b9      	ldr	r1, [r7, #8]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fc08 	bl	8005278 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	021a      	lsls	r2, r3, #8
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004a9c:	e002      	b.n	8004aa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	75fb      	strb	r3, [r7, #23]
      break;
 8004aa2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop

08004ab8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e0b4      	b.n	8004c3e <HAL_TIM_ConfigClockSource+0x186>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	4b56      	ldr	r3, [pc, #344]	; (8004c48 <HAL_TIM_ConfigClockSource+0x190>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004afa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b0c:	d03e      	beq.n	8004b8c <HAL_TIM_ConfigClockSource+0xd4>
 8004b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b12:	f200 8087 	bhi.w	8004c24 <HAL_TIM_ConfigClockSource+0x16c>
 8004b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b1a:	f000 8086 	beq.w	8004c2a <HAL_TIM_ConfigClockSource+0x172>
 8004b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b22:	d87f      	bhi.n	8004c24 <HAL_TIM_ConfigClockSource+0x16c>
 8004b24:	2b70      	cmp	r3, #112	; 0x70
 8004b26:	d01a      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0xa6>
 8004b28:	2b70      	cmp	r3, #112	; 0x70
 8004b2a:	d87b      	bhi.n	8004c24 <HAL_TIM_ConfigClockSource+0x16c>
 8004b2c:	2b60      	cmp	r3, #96	; 0x60
 8004b2e:	d050      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0x11a>
 8004b30:	2b60      	cmp	r3, #96	; 0x60
 8004b32:	d877      	bhi.n	8004c24 <HAL_TIM_ConfigClockSource+0x16c>
 8004b34:	2b50      	cmp	r3, #80	; 0x50
 8004b36:	d03c      	beq.n	8004bb2 <HAL_TIM_ConfigClockSource+0xfa>
 8004b38:	2b50      	cmp	r3, #80	; 0x50
 8004b3a:	d873      	bhi.n	8004c24 <HAL_TIM_ConfigClockSource+0x16c>
 8004b3c:	2b40      	cmp	r3, #64	; 0x40
 8004b3e:	d058      	beq.n	8004bf2 <HAL_TIM_ConfigClockSource+0x13a>
 8004b40:	2b40      	cmp	r3, #64	; 0x40
 8004b42:	d86f      	bhi.n	8004c24 <HAL_TIM_ConfigClockSource+0x16c>
 8004b44:	2b30      	cmp	r3, #48	; 0x30
 8004b46:	d064      	beq.n	8004c12 <HAL_TIM_ConfigClockSource+0x15a>
 8004b48:	2b30      	cmp	r3, #48	; 0x30
 8004b4a:	d86b      	bhi.n	8004c24 <HAL_TIM_ConfigClockSource+0x16c>
 8004b4c:	2b20      	cmp	r3, #32
 8004b4e:	d060      	beq.n	8004c12 <HAL_TIM_ConfigClockSource+0x15a>
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d867      	bhi.n	8004c24 <HAL_TIM_ConfigClockSource+0x16c>
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d05c      	beq.n	8004c12 <HAL_TIM_ConfigClockSource+0x15a>
 8004b58:	2b10      	cmp	r3, #16
 8004b5a:	d05a      	beq.n	8004c12 <HAL_TIM_ConfigClockSource+0x15a>
 8004b5c:	e062      	b.n	8004c24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6818      	ldr	r0, [r3, #0]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	6899      	ldr	r1, [r3, #8]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f000 fd7b 	bl	8005668 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	609a      	str	r2, [r3, #8]
      break;
 8004b8a:	e04f      	b.n	8004c2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6818      	ldr	r0, [r3, #0]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	6899      	ldr	r1, [r3, #8]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f000 fd64 	bl	8005668 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bae:	609a      	str	r2, [r3, #8]
      break;
 8004bb0:	e03c      	b.n	8004c2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6818      	ldr	r0, [r3, #0]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	6859      	ldr	r1, [r3, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f000 fc22 	bl	8005408 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2150      	movs	r1, #80	; 0x50
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 fd31 	bl	8005632 <TIM_ITRx_SetConfig>
      break;
 8004bd0:	e02c      	b.n	8004c2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6818      	ldr	r0, [r3, #0]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6859      	ldr	r1, [r3, #4]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	461a      	mov	r2, r3
 8004be0:	f000 fc7e 	bl	80054e0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2160      	movs	r1, #96	; 0x60
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fd21 	bl	8005632 <TIM_ITRx_SetConfig>
      break;
 8004bf0:	e01c      	b.n	8004c2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6818      	ldr	r0, [r3, #0]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	6859      	ldr	r1, [r3, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f000 fc02 	bl	8005408 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2140      	movs	r1, #64	; 0x40
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fd11 	bl	8005632 <TIM_ITRx_SetConfig>
      break;
 8004c10:	e00c      	b.n	8004c2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	f000 fd08 	bl	8005632 <TIM_ITRx_SetConfig>
      break;
 8004c22:	e003      	b.n	8004c2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	73fb      	strb	r3, [r7, #15]
      break;
 8004c28:	e000      	b.n	8004c2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	fffeff88 	.word	0xfffeff88

08004c4c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b0c      	cmp	r3, #12
 8004c5e:	d831      	bhi.n	8004cc4 <HAL_TIM_ReadCapturedValue+0x78>
 8004c60:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c66:	bf00      	nop
 8004c68:	08004c9d 	.word	0x08004c9d
 8004c6c:	08004cc5 	.word	0x08004cc5
 8004c70:	08004cc5 	.word	0x08004cc5
 8004c74:	08004cc5 	.word	0x08004cc5
 8004c78:	08004ca7 	.word	0x08004ca7
 8004c7c:	08004cc5 	.word	0x08004cc5
 8004c80:	08004cc5 	.word	0x08004cc5
 8004c84:	08004cc5 	.word	0x08004cc5
 8004c88:	08004cb1 	.word	0x08004cb1
 8004c8c:	08004cc5 	.word	0x08004cc5
 8004c90:	08004cc5 	.word	0x08004cc5
 8004c94:	08004cc5 	.word	0x08004cc5
 8004c98:	08004cbb 	.word	0x08004cbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca2:	60fb      	str	r3, [r7, #12]

      break;
 8004ca4:	e00f      	b.n	8004cc6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cac:	60fb      	str	r3, [r7, #12]

      break;
 8004cae:	e00a      	b.n	8004cc6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb6:	60fb      	str	r3, [r7, #12]

      break;
 8004cb8:	e005      	b.n	8004cc6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc0:	60fb      	str	r3, [r7, #12]

      break;
 8004cc2:	e000      	b.n	8004cc6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004cc4:	bf00      	nop
  }

  return tmpreg;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a40      	ldr	r2, [pc, #256]	; (8004e38 <TIM_Base_SetConfig+0x114>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d013      	beq.n	8004d64 <TIM_Base_SetConfig+0x40>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d42:	d00f      	beq.n	8004d64 <TIM_Base_SetConfig+0x40>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a3d      	ldr	r2, [pc, #244]	; (8004e3c <TIM_Base_SetConfig+0x118>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d00b      	beq.n	8004d64 <TIM_Base_SetConfig+0x40>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a3c      	ldr	r2, [pc, #240]	; (8004e40 <TIM_Base_SetConfig+0x11c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d007      	beq.n	8004d64 <TIM_Base_SetConfig+0x40>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a3b      	ldr	r2, [pc, #236]	; (8004e44 <TIM_Base_SetConfig+0x120>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d003      	beq.n	8004d64 <TIM_Base_SetConfig+0x40>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a3a      	ldr	r2, [pc, #232]	; (8004e48 <TIM_Base_SetConfig+0x124>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d108      	bne.n	8004d76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a2f      	ldr	r2, [pc, #188]	; (8004e38 <TIM_Base_SetConfig+0x114>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d02b      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d84:	d027      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a2c      	ldr	r2, [pc, #176]	; (8004e3c <TIM_Base_SetConfig+0x118>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d023      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a2b      	ldr	r2, [pc, #172]	; (8004e40 <TIM_Base_SetConfig+0x11c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d01f      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a2a      	ldr	r2, [pc, #168]	; (8004e44 <TIM_Base_SetConfig+0x120>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d01b      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a29      	ldr	r2, [pc, #164]	; (8004e48 <TIM_Base_SetConfig+0x124>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d017      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a28      	ldr	r2, [pc, #160]	; (8004e4c <TIM_Base_SetConfig+0x128>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d013      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a27      	ldr	r2, [pc, #156]	; (8004e50 <TIM_Base_SetConfig+0x12c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00f      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a26      	ldr	r2, [pc, #152]	; (8004e54 <TIM_Base_SetConfig+0x130>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00b      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a25      	ldr	r2, [pc, #148]	; (8004e58 <TIM_Base_SetConfig+0x134>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d007      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a24      	ldr	r2, [pc, #144]	; (8004e5c <TIM_Base_SetConfig+0x138>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d003      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a23      	ldr	r2, [pc, #140]	; (8004e60 <TIM_Base_SetConfig+0x13c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d108      	bne.n	8004de8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a0a      	ldr	r2, [pc, #40]	; (8004e38 <TIM_Base_SetConfig+0x114>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d003      	beq.n	8004e1c <TIM_Base_SetConfig+0xf8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a0c      	ldr	r2, [pc, #48]	; (8004e48 <TIM_Base_SetConfig+0x124>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d103      	bne.n	8004e24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	691a      	ldr	r2, [r3, #16]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	615a      	str	r2, [r3, #20]
}
 8004e2a:	bf00      	nop
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40010000 	.word	0x40010000
 8004e3c:	40000400 	.word	0x40000400
 8004e40:	40000800 	.word	0x40000800
 8004e44:	40000c00 	.word	0x40000c00
 8004e48:	40010400 	.word	0x40010400
 8004e4c:	40014000 	.word	0x40014000
 8004e50:	40014400 	.word	0x40014400
 8004e54:	40014800 	.word	0x40014800
 8004e58:	40001800 	.word	0x40001800
 8004e5c:	40001c00 	.word	0x40001c00
 8004e60:	40002000 	.word	0x40002000

08004e64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	f023 0201 	bic.w	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	4b2b      	ldr	r3, [pc, #172]	; (8004f3c <TIM_OC1_SetConfig+0xd8>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0303 	bic.w	r3, r3, #3
 8004e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f023 0302 	bic.w	r3, r3, #2
 8004eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a21      	ldr	r2, [pc, #132]	; (8004f40 <TIM_OC1_SetConfig+0xdc>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d003      	beq.n	8004ec8 <TIM_OC1_SetConfig+0x64>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a20      	ldr	r2, [pc, #128]	; (8004f44 <TIM_OC1_SetConfig+0xe0>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d10c      	bne.n	8004ee2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f023 0308 	bic.w	r3, r3, #8
 8004ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f023 0304 	bic.w	r3, r3, #4
 8004ee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a16      	ldr	r2, [pc, #88]	; (8004f40 <TIM_OC1_SetConfig+0xdc>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d003      	beq.n	8004ef2 <TIM_OC1_SetConfig+0x8e>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a15      	ldr	r2, [pc, #84]	; (8004f44 <TIM_OC1_SetConfig+0xe0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d111      	bne.n	8004f16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ef8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	621a      	str	r2, [r3, #32]
}
 8004f30:	bf00      	nop
 8004f32:	371c      	adds	r7, #28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	fffeff8f 	.word	0xfffeff8f
 8004f40:	40010000 	.word	0x40010000
 8004f44:	40010400 	.word	0x40010400

08004f48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	f023 0210 	bic.w	r2, r3, #16
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4b2e      	ldr	r3, [pc, #184]	; (800502c <TIM_OC2_SetConfig+0xe4>)
 8004f74:	4013      	ands	r3, r2
 8004f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	021b      	lsls	r3, r3, #8
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f023 0320 	bic.w	r3, r3, #32
 8004f92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	011b      	lsls	r3, r3, #4
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a23      	ldr	r2, [pc, #140]	; (8005030 <TIM_OC2_SetConfig+0xe8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d003      	beq.n	8004fb0 <TIM_OC2_SetConfig+0x68>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a22      	ldr	r2, [pc, #136]	; (8005034 <TIM_OC2_SetConfig+0xec>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d10d      	bne.n	8004fcc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a18      	ldr	r2, [pc, #96]	; (8005030 <TIM_OC2_SetConfig+0xe8>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d003      	beq.n	8004fdc <TIM_OC2_SetConfig+0x94>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a17      	ldr	r2, [pc, #92]	; (8005034 <TIM_OC2_SetConfig+0xec>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d113      	bne.n	8005004 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fe2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	4313      	orrs	r3, r2
 8005002:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	621a      	str	r2, [r3, #32]
}
 800501e:	bf00      	nop
 8005020:	371c      	adds	r7, #28
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	feff8fff 	.word	0xfeff8fff
 8005030:	40010000 	.word	0x40010000
 8005034:	40010400 	.word	0x40010400

08005038 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005038:	b480      	push	{r7}
 800503a:	b087      	sub	sp, #28
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4b2d      	ldr	r3, [pc, #180]	; (8005118 <TIM_OC3_SetConfig+0xe0>)
 8005064:	4013      	ands	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0303 	bic.w	r3, r3, #3
 800506e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	021b      	lsls	r3, r3, #8
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	4313      	orrs	r3, r2
 800508c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a22      	ldr	r2, [pc, #136]	; (800511c <TIM_OC3_SetConfig+0xe4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d003      	beq.n	800509e <TIM_OC3_SetConfig+0x66>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a21      	ldr	r2, [pc, #132]	; (8005120 <TIM_OC3_SetConfig+0xe8>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d10d      	bne.n	80050ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	021b      	lsls	r3, r3, #8
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a17      	ldr	r2, [pc, #92]	; (800511c <TIM_OC3_SetConfig+0xe4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d003      	beq.n	80050ca <TIM_OC3_SetConfig+0x92>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a16      	ldr	r2, [pc, #88]	; (8005120 <TIM_OC3_SetConfig+0xe8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d113      	bne.n	80050f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	621a      	str	r2, [r3, #32]
}
 800510c:	bf00      	nop
 800510e:	371c      	adds	r7, #28
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	fffeff8f 	.word	0xfffeff8f
 800511c:	40010000 	.word	0x40010000
 8005120:	40010400 	.word	0x40010400

08005124 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	4b1e      	ldr	r3, [pc, #120]	; (80051c8 <TIM_OC4_SetConfig+0xa4>)
 8005150:	4013      	ands	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800515a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	021b      	lsls	r3, r3, #8
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800516e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	031b      	lsls	r3, r3, #12
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a13      	ldr	r2, [pc, #76]	; (80051cc <TIM_OC4_SetConfig+0xa8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d003      	beq.n	800518c <TIM_OC4_SetConfig+0x68>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a12      	ldr	r2, [pc, #72]	; (80051d0 <TIM_OC4_SetConfig+0xac>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d109      	bne.n	80051a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005192:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	019b      	lsls	r3, r3, #6
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	4313      	orrs	r3, r2
 800519e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	621a      	str	r2, [r3, #32]
}
 80051ba:	bf00      	nop
 80051bc:	371c      	adds	r7, #28
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	feff8fff 	.word	0xfeff8fff
 80051cc:	40010000 	.word	0x40010000
 80051d0:	40010400 	.word	0x40010400

080051d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4b1b      	ldr	r3, [pc, #108]	; (800526c <TIM_OC5_SetConfig+0x98>)
 8005200:	4013      	ands	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005214:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	041b      	lsls	r3, r3, #16
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4313      	orrs	r3, r2
 8005220:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a12      	ldr	r2, [pc, #72]	; (8005270 <TIM_OC5_SetConfig+0x9c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d003      	beq.n	8005232 <TIM_OC5_SetConfig+0x5e>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a11      	ldr	r2, [pc, #68]	; (8005274 <TIM_OC5_SetConfig+0xa0>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d109      	bne.n	8005246 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005238:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	021b      	lsls	r3, r3, #8
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	621a      	str	r2, [r3, #32]
}
 8005260:	bf00      	nop
 8005262:	371c      	adds	r7, #28
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	fffeff8f 	.word	0xfffeff8f
 8005270:	40010000 	.word	0x40010000
 8005274:	40010400 	.word	0x40010400

08005278 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4b1c      	ldr	r3, [pc, #112]	; (8005314 <TIM_OC6_SetConfig+0x9c>)
 80052a4:	4013      	ands	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	021b      	lsls	r3, r3, #8
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	051b      	lsls	r3, r3, #20
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a13      	ldr	r2, [pc, #76]	; (8005318 <TIM_OC6_SetConfig+0xa0>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d003      	beq.n	80052d8 <TIM_OC6_SetConfig+0x60>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a12      	ldr	r2, [pc, #72]	; (800531c <TIM_OC6_SetConfig+0xa4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d109      	bne.n	80052ec <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	029b      	lsls	r3, r3, #10
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	621a      	str	r2, [r3, #32]
}
 8005306:	bf00      	nop
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	feff8fff 	.word	0xfeff8fff
 8005318:	40010000 	.word	0x40010000
 800531c:	40010400 	.word	0x40010400

08005320 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	f023 0201 	bic.w	r2, r3, #1
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4a28      	ldr	r2, [pc, #160]	; (80053ec <TIM_TI1_SetConfig+0xcc>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d01b      	beq.n	8005386 <TIM_TI1_SetConfig+0x66>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005354:	d017      	beq.n	8005386 <TIM_TI1_SetConfig+0x66>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4a25      	ldr	r2, [pc, #148]	; (80053f0 <TIM_TI1_SetConfig+0xd0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d013      	beq.n	8005386 <TIM_TI1_SetConfig+0x66>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	4a24      	ldr	r2, [pc, #144]	; (80053f4 <TIM_TI1_SetConfig+0xd4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00f      	beq.n	8005386 <TIM_TI1_SetConfig+0x66>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4a23      	ldr	r2, [pc, #140]	; (80053f8 <TIM_TI1_SetConfig+0xd8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00b      	beq.n	8005386 <TIM_TI1_SetConfig+0x66>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4a22      	ldr	r2, [pc, #136]	; (80053fc <TIM_TI1_SetConfig+0xdc>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d007      	beq.n	8005386 <TIM_TI1_SetConfig+0x66>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	4a21      	ldr	r2, [pc, #132]	; (8005400 <TIM_TI1_SetConfig+0xe0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d003      	beq.n	8005386 <TIM_TI1_SetConfig+0x66>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4a20      	ldr	r2, [pc, #128]	; (8005404 <TIM_TI1_SetConfig+0xe4>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d101      	bne.n	800538a <TIM_TI1_SetConfig+0x6a>
 8005386:	2301      	movs	r3, #1
 8005388:	e000      	b.n	800538c <TIM_TI1_SetConfig+0x6c>
 800538a:	2300      	movs	r3, #0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d008      	beq.n	80053a2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f023 0303 	bic.w	r3, r3, #3
 8005396:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4313      	orrs	r3, r2
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	e003      	b.n	80053aa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f043 0301 	orr.w	r3, r3, #1
 80053a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f023 030a 	bic.w	r3, r3, #10
 80053c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f003 030a 	and.w	r3, r3, #10
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	621a      	str	r2, [r3, #32]
}
 80053de:	bf00      	nop
 80053e0:	371c      	adds	r7, #28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	40010000 	.word	0x40010000
 80053f0:	40000400 	.word	0x40000400
 80053f4:	40000800 	.word	0x40000800
 80053f8:	40000c00 	.word	0x40000c00
 80053fc:	40010400 	.word	0x40010400
 8005400:	40014000 	.word	0x40014000
 8005404:	40001800 	.word	0x40001800

08005408 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	f023 0201 	bic.w	r2, r3, #1
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4313      	orrs	r3, r2
 800543c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f023 030a 	bic.w	r3, r3, #10
 8005444:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	4313      	orrs	r3, r2
 800544c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	621a      	str	r2, [r3, #32]
}
 800545a:	bf00      	nop
 800545c:	371c      	adds	r7, #28
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005466:	b480      	push	{r7}
 8005468:	b087      	sub	sp, #28
 800546a:	af00      	add	r7, sp, #0
 800546c:	60f8      	str	r0, [r7, #12]
 800546e:	60b9      	str	r1, [r7, #8]
 8005470:	607a      	str	r2, [r7, #4]
 8005472:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	f023 0210 	bic.w	r2, r3, #16
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005492:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	021b      	lsls	r3, r3, #8
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	031b      	lsls	r3, r3, #12
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	621a      	str	r2, [r3, #32]
}
 80054d4:	bf00      	nop
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	f023 0210 	bic.w	r2, r3, #16
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800550a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	031b      	lsls	r3, r3, #12
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800551c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	011b      	lsls	r3, r3, #4
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	621a      	str	r2, [r3, #32]
}
 8005534:	bf00      	nop
 8005536:	371c      	adds	r7, #28
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f023 0303 	bic.w	r3, r3, #3
 800556c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4313      	orrs	r3, r2
 8005574:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800557c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	011b      	lsls	r3, r3, #4
 8005582:	b2db      	uxtb	r3, r3
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	4313      	orrs	r3, r2
 8005588:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005590:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	021b      	lsls	r3, r3, #8
 8005596:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	4313      	orrs	r3, r2
 800559e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	621a      	str	r2, [r3, #32]
}
 80055ac:	bf00      	nop
 80055ae:	371c      	adds	r7, #28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
 80055c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	021b      	lsls	r3, r3, #8
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	031b      	lsls	r3, r3, #12
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	4313      	orrs	r3, r2
 8005602:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800560a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	031b      	lsls	r3, r3, #12
 8005610:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	621a      	str	r2, [r3, #32]
}
 8005626:	bf00      	nop
 8005628:	371c      	adds	r7, #28
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005632:	b480      	push	{r7}
 8005634:	b085      	sub	sp, #20
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005648:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4313      	orrs	r3, r2
 8005650:	f043 0307 	orr.w	r3, r3, #7
 8005654:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	609a      	str	r2, [r3, #8]
}
 800565c:	bf00      	nop
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005682:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	021a      	lsls	r2, r3, #8
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	431a      	orrs	r2, r3
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4313      	orrs	r3, r2
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	4313      	orrs	r3, r2
 8005694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	609a      	str	r2, [r3, #8]
}
 800569c:	bf00      	nop
 800569e:	371c      	adds	r7, #28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f003 031f 	and.w	r3, r3, #31
 80056ba:	2201      	movs	r2, #1
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6a1a      	ldr	r2, [r3, #32]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	43db      	mvns	r3, r3
 80056ca:	401a      	ands	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a1a      	ldr	r2, [r3, #32]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f003 031f 	and.w	r3, r3, #31
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	fa01 f303 	lsl.w	r3, r1, r3
 80056e0:	431a      	orrs	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	621a      	str	r2, [r3, #32]
}
 80056e6:	bf00      	nop
 80056e8:	371c      	adds	r7, #28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
	...

080056f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005708:	2302      	movs	r3, #2
 800570a:	e06d      	b.n	80057e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a30      	ldr	r2, [pc, #192]	; (80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d004      	beq.n	8005740 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a2f      	ldr	r2, [pc, #188]	; (80057f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d108      	bne.n	8005752 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005746:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005758:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	4313      	orrs	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a20      	ldr	r2, [pc, #128]	; (80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d022      	beq.n	80057bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800577e:	d01d      	beq.n	80057bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a1d      	ldr	r2, [pc, #116]	; (80057fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d018      	beq.n	80057bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a1c      	ldr	r2, [pc, #112]	; (8005800 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d013      	beq.n	80057bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a1a      	ldr	r2, [pc, #104]	; (8005804 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d00e      	beq.n	80057bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a15      	ldr	r2, [pc, #84]	; (80057f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d009      	beq.n	80057bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a16      	ldr	r2, [pc, #88]	; (8005808 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d004      	beq.n	80057bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a15      	ldr	r2, [pc, #84]	; (800580c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d10c      	bne.n	80057d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	40010000 	.word	0x40010000
 80057f8:	40010400 	.word	0x40010400
 80057fc:	40000400 	.word	0x40000400
 8005800:	40000800 	.word	0x40000800
 8005804:	40000c00 	.word	0x40000c00
 8005808:	40014000 	.word	0x40014000
 800580c:	40001800 	.word	0x40001800

08005810 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e040      	b.n	80058e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005862:	2b00      	cmp	r3, #0
 8005864:	d106      	bne.n	8005874 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7fc fa98 	bl	8001da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2224      	movs	r2, #36	; 0x24
 8005878:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0201 	bic.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fbc0 	bl	8006010 <UART_SetConfig>
 8005890:	4603      	mov	r3, r0
 8005892:	2b01      	cmp	r3, #1
 8005894:	d101      	bne.n	800589a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e022      	b.n	80058e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fe18 	bl	80064d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fe9f 	bl	800661c <UART_CheckIdleState>
 80058de:	4603      	mov	r3, r0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b08b      	sub	sp, #44	; 0x2c
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	4613      	mov	r3, r2
 80058f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058fa:	2b20      	cmp	r3, #32
 80058fc:	d147      	bne.n	800598e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <HAL_UART_Transmit_IT+0x22>
 8005904:	88fb      	ldrh	r3, [r7, #6]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e040      	b.n	8005990 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	88fa      	ldrh	r2, [r7, #6]
 8005918:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	88fa      	ldrh	r2, [r7, #6]
 8005920:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2221      	movs	r2, #33	; 0x21
 8005936:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005940:	d107      	bne.n	8005952 <HAL_UART_Transmit_IT+0x6a>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d103      	bne.n	8005952 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4a13      	ldr	r2, [pc, #76]	; (800599c <HAL_UART_Transmit_IT+0xb4>)
 800594e:	66da      	str	r2, [r3, #108]	; 0x6c
 8005950:	e002      	b.n	8005958 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	4a12      	ldr	r2, [pc, #72]	; (80059a0 <HAL_UART_Transmit_IT+0xb8>)
 8005956:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	e853 3f00 	ldrex	r3, [r3]
 8005964:	613b      	str	r3, [r7, #16]
   return(result);
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	461a      	mov	r2, r3
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	623b      	str	r3, [r7, #32]
 8005978:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597a:	69f9      	ldr	r1, [r7, #28]
 800597c:	6a3a      	ldr	r2, [r7, #32]
 800597e:	e841 2300 	strex	r3, r2, [r1]
 8005982:	61bb      	str	r3, [r7, #24]
   return(result);
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1e6      	bne.n	8005958 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800598a:	2300      	movs	r3, #0
 800598c:	e000      	b.n	8005990 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800598e:	2302      	movs	r3, #2
  }
}
 8005990:	4618      	mov	r0, r3
 8005992:	372c      	adds	r7, #44	; 0x2c
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	08006b4f 	.word	0x08006b4f
 80059a0:	08006a99 	.word	0x08006a99

080059a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08a      	sub	sp, #40	; 0x28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	4613      	mov	r3, r2
 80059b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d132      	bne.n	8005a22 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <HAL_UART_Receive_IT+0x24>
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e02b      	b.n	8005a24 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d018      	beq.n	8005a12 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	613b      	str	r3, [r7, #16]
   return(result);
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059f4:	627b      	str	r3, [r7, #36]	; 0x24
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	623b      	str	r3, [r7, #32]
 8005a00:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	69f9      	ldr	r1, [r7, #28]
 8005a04:	6a3a      	ldr	r2, [r7, #32]
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e6      	bne.n	80059e0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a12:	88fb      	ldrh	r3, [r7, #6]
 8005a14:	461a      	mov	r2, r3
 8005a16:	68b9      	ldr	r1, [r7, #8]
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f000 fefd 	bl	8006818 <UART_Start_Receive_IT>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	e000      	b.n	8005a24 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005a22:	2302      	movs	r3, #2
  }
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3728      	adds	r7, #40	; 0x28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b0ba      	sub	sp, #232	; 0xe8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005a56:	f640 030f 	movw	r3, #2063	; 0x80f
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005a60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d115      	bne.n	8005a94 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a6c:	f003 0320 	and.w	r3, r3, #32
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00f      	beq.n	8005a94 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a78:	f003 0320 	and.w	r3, r3, #32
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d009      	beq.n	8005a94 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 8297 	beq.w	8005fb8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	4798      	blx	r3
      }
      return;
 8005a92:	e291      	b.n	8005fb8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 8117 	beq.w	8005ccc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d106      	bne.n	8005ab8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005aaa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005aae:	4b85      	ldr	r3, [pc, #532]	; (8005cc4 <HAL_UART_IRQHandler+0x298>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 810a 	beq.w	8005ccc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d011      	beq.n	8005ae8 <HAL_UART_IRQHandler+0xbc>
 8005ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00b      	beq.n	8005ae8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ade:	f043 0201 	orr.w	r2, r3, #1
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d011      	beq.n	8005b18 <HAL_UART_IRQHandler+0xec>
 8005af4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00b      	beq.n	8005b18 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2202      	movs	r2, #2
 8005b06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b0e:	f043 0204 	orr.w	r2, r3, #4
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b1c:	f003 0304 	and.w	r3, r3, #4
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d011      	beq.n	8005b48 <HAL_UART_IRQHandler+0x11c>
 8005b24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00b      	beq.n	8005b48 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2204      	movs	r2, #4
 8005b36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b3e:	f043 0202 	orr.w	r2, r3, #2
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b4c:	f003 0308 	and.w	r3, r3, #8
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d017      	beq.n	8005b84 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b58:	f003 0320 	and.w	r3, r3, #32
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d105      	bne.n	8005b6c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b64:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00b      	beq.n	8005b84 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2208      	movs	r2, #8
 8005b72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b7a:	f043 0208 	orr.w	r2, r3, #8
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d012      	beq.n	8005bb6 <HAL_UART_IRQHandler+0x18a>
 8005b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00c      	beq.n	8005bb6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ba4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bac:	f043 0220 	orr.w	r2, r3, #32
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 81fd 	beq.w	8005fbc <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc6:	f003 0320 	and.w	r3, r3, #32
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00d      	beq.n	8005bea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd2:	f003 0320 	and.w	r3, r3, #32
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d007      	beq.n	8005bea <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bf0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfe:	2b40      	cmp	r3, #64	; 0x40
 8005c00:	d005      	beq.n	8005c0e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c06:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d04f      	beq.n	8005cae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fec8 	bl	80069a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1e:	2b40      	cmp	r3, #64	; 0x40
 8005c20:	d141      	bne.n	8005ca6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3308      	adds	r3, #8
 8005c28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3308      	adds	r3, #8
 8005c4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c5e:	e841 2300 	strex	r3, r2, [r1]
 8005c62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1d9      	bne.n	8005c22 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d013      	beq.n	8005c9e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c7a:	4a13      	ldr	r2, [pc, #76]	; (8005cc8 <HAL_UART_IRQHandler+0x29c>)
 8005c7c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fc fcbb 	bl	80025fe <HAL_DMA_Abort_IT>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d017      	beq.n	8005cbe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c98:	4610      	mov	r0, r2
 8005c9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c9c:	e00f      	b.n	8005cbe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f9a0 	bl	8005fe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca4:	e00b      	b.n	8005cbe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f99c 	bl	8005fe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cac:	e007      	b.n	8005cbe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f998 	bl	8005fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005cbc:	e17e      	b.n	8005fbc <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cbe:	bf00      	nop
    return;
 8005cc0:	e17c      	b.n	8005fbc <HAL_UART_IRQHandler+0x590>
 8005cc2:	bf00      	nop
 8005cc4:	04000120 	.word	0x04000120
 8005cc8:	08006a6d 	.word	0x08006a6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	f040 814c 	bne.w	8005f6e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cda:	f003 0310 	and.w	r3, r3, #16
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 8145 	beq.w	8005f6e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ce8:	f003 0310 	and.w	r3, r3, #16
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 813e 	beq.w	8005f6e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2210      	movs	r2, #16
 8005cf8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d04:	2b40      	cmp	r3, #64	; 0x40
 8005d06:	f040 80b6 	bne.w	8005e76 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d16:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f000 8150 	beq.w	8005fc0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	f080 8148 	bcs.w	8005fc0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d44:	f000 8086 	beq.w	8005e54 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d54:	e853 3f00 	ldrex	r3, [r3]
 8005d58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d76:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d82:	e841 2300 	strex	r3, r2, [r1]
 8005d86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1da      	bne.n	8005d48 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	3308      	adds	r3, #8
 8005d98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d9c:	e853 3f00 	ldrex	r3, [r3]
 8005da0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005da2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005da4:	f023 0301 	bic.w	r3, r3, #1
 8005da8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3308      	adds	r3, #8
 8005db2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005db6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005dba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005dbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005dc2:	e841 2300 	strex	r3, r2, [r1]
 8005dc6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1e1      	bne.n	8005d92 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3308      	adds	r3, #8
 8005dd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dd8:	e853 3f00 	ldrex	r3, [r3]
 8005ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005dde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005de0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005de4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3308      	adds	r3, #8
 8005dee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005df2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005df4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005df8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005dfa:	e841 2300 	strex	r3, r2, [r1]
 8005dfe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1e3      	bne.n	8005dce <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e1c:	e853 3f00 	ldrex	r3, [r3]
 8005e20:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e24:	f023 0310 	bic.w	r3, r3, #16
 8005e28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	461a      	mov	r2, r3
 8005e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e36:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e38:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e3e:	e841 2300 	strex	r3, r2, [r1]
 8005e42:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1e4      	bne.n	8005e14 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fc fb65 	bl	800251e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f8c2 	bl	8005ff8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e74:	e0a4      	b.n	8005fc0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 8096 	beq.w	8005fc4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005e98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 8091 	beq.w	8005fc4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eaa:	e853 3f00 	ldrex	r3, [r3]
 8005eae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005eb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ec4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ec6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005eca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ecc:	e841 2300 	strex	r3, r2, [r1]
 8005ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1e4      	bne.n	8005ea2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3308      	adds	r3, #8
 8005ede:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	e853 3f00 	ldrex	r3, [r3]
 8005ee6:	623b      	str	r3, [r7, #32]
   return(result);
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	f023 0301 	bic.w	r3, r3, #1
 8005eee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	3308      	adds	r3, #8
 8005ef8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005efc:	633a      	str	r2, [r7, #48]	; 0x30
 8005efe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f04:	e841 2300 	strex	r3, r2, [r1]
 8005f08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1e3      	bne.n	8005ed8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	e853 3f00 	ldrex	r3, [r3]
 8005f30:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f023 0310 	bic.w	r3, r3, #16
 8005f38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	461a      	mov	r2, r3
 8005f42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f46:	61fb      	str	r3, [r7, #28]
 8005f48:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4a:	69b9      	ldr	r1, [r7, #24]
 8005f4c:	69fa      	ldr	r2, [r7, #28]
 8005f4e:	e841 2300 	strex	r3, r2, [r1]
 8005f52:	617b      	str	r3, [r7, #20]
   return(result);
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1e4      	bne.n	8005f24 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f64:	4619      	mov	r1, r3
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f846 	bl	8005ff8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f6c:	e02a      	b.n	8005fc4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00e      	beq.n	8005f98 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d008      	beq.n	8005f98 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d01c      	beq.n	8005fc8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	4798      	blx	r3
    }
    return;
 8005f96:	e017      	b.n	8005fc8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d012      	beq.n	8005fca <HAL_UART_IRQHandler+0x59e>
 8005fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00c      	beq.n	8005fca <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fe2c 	bl	8006c0e <UART_EndTransmit_IT>
    return;
 8005fb6:	e008      	b.n	8005fca <HAL_UART_IRQHandler+0x59e>
      return;
 8005fb8:	bf00      	nop
 8005fba:	e006      	b.n	8005fca <HAL_UART_IRQHandler+0x59e>
    return;
 8005fbc:	bf00      	nop
 8005fbe:	e004      	b.n	8005fca <HAL_UART_IRQHandler+0x59e>
      return;
 8005fc0:	bf00      	nop
 8005fc2:	e002      	b.n	8005fca <HAL_UART_IRQHandler+0x59e>
      return;
 8005fc4:	bf00      	nop
 8005fc6:	e000      	b.n	8005fca <HAL_UART_IRQHandler+0x59e>
    return;
 8005fc8:	bf00      	nop
  }

}
 8005fca:	37e8      	adds	r7, #232	; 0xe8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	460b      	mov	r3, r1
 8006002:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b088      	sub	sp, #32
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	431a      	orrs	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	4313      	orrs	r3, r2
 8006032:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	4ba6      	ldr	r3, [pc, #664]	; (80062d4 <UART_SetConfig+0x2c4>)
 800603c:	4013      	ands	r3, r2
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6812      	ldr	r2, [r2, #0]
 8006042:	6979      	ldr	r1, [r7, #20]
 8006044:	430b      	orrs	r3, r1
 8006046:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68da      	ldr	r2, [r3, #12]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	4313      	orrs	r3, r2
 800606c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	430a      	orrs	r2, r1
 8006080:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a94      	ldr	r2, [pc, #592]	; (80062d8 <UART_SetConfig+0x2c8>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d120      	bne.n	80060ce <UART_SetConfig+0xbe>
 800608c:	4b93      	ldr	r3, [pc, #588]	; (80062dc <UART_SetConfig+0x2cc>)
 800608e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006092:	f003 0303 	and.w	r3, r3, #3
 8006096:	2b03      	cmp	r3, #3
 8006098:	d816      	bhi.n	80060c8 <UART_SetConfig+0xb8>
 800609a:	a201      	add	r2, pc, #4	; (adr r2, 80060a0 <UART_SetConfig+0x90>)
 800609c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a0:	080060b1 	.word	0x080060b1
 80060a4:	080060bd 	.word	0x080060bd
 80060a8:	080060b7 	.word	0x080060b7
 80060ac:	080060c3 	.word	0x080060c3
 80060b0:	2301      	movs	r3, #1
 80060b2:	77fb      	strb	r3, [r7, #31]
 80060b4:	e150      	b.n	8006358 <UART_SetConfig+0x348>
 80060b6:	2302      	movs	r3, #2
 80060b8:	77fb      	strb	r3, [r7, #31]
 80060ba:	e14d      	b.n	8006358 <UART_SetConfig+0x348>
 80060bc:	2304      	movs	r3, #4
 80060be:	77fb      	strb	r3, [r7, #31]
 80060c0:	e14a      	b.n	8006358 <UART_SetConfig+0x348>
 80060c2:	2308      	movs	r3, #8
 80060c4:	77fb      	strb	r3, [r7, #31]
 80060c6:	e147      	b.n	8006358 <UART_SetConfig+0x348>
 80060c8:	2310      	movs	r3, #16
 80060ca:	77fb      	strb	r3, [r7, #31]
 80060cc:	e144      	b.n	8006358 <UART_SetConfig+0x348>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a83      	ldr	r2, [pc, #524]	; (80062e0 <UART_SetConfig+0x2d0>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d132      	bne.n	800613e <UART_SetConfig+0x12e>
 80060d8:	4b80      	ldr	r3, [pc, #512]	; (80062dc <UART_SetConfig+0x2cc>)
 80060da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060de:	f003 030c 	and.w	r3, r3, #12
 80060e2:	2b0c      	cmp	r3, #12
 80060e4:	d828      	bhi.n	8006138 <UART_SetConfig+0x128>
 80060e6:	a201      	add	r2, pc, #4	; (adr r2, 80060ec <UART_SetConfig+0xdc>)
 80060e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ec:	08006121 	.word	0x08006121
 80060f0:	08006139 	.word	0x08006139
 80060f4:	08006139 	.word	0x08006139
 80060f8:	08006139 	.word	0x08006139
 80060fc:	0800612d 	.word	0x0800612d
 8006100:	08006139 	.word	0x08006139
 8006104:	08006139 	.word	0x08006139
 8006108:	08006139 	.word	0x08006139
 800610c:	08006127 	.word	0x08006127
 8006110:	08006139 	.word	0x08006139
 8006114:	08006139 	.word	0x08006139
 8006118:	08006139 	.word	0x08006139
 800611c:	08006133 	.word	0x08006133
 8006120:	2300      	movs	r3, #0
 8006122:	77fb      	strb	r3, [r7, #31]
 8006124:	e118      	b.n	8006358 <UART_SetConfig+0x348>
 8006126:	2302      	movs	r3, #2
 8006128:	77fb      	strb	r3, [r7, #31]
 800612a:	e115      	b.n	8006358 <UART_SetConfig+0x348>
 800612c:	2304      	movs	r3, #4
 800612e:	77fb      	strb	r3, [r7, #31]
 8006130:	e112      	b.n	8006358 <UART_SetConfig+0x348>
 8006132:	2308      	movs	r3, #8
 8006134:	77fb      	strb	r3, [r7, #31]
 8006136:	e10f      	b.n	8006358 <UART_SetConfig+0x348>
 8006138:	2310      	movs	r3, #16
 800613a:	77fb      	strb	r3, [r7, #31]
 800613c:	e10c      	b.n	8006358 <UART_SetConfig+0x348>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a68      	ldr	r2, [pc, #416]	; (80062e4 <UART_SetConfig+0x2d4>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d120      	bne.n	800618a <UART_SetConfig+0x17a>
 8006148:	4b64      	ldr	r3, [pc, #400]	; (80062dc <UART_SetConfig+0x2cc>)
 800614a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800614e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006152:	2b30      	cmp	r3, #48	; 0x30
 8006154:	d013      	beq.n	800617e <UART_SetConfig+0x16e>
 8006156:	2b30      	cmp	r3, #48	; 0x30
 8006158:	d814      	bhi.n	8006184 <UART_SetConfig+0x174>
 800615a:	2b20      	cmp	r3, #32
 800615c:	d009      	beq.n	8006172 <UART_SetConfig+0x162>
 800615e:	2b20      	cmp	r3, #32
 8006160:	d810      	bhi.n	8006184 <UART_SetConfig+0x174>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d002      	beq.n	800616c <UART_SetConfig+0x15c>
 8006166:	2b10      	cmp	r3, #16
 8006168:	d006      	beq.n	8006178 <UART_SetConfig+0x168>
 800616a:	e00b      	b.n	8006184 <UART_SetConfig+0x174>
 800616c:	2300      	movs	r3, #0
 800616e:	77fb      	strb	r3, [r7, #31]
 8006170:	e0f2      	b.n	8006358 <UART_SetConfig+0x348>
 8006172:	2302      	movs	r3, #2
 8006174:	77fb      	strb	r3, [r7, #31]
 8006176:	e0ef      	b.n	8006358 <UART_SetConfig+0x348>
 8006178:	2304      	movs	r3, #4
 800617a:	77fb      	strb	r3, [r7, #31]
 800617c:	e0ec      	b.n	8006358 <UART_SetConfig+0x348>
 800617e:	2308      	movs	r3, #8
 8006180:	77fb      	strb	r3, [r7, #31]
 8006182:	e0e9      	b.n	8006358 <UART_SetConfig+0x348>
 8006184:	2310      	movs	r3, #16
 8006186:	77fb      	strb	r3, [r7, #31]
 8006188:	e0e6      	b.n	8006358 <UART_SetConfig+0x348>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a56      	ldr	r2, [pc, #344]	; (80062e8 <UART_SetConfig+0x2d8>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d120      	bne.n	80061d6 <UART_SetConfig+0x1c6>
 8006194:	4b51      	ldr	r3, [pc, #324]	; (80062dc <UART_SetConfig+0x2cc>)
 8006196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800619a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800619e:	2bc0      	cmp	r3, #192	; 0xc0
 80061a0:	d013      	beq.n	80061ca <UART_SetConfig+0x1ba>
 80061a2:	2bc0      	cmp	r3, #192	; 0xc0
 80061a4:	d814      	bhi.n	80061d0 <UART_SetConfig+0x1c0>
 80061a6:	2b80      	cmp	r3, #128	; 0x80
 80061a8:	d009      	beq.n	80061be <UART_SetConfig+0x1ae>
 80061aa:	2b80      	cmp	r3, #128	; 0x80
 80061ac:	d810      	bhi.n	80061d0 <UART_SetConfig+0x1c0>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <UART_SetConfig+0x1a8>
 80061b2:	2b40      	cmp	r3, #64	; 0x40
 80061b4:	d006      	beq.n	80061c4 <UART_SetConfig+0x1b4>
 80061b6:	e00b      	b.n	80061d0 <UART_SetConfig+0x1c0>
 80061b8:	2300      	movs	r3, #0
 80061ba:	77fb      	strb	r3, [r7, #31]
 80061bc:	e0cc      	b.n	8006358 <UART_SetConfig+0x348>
 80061be:	2302      	movs	r3, #2
 80061c0:	77fb      	strb	r3, [r7, #31]
 80061c2:	e0c9      	b.n	8006358 <UART_SetConfig+0x348>
 80061c4:	2304      	movs	r3, #4
 80061c6:	77fb      	strb	r3, [r7, #31]
 80061c8:	e0c6      	b.n	8006358 <UART_SetConfig+0x348>
 80061ca:	2308      	movs	r3, #8
 80061cc:	77fb      	strb	r3, [r7, #31]
 80061ce:	e0c3      	b.n	8006358 <UART_SetConfig+0x348>
 80061d0:	2310      	movs	r3, #16
 80061d2:	77fb      	strb	r3, [r7, #31]
 80061d4:	e0c0      	b.n	8006358 <UART_SetConfig+0x348>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a44      	ldr	r2, [pc, #272]	; (80062ec <UART_SetConfig+0x2dc>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d125      	bne.n	800622c <UART_SetConfig+0x21c>
 80061e0:	4b3e      	ldr	r3, [pc, #248]	; (80062dc <UART_SetConfig+0x2cc>)
 80061e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061ee:	d017      	beq.n	8006220 <UART_SetConfig+0x210>
 80061f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061f4:	d817      	bhi.n	8006226 <UART_SetConfig+0x216>
 80061f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061fa:	d00b      	beq.n	8006214 <UART_SetConfig+0x204>
 80061fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006200:	d811      	bhi.n	8006226 <UART_SetConfig+0x216>
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <UART_SetConfig+0x1fe>
 8006206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800620a:	d006      	beq.n	800621a <UART_SetConfig+0x20a>
 800620c:	e00b      	b.n	8006226 <UART_SetConfig+0x216>
 800620e:	2300      	movs	r3, #0
 8006210:	77fb      	strb	r3, [r7, #31]
 8006212:	e0a1      	b.n	8006358 <UART_SetConfig+0x348>
 8006214:	2302      	movs	r3, #2
 8006216:	77fb      	strb	r3, [r7, #31]
 8006218:	e09e      	b.n	8006358 <UART_SetConfig+0x348>
 800621a:	2304      	movs	r3, #4
 800621c:	77fb      	strb	r3, [r7, #31]
 800621e:	e09b      	b.n	8006358 <UART_SetConfig+0x348>
 8006220:	2308      	movs	r3, #8
 8006222:	77fb      	strb	r3, [r7, #31]
 8006224:	e098      	b.n	8006358 <UART_SetConfig+0x348>
 8006226:	2310      	movs	r3, #16
 8006228:	77fb      	strb	r3, [r7, #31]
 800622a:	e095      	b.n	8006358 <UART_SetConfig+0x348>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a2f      	ldr	r2, [pc, #188]	; (80062f0 <UART_SetConfig+0x2e0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d125      	bne.n	8006282 <UART_SetConfig+0x272>
 8006236:	4b29      	ldr	r3, [pc, #164]	; (80062dc <UART_SetConfig+0x2cc>)
 8006238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800623c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006240:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006244:	d017      	beq.n	8006276 <UART_SetConfig+0x266>
 8006246:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800624a:	d817      	bhi.n	800627c <UART_SetConfig+0x26c>
 800624c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006250:	d00b      	beq.n	800626a <UART_SetConfig+0x25a>
 8006252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006256:	d811      	bhi.n	800627c <UART_SetConfig+0x26c>
 8006258:	2b00      	cmp	r3, #0
 800625a:	d003      	beq.n	8006264 <UART_SetConfig+0x254>
 800625c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006260:	d006      	beq.n	8006270 <UART_SetConfig+0x260>
 8006262:	e00b      	b.n	800627c <UART_SetConfig+0x26c>
 8006264:	2301      	movs	r3, #1
 8006266:	77fb      	strb	r3, [r7, #31]
 8006268:	e076      	b.n	8006358 <UART_SetConfig+0x348>
 800626a:	2302      	movs	r3, #2
 800626c:	77fb      	strb	r3, [r7, #31]
 800626e:	e073      	b.n	8006358 <UART_SetConfig+0x348>
 8006270:	2304      	movs	r3, #4
 8006272:	77fb      	strb	r3, [r7, #31]
 8006274:	e070      	b.n	8006358 <UART_SetConfig+0x348>
 8006276:	2308      	movs	r3, #8
 8006278:	77fb      	strb	r3, [r7, #31]
 800627a:	e06d      	b.n	8006358 <UART_SetConfig+0x348>
 800627c:	2310      	movs	r3, #16
 800627e:	77fb      	strb	r3, [r7, #31]
 8006280:	e06a      	b.n	8006358 <UART_SetConfig+0x348>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a1b      	ldr	r2, [pc, #108]	; (80062f4 <UART_SetConfig+0x2e4>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d138      	bne.n	80062fe <UART_SetConfig+0x2ee>
 800628c:	4b13      	ldr	r3, [pc, #76]	; (80062dc <UART_SetConfig+0x2cc>)
 800628e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006292:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006296:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800629a:	d017      	beq.n	80062cc <UART_SetConfig+0x2bc>
 800629c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062a0:	d82a      	bhi.n	80062f8 <UART_SetConfig+0x2e8>
 80062a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062a6:	d00b      	beq.n	80062c0 <UART_SetConfig+0x2b0>
 80062a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ac:	d824      	bhi.n	80062f8 <UART_SetConfig+0x2e8>
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <UART_SetConfig+0x2aa>
 80062b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b6:	d006      	beq.n	80062c6 <UART_SetConfig+0x2b6>
 80062b8:	e01e      	b.n	80062f8 <UART_SetConfig+0x2e8>
 80062ba:	2300      	movs	r3, #0
 80062bc:	77fb      	strb	r3, [r7, #31]
 80062be:	e04b      	b.n	8006358 <UART_SetConfig+0x348>
 80062c0:	2302      	movs	r3, #2
 80062c2:	77fb      	strb	r3, [r7, #31]
 80062c4:	e048      	b.n	8006358 <UART_SetConfig+0x348>
 80062c6:	2304      	movs	r3, #4
 80062c8:	77fb      	strb	r3, [r7, #31]
 80062ca:	e045      	b.n	8006358 <UART_SetConfig+0x348>
 80062cc:	2308      	movs	r3, #8
 80062ce:	77fb      	strb	r3, [r7, #31]
 80062d0:	e042      	b.n	8006358 <UART_SetConfig+0x348>
 80062d2:	bf00      	nop
 80062d4:	efff69f3 	.word	0xefff69f3
 80062d8:	40011000 	.word	0x40011000
 80062dc:	40023800 	.word	0x40023800
 80062e0:	40004400 	.word	0x40004400
 80062e4:	40004800 	.word	0x40004800
 80062e8:	40004c00 	.word	0x40004c00
 80062ec:	40005000 	.word	0x40005000
 80062f0:	40011400 	.word	0x40011400
 80062f4:	40007800 	.word	0x40007800
 80062f8:	2310      	movs	r3, #16
 80062fa:	77fb      	strb	r3, [r7, #31]
 80062fc:	e02c      	b.n	8006358 <UART_SetConfig+0x348>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a72      	ldr	r2, [pc, #456]	; (80064cc <UART_SetConfig+0x4bc>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d125      	bne.n	8006354 <UART_SetConfig+0x344>
 8006308:	4b71      	ldr	r3, [pc, #452]	; (80064d0 <UART_SetConfig+0x4c0>)
 800630a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006312:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006316:	d017      	beq.n	8006348 <UART_SetConfig+0x338>
 8006318:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800631c:	d817      	bhi.n	800634e <UART_SetConfig+0x33e>
 800631e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006322:	d00b      	beq.n	800633c <UART_SetConfig+0x32c>
 8006324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006328:	d811      	bhi.n	800634e <UART_SetConfig+0x33e>
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <UART_SetConfig+0x326>
 800632e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006332:	d006      	beq.n	8006342 <UART_SetConfig+0x332>
 8006334:	e00b      	b.n	800634e <UART_SetConfig+0x33e>
 8006336:	2300      	movs	r3, #0
 8006338:	77fb      	strb	r3, [r7, #31]
 800633a:	e00d      	b.n	8006358 <UART_SetConfig+0x348>
 800633c:	2302      	movs	r3, #2
 800633e:	77fb      	strb	r3, [r7, #31]
 8006340:	e00a      	b.n	8006358 <UART_SetConfig+0x348>
 8006342:	2304      	movs	r3, #4
 8006344:	77fb      	strb	r3, [r7, #31]
 8006346:	e007      	b.n	8006358 <UART_SetConfig+0x348>
 8006348:	2308      	movs	r3, #8
 800634a:	77fb      	strb	r3, [r7, #31]
 800634c:	e004      	b.n	8006358 <UART_SetConfig+0x348>
 800634e:	2310      	movs	r3, #16
 8006350:	77fb      	strb	r3, [r7, #31]
 8006352:	e001      	b.n	8006358 <UART_SetConfig+0x348>
 8006354:	2310      	movs	r3, #16
 8006356:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	69db      	ldr	r3, [r3, #28]
 800635c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006360:	d15b      	bne.n	800641a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006362:	7ffb      	ldrb	r3, [r7, #31]
 8006364:	2b08      	cmp	r3, #8
 8006366:	d828      	bhi.n	80063ba <UART_SetConfig+0x3aa>
 8006368:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <UART_SetConfig+0x360>)
 800636a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636e:	bf00      	nop
 8006370:	08006395 	.word	0x08006395
 8006374:	0800639d 	.word	0x0800639d
 8006378:	080063a5 	.word	0x080063a5
 800637c:	080063bb 	.word	0x080063bb
 8006380:	080063ab 	.word	0x080063ab
 8006384:	080063bb 	.word	0x080063bb
 8006388:	080063bb 	.word	0x080063bb
 800638c:	080063bb 	.word	0x080063bb
 8006390:	080063b3 	.word	0x080063b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006394:	f7fd f916 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 8006398:	61b8      	str	r0, [r7, #24]
        break;
 800639a:	e013      	b.n	80063c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800639c:	f7fd f926 	bl	80035ec <HAL_RCC_GetPCLK2Freq>
 80063a0:	61b8      	str	r0, [r7, #24]
        break;
 80063a2:	e00f      	b.n	80063c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063a4:	4b4b      	ldr	r3, [pc, #300]	; (80064d4 <UART_SetConfig+0x4c4>)
 80063a6:	61bb      	str	r3, [r7, #24]
        break;
 80063a8:	e00c      	b.n	80063c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063aa:	f7fc fff9 	bl	80033a0 <HAL_RCC_GetSysClockFreq>
 80063ae:	61b8      	str	r0, [r7, #24]
        break;
 80063b0:	e008      	b.n	80063c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063b6:	61bb      	str	r3, [r7, #24]
        break;
 80063b8:	e004      	b.n	80063c4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	77bb      	strb	r3, [r7, #30]
        break;
 80063c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d074      	beq.n	80064b4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	005a      	lsls	r2, r3, #1
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	085b      	lsrs	r3, r3, #1
 80063d4:	441a      	add	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	fbb2 f3f3 	udiv	r3, r2, r3
 80063de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	2b0f      	cmp	r3, #15
 80063e4:	d916      	bls.n	8006414 <UART_SetConfig+0x404>
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ec:	d212      	bcs.n	8006414 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	f023 030f 	bic.w	r3, r3, #15
 80063f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	085b      	lsrs	r3, r3, #1
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	f003 0307 	and.w	r3, r3, #7
 8006402:	b29a      	uxth	r2, r3
 8006404:	89fb      	ldrh	r3, [r7, #14]
 8006406:	4313      	orrs	r3, r2
 8006408:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	89fa      	ldrh	r2, [r7, #14]
 8006410:	60da      	str	r2, [r3, #12]
 8006412:	e04f      	b.n	80064b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	77bb      	strb	r3, [r7, #30]
 8006418:	e04c      	b.n	80064b4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800641a:	7ffb      	ldrb	r3, [r7, #31]
 800641c:	2b08      	cmp	r3, #8
 800641e:	d828      	bhi.n	8006472 <UART_SetConfig+0x462>
 8006420:	a201      	add	r2, pc, #4	; (adr r2, 8006428 <UART_SetConfig+0x418>)
 8006422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006426:	bf00      	nop
 8006428:	0800644d 	.word	0x0800644d
 800642c:	08006455 	.word	0x08006455
 8006430:	0800645d 	.word	0x0800645d
 8006434:	08006473 	.word	0x08006473
 8006438:	08006463 	.word	0x08006463
 800643c:	08006473 	.word	0x08006473
 8006440:	08006473 	.word	0x08006473
 8006444:	08006473 	.word	0x08006473
 8006448:	0800646b 	.word	0x0800646b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800644c:	f7fd f8ba 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 8006450:	61b8      	str	r0, [r7, #24]
        break;
 8006452:	e013      	b.n	800647c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006454:	f7fd f8ca 	bl	80035ec <HAL_RCC_GetPCLK2Freq>
 8006458:	61b8      	str	r0, [r7, #24]
        break;
 800645a:	e00f      	b.n	800647c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800645c:	4b1d      	ldr	r3, [pc, #116]	; (80064d4 <UART_SetConfig+0x4c4>)
 800645e:	61bb      	str	r3, [r7, #24]
        break;
 8006460:	e00c      	b.n	800647c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006462:	f7fc ff9d 	bl	80033a0 <HAL_RCC_GetSysClockFreq>
 8006466:	61b8      	str	r0, [r7, #24]
        break;
 8006468:	e008      	b.n	800647c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800646a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800646e:	61bb      	str	r3, [r7, #24]
        break;
 8006470:	e004      	b.n	800647c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	77bb      	strb	r3, [r7, #30]
        break;
 800647a:	bf00      	nop
    }

    if (pclk != 0U)
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d018      	beq.n	80064b4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	085a      	lsrs	r2, r3, #1
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	441a      	add	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	fbb2 f3f3 	udiv	r3, r2, r3
 8006494:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	2b0f      	cmp	r3, #15
 800649a:	d909      	bls.n	80064b0 <UART_SetConfig+0x4a0>
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a2:	d205      	bcs.n	80064b0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	60da      	str	r2, [r3, #12]
 80064ae:	e001      	b.n	80064b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80064c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3720      	adds	r7, #32
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	40007c00 	.word	0x40007c00
 80064d0:	40023800 	.word	0x40023800
 80064d4:	00f42400 	.word	0x00f42400

080064d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00a      	beq.n	8006502 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00a      	beq.n	8006546 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	f003 0308 	and.w	r3, r3, #8
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656c:	f003 0310 	and.w	r3, r3, #16
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00a      	beq.n	800658a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	430a      	orrs	r2, r1
 80065aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d01a      	beq.n	80065ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065d6:	d10a      	bne.n	80065ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00a      	beq.n	8006610 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	430a      	orrs	r2, r1
 800660e:	605a      	str	r2, [r3, #4]
  }
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af02      	add	r7, sp, #8
 8006622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800662c:	f7fb fe36 	bl	800229c <HAL_GetTick>
 8006630:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	2b08      	cmp	r3, #8
 800663e:	d10e      	bne.n	800665e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006640:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f81b 	bl	800668a <UART_WaitOnFlagUntilTimeout>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e011      	b.n	8006682 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2220      	movs	r2, #32
 8006662:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2220      	movs	r2, #32
 8006668:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b09c      	sub	sp, #112	; 0x70
 800668e:	af00      	add	r7, sp, #0
 8006690:	60f8      	str	r0, [r7, #12]
 8006692:	60b9      	str	r1, [r7, #8]
 8006694:	603b      	str	r3, [r7, #0]
 8006696:	4613      	mov	r3, r2
 8006698:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800669a:	e0a7      	b.n	80067ec <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800669c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800669e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a2:	f000 80a3 	beq.w	80067ec <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a6:	f7fb fdf9 	bl	800229c <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d302      	bcc.n	80066bc <UART_WaitOnFlagUntilTimeout+0x32>
 80066b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d13f      	bne.n	800673c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c4:	e853 3f00 	ldrex	r3, [r3]
 80066c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80066ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066d0:	667b      	str	r3, [r7, #100]	; 0x64
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	461a      	mov	r2, r3
 80066d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066dc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80066e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80066e2:	e841 2300 	strex	r3, r2, [r1]
 80066e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80066e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1e6      	bne.n	80066bc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3308      	adds	r3, #8
 80066f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f8:	e853 3f00 	ldrex	r3, [r3]
 80066fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006700:	f023 0301 	bic.w	r3, r3, #1
 8006704:	663b      	str	r3, [r7, #96]	; 0x60
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3308      	adds	r3, #8
 800670c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800670e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006710:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006712:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006714:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800671c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e5      	bne.n	80066ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2220      	movs	r2, #32
 8006726:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2220      	movs	r2, #32
 800672c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e068      	b.n	800680e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0304 	and.w	r3, r3, #4
 8006746:	2b00      	cmp	r3, #0
 8006748:	d050      	beq.n	80067ec <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006758:	d148      	bne.n	80067ec <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006762:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676c:	e853 3f00 	ldrex	r3, [r3]
 8006770:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006778:	66fb      	str	r3, [r7, #108]	; 0x6c
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	461a      	mov	r2, r3
 8006780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006782:	637b      	str	r3, [r7, #52]	; 0x34
 8006784:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006786:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800678a:	e841 2300 	strex	r3, r2, [r1]
 800678e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1e6      	bne.n	8006764 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3308      	adds	r3, #8
 800679c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	e853 3f00 	ldrex	r3, [r3]
 80067a4:	613b      	str	r3, [r7, #16]
   return(result);
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f023 0301 	bic.w	r3, r3, #1
 80067ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	3308      	adds	r3, #8
 80067b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80067b6:	623a      	str	r2, [r7, #32]
 80067b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ba:	69f9      	ldr	r1, [r7, #28]
 80067bc:	6a3a      	ldr	r2, [r7, #32]
 80067be:	e841 2300 	strex	r3, r2, [r1]
 80067c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1e5      	bne.n	8006796 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2220      	movs	r2, #32
 80067ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2220      	movs	r2, #32
 80067d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2220      	movs	r2, #32
 80067dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e010      	b.n	800680e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	69da      	ldr	r2, [r3, #28]
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	4013      	ands	r3, r2
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	bf0c      	ite	eq
 80067fc:	2301      	moveq	r3, #1
 80067fe:	2300      	movne	r3, #0
 8006800:	b2db      	uxtb	r3, r3
 8006802:	461a      	mov	r2, r3
 8006804:	79fb      	ldrb	r3, [r7, #7]
 8006806:	429a      	cmp	r2, r3
 8006808:	f43f af48 	beq.w	800669c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3770      	adds	r7, #112	; 0x70
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
	...

08006818 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006818:	b480      	push	{r7}
 800681a:	b097      	sub	sp, #92	; 0x5c
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	4613      	mov	r3, r2
 8006824:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	88fa      	ldrh	r2, [r7, #6]
 8006830:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	88fa      	ldrh	r2, [r7, #6]
 8006838:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800684a:	d10e      	bne.n	800686a <UART_Start_Receive_IT+0x52>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d105      	bne.n	8006860 <UART_Start_Receive_IT+0x48>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f240 12ff 	movw	r2, #511	; 0x1ff
 800685a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800685e:	e02d      	b.n	80068bc <UART_Start_Receive_IT+0xa4>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	22ff      	movs	r2, #255	; 0xff
 8006864:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006868:	e028      	b.n	80068bc <UART_Start_Receive_IT+0xa4>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10d      	bne.n	800688e <UART_Start_Receive_IT+0x76>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d104      	bne.n	8006884 <UART_Start_Receive_IT+0x6c>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	22ff      	movs	r2, #255	; 0xff
 800687e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006882:	e01b      	b.n	80068bc <UART_Start_Receive_IT+0xa4>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	227f      	movs	r2, #127	; 0x7f
 8006888:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800688c:	e016      	b.n	80068bc <UART_Start_Receive_IT+0xa4>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006896:	d10d      	bne.n	80068b4 <UART_Start_Receive_IT+0x9c>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d104      	bne.n	80068aa <UART_Start_Receive_IT+0x92>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	227f      	movs	r2, #127	; 0x7f
 80068a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068a8:	e008      	b.n	80068bc <UART_Start_Receive_IT+0xa4>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	223f      	movs	r2, #63	; 0x3f
 80068ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068b2:	e003      	b.n	80068bc <UART_Start_Receive_IT+0xa4>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2222      	movs	r2, #34	; 0x22
 80068c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	3308      	adds	r3, #8
 80068d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d6:	e853 3f00 	ldrex	r3, [r3]
 80068da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068de:	f043 0301 	orr.w	r3, r3, #1
 80068e2:	657b      	str	r3, [r7, #84]	; 0x54
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3308      	adds	r3, #8
 80068ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80068ec:	64ba      	str	r2, [r7, #72]	; 0x48
 80068ee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068f4:	e841 2300 	strex	r3, r2, [r1]
 80068f8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1e5      	bne.n	80068cc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006908:	d107      	bne.n	800691a <UART_Start_Receive_IT+0x102>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d103      	bne.n	800691a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	4a21      	ldr	r2, [pc, #132]	; (800699c <UART_Start_Receive_IT+0x184>)
 8006916:	669a      	str	r2, [r3, #104]	; 0x68
 8006918:	e002      	b.n	8006920 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4a20      	ldr	r2, [pc, #128]	; (80069a0 <UART_Start_Receive_IT+0x188>)
 800691e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d019      	beq.n	800695c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006938:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800693c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006946:	637b      	str	r3, [r7, #52]	; 0x34
 8006948:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800694c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e6      	bne.n	8006928 <UART_Start_Receive_IT+0x110>
 800695a:	e018      	b.n	800698e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	e853 3f00 	ldrex	r3, [r3]
 8006968:	613b      	str	r3, [r7, #16]
   return(result);
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f043 0320 	orr.w	r3, r3, #32
 8006970:	653b      	str	r3, [r7, #80]	; 0x50
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800697a:	623b      	str	r3, [r7, #32]
 800697c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697e:	69f9      	ldr	r1, [r7, #28]
 8006980:	6a3a      	ldr	r2, [r7, #32]
 8006982:	e841 2300 	strex	r3, r2, [r1]
 8006986:	61bb      	str	r3, [r7, #24]
   return(result);
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1e6      	bne.n	800695c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	375c      	adds	r7, #92	; 0x5c
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	08006dc9 	.word	0x08006dc9
 80069a0:	08006c63 	.word	0x08006c63

080069a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b095      	sub	sp, #84	; 0x54
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b4:	e853 3f00 	ldrex	r3, [r3]
 80069b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	461a      	mov	r2, r3
 80069c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ca:	643b      	str	r3, [r7, #64]	; 0x40
 80069cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069d2:	e841 2300 	strex	r3, r2, [r1]
 80069d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1e6      	bne.n	80069ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3308      	adds	r3, #8
 80069e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	f023 0301 	bic.w	r3, r3, #1
 80069f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3308      	adds	r3, #8
 80069fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e5      	bne.n	80069de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d118      	bne.n	8006a4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	e853 3f00 	ldrex	r3, [r3]
 8006a26:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f023 0310 	bic.w	r3, r3, #16
 8006a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	461a      	mov	r2, r3
 8006a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a38:	61bb      	str	r3, [r7, #24]
 8006a3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3c:	6979      	ldr	r1, [r7, #20]
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	e841 2300 	strex	r3, r2, [r1]
 8006a44:	613b      	str	r3, [r7, #16]
   return(result);
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1e6      	bne.n	8006a1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006a60:	bf00      	nop
 8006a62:	3754      	adds	r7, #84	; 0x54
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f7ff faaa 	bl	8005fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a90:	bf00      	nop
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b08f      	sub	sp, #60	; 0x3c
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006aa4:	2b21      	cmp	r3, #33	; 0x21
 8006aa6:	d14c      	bne.n	8006b42 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d132      	bne.n	8006b1a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	e853 3f00 	ldrex	r3, [r3]
 8006ac0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ad4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ada:	e841 2300 	strex	r3, r2, [r1]
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1e6      	bne.n	8006ab4 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	e853 3f00 	ldrex	r3, [r3]
 8006af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006afa:	633b      	str	r3, [r7, #48]	; 0x30
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	461a      	mov	r2, r3
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	61bb      	str	r3, [r7, #24]
 8006b06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b08:	6979      	ldr	r1, [r7, #20]
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	e841 2300 	strex	r3, r2, [r1]
 8006b10:	613b      	str	r3, [r7, #16]
   return(result);
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1e6      	bne.n	8006ae6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006b18:	e013      	b.n	8006b42 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b1e:	781a      	ldrb	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b2a:	1c5a      	adds	r2, r3, #1
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006b42:	bf00      	nop
 8006b44:	373c      	adds	r7, #60	; 0x3c
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b091      	sub	sp, #68	; 0x44
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b5a:	2b21      	cmp	r3, #33	; 0x21
 8006b5c:	d151      	bne.n	8006c02 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d132      	bne.n	8006bd0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	e853 3f00 	ldrex	r3, [r3]
 8006b76:	623b      	str	r3, [r7, #32]
   return(result);
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	461a      	mov	r2, r3
 8006b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b88:	633b      	str	r3, [r7, #48]	; 0x30
 8006b8a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b90:	e841 2300 	strex	r3, r2, [r1]
 8006b94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1e6      	bne.n	8006b6a <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	e853 3f00 	ldrex	r3, [r3]
 8006ba8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bba:	61fb      	str	r3, [r7, #28]
 8006bbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbe:	69b9      	ldr	r1, [r7, #24]
 8006bc0:	69fa      	ldr	r2, [r7, #28]
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	617b      	str	r3, [r7, #20]
   return(result);
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e6      	bne.n	8006b9c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006bce:	e018      	b.n	8006c02 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006be4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bea:	1c9a      	adds	r2, r3, #2
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006c02:	bf00      	nop
 8006c04:	3744      	adds	r7, #68	; 0x44
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b088      	sub	sp, #32
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	e853 3f00 	ldrex	r3, [r3]
 8006c22:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c2a:	61fb      	str	r3, [r7, #28]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	461a      	mov	r2, r3
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	61bb      	str	r3, [r7, #24]
 8006c36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	6979      	ldr	r1, [r7, #20]
 8006c3a:	69ba      	ldr	r2, [r7, #24]
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	613b      	str	r3, [r7, #16]
   return(result);
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e6      	bne.n	8006c16 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7ff f9bb 	bl	8005fd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c5a:	bf00      	nop
 8006c5c:	3720      	adds	r7, #32
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b096      	sub	sp, #88	; 0x58
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c7a:	2b22      	cmp	r3, #34	; 0x22
 8006c7c:	f040 8098 	bne.w	8006db0 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c8a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006c8e:	b2d9      	uxtb	r1, r3
 8006c90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9a:	400a      	ands	r2, r1
 8006c9c:	b2d2      	uxtb	r2, r2
 8006c9e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca4:	1c5a      	adds	r2, r3, #1
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d17b      	bne.n	8006dc0 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd0:	e853 3f00 	ldrex	r3, [r3]
 8006cd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cdc:	653b      	str	r3, [r7, #80]	; 0x50
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ce6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ce8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cee:	e841 2300 	strex	r3, r2, [r1]
 8006cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e6      	bne.n	8006cc8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3308      	adds	r3, #8
 8006d00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	e853 3f00 	ldrex	r3, [r3]
 8006d08:	623b      	str	r3, [r7, #32]
   return(result);
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	f023 0301 	bic.w	r3, r3, #1
 8006d10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3308      	adds	r3, #8
 8006d18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d1a:	633a      	str	r2, [r7, #48]	; 0x30
 8006d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d22:	e841 2300 	strex	r3, r2, [r1]
 8006d26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1e5      	bne.n	8006cfa <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2220      	movs	r2, #32
 8006d32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d12e      	bne.n	8006da8 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	e853 3f00 	ldrex	r3, [r3]
 8006d5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f023 0310 	bic.w	r3, r3, #16
 8006d64:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d6e:	61fb      	str	r3, [r7, #28]
 8006d70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d72:	69b9      	ldr	r1, [r7, #24]
 8006d74:	69fa      	ldr	r2, [r7, #28]
 8006d76:	e841 2300 	strex	r3, r2, [r1]
 8006d7a:	617b      	str	r3, [r7, #20]
   return(result);
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1e6      	bne.n	8006d50 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	69db      	ldr	r3, [r3, #28]
 8006d88:	f003 0310 	and.w	r3, r3, #16
 8006d8c:	2b10      	cmp	r3, #16
 8006d8e:	d103      	bne.n	8006d98 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2210      	movs	r2, #16
 8006d96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f7ff f929 	bl	8005ff8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006da6:	e00b      	b.n	8006dc0 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7fa f89f 	bl	8000eec <HAL_UART_RxCpltCallback>
}
 8006dae:	e007      	b.n	8006dc0 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	699a      	ldr	r2, [r3, #24]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f042 0208 	orr.w	r2, r2, #8
 8006dbe:	619a      	str	r2, [r3, #24]
}
 8006dc0:	bf00      	nop
 8006dc2:	3758      	adds	r7, #88	; 0x58
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b096      	sub	sp, #88	; 0x58
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006dd6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006de0:	2b22      	cmp	r3, #34	; 0x22
 8006de2:	f040 8098 	bne.w	8006f16 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006df6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006dfa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006dfe:	4013      	ands	r3, r2
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e04:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0a:	1c9a      	adds	r2, r3, #2
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d17b      	bne.n	8006f26 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e36:	e853 3f00 	ldrex	r3, [r3]
 8006e3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e4c:	643b      	str	r3, [r7, #64]	; 0x40
 8006e4e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e54:	e841 2300 	strex	r3, r2, [r1]
 8006e58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1e6      	bne.n	8006e2e <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3308      	adds	r3, #8
 8006e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	e853 3f00 	ldrex	r3, [r3]
 8006e6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	f023 0301 	bic.w	r3, r3, #1
 8006e76:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3308      	adds	r3, #8
 8006e7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e88:	e841 2300 	strex	r3, r2, [r1]
 8006e8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1e5      	bne.n	8006e60 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2220      	movs	r2, #32
 8006e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d12e      	bne.n	8006f0e <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	e853 3f00 	ldrex	r3, [r3]
 8006ec2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	f023 0310 	bic.w	r3, r3, #16
 8006eca:	647b      	str	r3, [r7, #68]	; 0x44
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ed4:	61bb      	str	r3, [r7, #24]
 8006ed6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed8:	6979      	ldr	r1, [r7, #20]
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	e841 2300 	strex	r3, r2, [r1]
 8006ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1e6      	bne.n	8006eb6 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	f003 0310 	and.w	r3, r3, #16
 8006ef2:	2b10      	cmp	r3, #16
 8006ef4:	d103      	bne.n	8006efe <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2210      	movs	r2, #16
 8006efc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f04:	4619      	mov	r1, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7ff f876 	bl	8005ff8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f0c:	e00b      	b.n	8006f26 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7f9 ffec 	bl	8000eec <HAL_UART_RxCpltCallback>
}
 8006f14:	e007      	b.n	8006f26 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	699a      	ldr	r2, [r3, #24]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f042 0208 	orr.w	r2, r2, #8
 8006f24:	619a      	str	r2, [r3, #24]
}
 8006f26:	bf00      	nop
 8006f28:	3758      	adds	r7, #88	; 0x58
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
	...

08006f30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f30:	b084      	sub	sp, #16
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b084      	sub	sp, #16
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	f107 001c 	add.w	r0, r7, #28
 8006f3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d120      	bne.n	8006f8a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	68da      	ldr	r2, [r3, #12]
 8006f58:	4b20      	ldr	r3, [pc, #128]	; (8006fdc <USB_CoreInit+0xac>)
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d105      	bne.n	8006f7e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fa96 	bl	80074b0 <USB_CoreReset>
 8006f84:	4603      	mov	r3, r0
 8006f86:	73fb      	strb	r3, [r7, #15]
 8006f88:	e010      	b.n	8006fac <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fa8a 	bl	80074b0 <USB_CoreReset>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d10b      	bne.n	8006fca <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f043 0206 	orr.w	r2, r3, #6
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f043 0220 	orr.w	r2, r3, #32
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fd6:	b004      	add	sp, #16
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	ffbdffbf 	.word	0xffbdffbf

08006fe0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f023 0201 	bic.w	r2, r3, #1
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b084      	sub	sp, #16
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	460b      	mov	r3, r1
 800700c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800701e:	78fb      	ldrb	r3, [r7, #3]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d115      	bne.n	8007050 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007030:	2001      	movs	r0, #1
 8007032:	f7fb f93f 	bl	80022b4 <HAL_Delay>
      ms++;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	3301      	adds	r3, #1
 800703a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 fa29 	bl	8007494 <USB_GetMode>
 8007042:	4603      	mov	r3, r0
 8007044:	2b01      	cmp	r3, #1
 8007046:	d01e      	beq.n	8007086 <USB_SetCurrentMode+0x84>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b31      	cmp	r3, #49	; 0x31
 800704c:	d9f0      	bls.n	8007030 <USB_SetCurrentMode+0x2e>
 800704e:	e01a      	b.n	8007086 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007050:	78fb      	ldrb	r3, [r7, #3]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d115      	bne.n	8007082 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007062:	2001      	movs	r0, #1
 8007064:	f7fb f926 	bl	80022b4 <HAL_Delay>
      ms++;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	3301      	adds	r3, #1
 800706c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fa10 	bl	8007494 <USB_GetMode>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d005      	beq.n	8007086 <USB_SetCurrentMode+0x84>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2b31      	cmp	r3, #49	; 0x31
 800707e:	d9f0      	bls.n	8007062 <USB_SetCurrentMode+0x60>
 8007080:	e001      	b.n	8007086 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e005      	b.n	8007092 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2b32      	cmp	r3, #50	; 0x32
 800708a:	d101      	bne.n	8007090 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e000      	b.n	8007092 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
	...

0800709c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800709c:	b084      	sub	sp, #16
 800709e:	b580      	push	{r7, lr}
 80070a0:	b086      	sub	sp, #24
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80070aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80070b6:	2300      	movs	r3, #0
 80070b8:	613b      	str	r3, [r7, #16]
 80070ba:	e009      	b.n	80070d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	3340      	adds	r3, #64	; 0x40
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	2200      	movs	r2, #0
 80070c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	3301      	adds	r3, #1
 80070ce:	613b      	str	r3, [r7, #16]
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	2b0e      	cmp	r3, #14
 80070d4:	d9f2      	bls.n	80070bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80070d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d11c      	bne.n	8007116 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070ea:	f043 0302 	orr.w	r3, r3, #2
 80070ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	601a      	str	r2, [r3, #0]
 8007114:	e005      	b.n	8007122 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007128:	461a      	mov	r2, r3
 800712a:	2300      	movs	r3, #0
 800712c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007134:	4619      	mov	r1, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800713c:	461a      	mov	r2, r3
 800713e:	680b      	ldr	r3, [r1, #0]
 8007140:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007144:	2b01      	cmp	r3, #1
 8007146:	d10c      	bne.n	8007162 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714a:	2b00      	cmp	r3, #0
 800714c:	d104      	bne.n	8007158 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800714e:	2100      	movs	r1, #0
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 f965 	bl	8007420 <USB_SetDevSpeed>
 8007156:	e008      	b.n	800716a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007158:	2101      	movs	r1, #1
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f960 	bl	8007420 <USB_SetDevSpeed>
 8007160:	e003      	b.n	800716a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007162:	2103      	movs	r1, #3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f95b 	bl	8007420 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800716a:	2110      	movs	r1, #16
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f8f3 	bl	8007358 <USB_FlushTxFifo>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 f91f 	bl	80073c0 <USB_FlushRxFifo>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d001      	beq.n	800718c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007192:	461a      	mov	r2, r3
 8007194:	2300      	movs	r3, #0
 8007196:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719e:	461a      	mov	r2, r3
 80071a0:	2300      	movs	r3, #0
 80071a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071aa:	461a      	mov	r2, r3
 80071ac:	2300      	movs	r3, #0
 80071ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071b0:	2300      	movs	r3, #0
 80071b2:	613b      	str	r3, [r7, #16]
 80071b4:	e043      	b.n	800723e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	015a      	lsls	r2, r3, #5
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	4413      	add	r3, r2
 80071be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071cc:	d118      	bne.n	8007200 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10a      	bne.n	80071ea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e0:	461a      	mov	r2, r3
 80071e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80071e6:	6013      	str	r3, [r2, #0]
 80071e8:	e013      	b.n	8007212 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	015a      	lsls	r2, r3, #5
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f6:	461a      	mov	r2, r3
 80071f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80071fc:	6013      	str	r3, [r2, #0]
 80071fe:	e008      	b.n	8007212 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4413      	add	r3, r2
 8007208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800720c:	461a      	mov	r2, r3
 800720e:	2300      	movs	r3, #0
 8007210:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	015a      	lsls	r2, r3, #5
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	4413      	add	r3, r2
 800721a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800721e:	461a      	mov	r2, r3
 8007220:	2300      	movs	r3, #0
 8007222:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4413      	add	r3, r2
 800722c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007230:	461a      	mov	r2, r3
 8007232:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007236:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	3301      	adds	r3, #1
 800723c:	613b      	str	r3, [r7, #16]
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	429a      	cmp	r2, r3
 8007244:	d3b7      	bcc.n	80071b6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007246:	2300      	movs	r3, #0
 8007248:	613b      	str	r3, [r7, #16]
 800724a:	e043      	b.n	80072d4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	015a      	lsls	r2, r3, #5
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	4413      	add	r3, r2
 8007254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800725e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007262:	d118      	bne.n	8007296 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10a      	bne.n	8007280 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	015a      	lsls	r2, r3, #5
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	4413      	add	r3, r2
 8007272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007276:	461a      	mov	r2, r3
 8007278:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	e013      	b.n	80072a8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	4413      	add	r3, r2
 8007288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728c:	461a      	mov	r2, r3
 800728e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007292:	6013      	str	r3, [r2, #0]
 8007294:	e008      	b.n	80072a8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	4413      	add	r3, r2
 800729e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a2:	461a      	mov	r2, r3
 80072a4:	2300      	movs	r3, #0
 80072a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	015a      	lsls	r2, r3, #5
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	4413      	add	r3, r2
 80072b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b4:	461a      	mov	r2, r3
 80072b6:	2300      	movs	r3, #0
 80072b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c6:	461a      	mov	r2, r3
 80072c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	3301      	adds	r3, #1
 80072d2:	613b      	str	r3, [r7, #16]
 80072d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d3b7      	bcc.n	800724c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80072fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80072fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007300:	2b00      	cmp	r3, #0
 8007302:	d105      	bne.n	8007310 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	f043 0210 	orr.w	r2, r3, #16
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	699a      	ldr	r2, [r3, #24]
 8007314:	4b0e      	ldr	r3, [pc, #56]	; (8007350 <USB_DevInit+0x2b4>)
 8007316:	4313      	orrs	r3, r2
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800731c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800731e:	2b00      	cmp	r3, #0
 8007320:	d005      	beq.n	800732e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	f043 0208 	orr.w	r2, r3, #8
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800732e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007330:	2b01      	cmp	r3, #1
 8007332:	d105      	bne.n	8007340 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	699a      	ldr	r2, [r3, #24]
 8007338:	4b06      	ldr	r3, [pc, #24]	; (8007354 <USB_DevInit+0x2b8>)
 800733a:	4313      	orrs	r3, r2
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007340:	7dfb      	ldrb	r3, [r7, #23]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3718      	adds	r7, #24
 8007346:	46bd      	mov	sp, r7
 8007348:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800734c:	b004      	add	sp, #16
 800734e:	4770      	bx	lr
 8007350:	803c3800 	.word	0x803c3800
 8007354:	40000004 	.word	0x40000004

08007358 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	3301      	adds	r3, #1
 800736a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4a13      	ldr	r2, [pc, #76]	; (80073bc <USB_FlushTxFifo+0x64>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d901      	bls.n	8007378 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e01b      	b.n	80073b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	daf2      	bge.n	8007366 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007380:	2300      	movs	r3, #0
 8007382:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	019b      	lsls	r3, r3, #6
 8007388:	f043 0220 	orr.w	r2, r3, #32
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	3301      	adds	r3, #1
 8007394:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	4a08      	ldr	r2, [pc, #32]	; (80073bc <USB_FlushTxFifo+0x64>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d901      	bls.n	80073a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e006      	b.n	80073b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	f003 0320 	and.w	r3, r3, #32
 80073aa:	2b20      	cmp	r3, #32
 80073ac:	d0f0      	beq.n	8007390 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	00030d40 	.word	0x00030d40

080073c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073c8:	2300      	movs	r3, #0
 80073ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	3301      	adds	r3, #1
 80073d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4a11      	ldr	r2, [pc, #68]	; (800741c <USB_FlushRxFifo+0x5c>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d901      	bls.n	80073de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e018      	b.n	8007410 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	daf2      	bge.n	80073cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2210      	movs	r2, #16
 80073ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	3301      	adds	r3, #1
 80073f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4a08      	ldr	r2, [pc, #32]	; (800741c <USB_FlushRxFifo+0x5c>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d901      	bls.n	8007402 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e006      	b.n	8007410 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	f003 0310 	and.w	r3, r3, #16
 800740a:	2b10      	cmp	r3, #16
 800740c:	d0f0      	beq.n	80073f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	00030d40 	.word	0x00030d40

08007420 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	460b      	mov	r3, r1
 800742a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	78fb      	ldrb	r3, [r7, #3]
 800743a:	68f9      	ldr	r1, [r7, #12]
 800743c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007440:	4313      	orrs	r3, r2
 8007442:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007452:	b480      	push	{r7}
 8007454:	b085      	sub	sp, #20
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800746c:	f023 0303 	bic.w	r3, r3, #3
 8007470:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007480:	f043 0302 	orr.w	r3, r3, #2
 8007484:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	f003 0301 	and.w	r3, r3, #1
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	3301      	adds	r3, #1
 80074c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	4a13      	ldr	r2, [pc, #76]	; (8007514 <USB_CoreReset+0x64>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d901      	bls.n	80074ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e01b      	b.n	8007506 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	daf2      	bge.n	80074bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	f043 0201 	orr.w	r2, r3, #1
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	3301      	adds	r3, #1
 80074ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4a09      	ldr	r2, [pc, #36]	; (8007514 <USB_CoreReset+0x64>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d901      	bls.n	80074f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e006      	b.n	8007506 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	2b01      	cmp	r3, #1
 8007502:	d0f0      	beq.n	80074e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	00030d40 	.word	0x00030d40

08007518 <__errno>:
 8007518:	4b01      	ldr	r3, [pc, #4]	; (8007520 <__errno+0x8>)
 800751a:	6818      	ldr	r0, [r3, #0]
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	20000014 	.word	0x20000014

08007524 <__libc_init_array>:
 8007524:	b570      	push	{r4, r5, r6, lr}
 8007526:	4d0d      	ldr	r5, [pc, #52]	; (800755c <__libc_init_array+0x38>)
 8007528:	4c0d      	ldr	r4, [pc, #52]	; (8007560 <__libc_init_array+0x3c>)
 800752a:	1b64      	subs	r4, r4, r5
 800752c:	10a4      	asrs	r4, r4, #2
 800752e:	2600      	movs	r6, #0
 8007530:	42a6      	cmp	r6, r4
 8007532:	d109      	bne.n	8007548 <__libc_init_array+0x24>
 8007534:	4d0b      	ldr	r5, [pc, #44]	; (8007564 <__libc_init_array+0x40>)
 8007536:	4c0c      	ldr	r4, [pc, #48]	; (8007568 <__libc_init_array+0x44>)
 8007538:	f003 fbf4 	bl	800ad24 <_init>
 800753c:	1b64      	subs	r4, r4, r5
 800753e:	10a4      	asrs	r4, r4, #2
 8007540:	2600      	movs	r6, #0
 8007542:	42a6      	cmp	r6, r4
 8007544:	d105      	bne.n	8007552 <__libc_init_array+0x2e>
 8007546:	bd70      	pop	{r4, r5, r6, pc}
 8007548:	f855 3b04 	ldr.w	r3, [r5], #4
 800754c:	4798      	blx	r3
 800754e:	3601      	adds	r6, #1
 8007550:	e7ee      	b.n	8007530 <__libc_init_array+0xc>
 8007552:	f855 3b04 	ldr.w	r3, [r5], #4
 8007556:	4798      	blx	r3
 8007558:	3601      	adds	r6, #1
 800755a:	e7f2      	b.n	8007542 <__libc_init_array+0x1e>
 800755c:	0800b1a4 	.word	0x0800b1a4
 8007560:	0800b1a4 	.word	0x0800b1a4
 8007564:	0800b1a4 	.word	0x0800b1a4
 8007568:	0800b1a8 	.word	0x0800b1a8

0800756c <memset>:
 800756c:	4402      	add	r2, r0
 800756e:	4603      	mov	r3, r0
 8007570:	4293      	cmp	r3, r2
 8007572:	d100      	bne.n	8007576 <memset+0xa>
 8007574:	4770      	bx	lr
 8007576:	f803 1b01 	strb.w	r1, [r3], #1
 800757a:	e7f9      	b.n	8007570 <memset+0x4>

0800757c <__cvt>:
 800757c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007580:	ec55 4b10 	vmov	r4, r5, d0
 8007584:	2d00      	cmp	r5, #0
 8007586:	460e      	mov	r6, r1
 8007588:	4619      	mov	r1, r3
 800758a:	462b      	mov	r3, r5
 800758c:	bfbb      	ittet	lt
 800758e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007592:	461d      	movlt	r5, r3
 8007594:	2300      	movge	r3, #0
 8007596:	232d      	movlt	r3, #45	; 0x2d
 8007598:	700b      	strb	r3, [r1, #0]
 800759a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800759c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80075a0:	4691      	mov	r9, r2
 80075a2:	f023 0820 	bic.w	r8, r3, #32
 80075a6:	bfbc      	itt	lt
 80075a8:	4622      	movlt	r2, r4
 80075aa:	4614      	movlt	r4, r2
 80075ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80075b0:	d005      	beq.n	80075be <__cvt+0x42>
 80075b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80075b6:	d100      	bne.n	80075ba <__cvt+0x3e>
 80075b8:	3601      	adds	r6, #1
 80075ba:	2102      	movs	r1, #2
 80075bc:	e000      	b.n	80075c0 <__cvt+0x44>
 80075be:	2103      	movs	r1, #3
 80075c0:	ab03      	add	r3, sp, #12
 80075c2:	9301      	str	r3, [sp, #4]
 80075c4:	ab02      	add	r3, sp, #8
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	ec45 4b10 	vmov	d0, r4, r5
 80075cc:	4653      	mov	r3, sl
 80075ce:	4632      	mov	r2, r6
 80075d0:	f000 fd92 	bl	80080f8 <_dtoa_r>
 80075d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80075d8:	4607      	mov	r7, r0
 80075da:	d102      	bne.n	80075e2 <__cvt+0x66>
 80075dc:	f019 0f01 	tst.w	r9, #1
 80075e0:	d022      	beq.n	8007628 <__cvt+0xac>
 80075e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80075e6:	eb07 0906 	add.w	r9, r7, r6
 80075ea:	d110      	bne.n	800760e <__cvt+0x92>
 80075ec:	783b      	ldrb	r3, [r7, #0]
 80075ee:	2b30      	cmp	r3, #48	; 0x30
 80075f0:	d10a      	bne.n	8007608 <__cvt+0x8c>
 80075f2:	2200      	movs	r2, #0
 80075f4:	2300      	movs	r3, #0
 80075f6:	4620      	mov	r0, r4
 80075f8:	4629      	mov	r1, r5
 80075fa:	f7f9 fa85 	bl	8000b08 <__aeabi_dcmpeq>
 80075fe:	b918      	cbnz	r0, 8007608 <__cvt+0x8c>
 8007600:	f1c6 0601 	rsb	r6, r6, #1
 8007604:	f8ca 6000 	str.w	r6, [sl]
 8007608:	f8da 3000 	ldr.w	r3, [sl]
 800760c:	4499      	add	r9, r3
 800760e:	2200      	movs	r2, #0
 8007610:	2300      	movs	r3, #0
 8007612:	4620      	mov	r0, r4
 8007614:	4629      	mov	r1, r5
 8007616:	f7f9 fa77 	bl	8000b08 <__aeabi_dcmpeq>
 800761a:	b108      	cbz	r0, 8007620 <__cvt+0xa4>
 800761c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007620:	2230      	movs	r2, #48	; 0x30
 8007622:	9b03      	ldr	r3, [sp, #12]
 8007624:	454b      	cmp	r3, r9
 8007626:	d307      	bcc.n	8007638 <__cvt+0xbc>
 8007628:	9b03      	ldr	r3, [sp, #12]
 800762a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800762c:	1bdb      	subs	r3, r3, r7
 800762e:	4638      	mov	r0, r7
 8007630:	6013      	str	r3, [r2, #0]
 8007632:	b004      	add	sp, #16
 8007634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007638:	1c59      	adds	r1, r3, #1
 800763a:	9103      	str	r1, [sp, #12]
 800763c:	701a      	strb	r2, [r3, #0]
 800763e:	e7f0      	b.n	8007622 <__cvt+0xa6>

08007640 <__exponent>:
 8007640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007642:	4603      	mov	r3, r0
 8007644:	2900      	cmp	r1, #0
 8007646:	bfb8      	it	lt
 8007648:	4249      	neglt	r1, r1
 800764a:	f803 2b02 	strb.w	r2, [r3], #2
 800764e:	bfb4      	ite	lt
 8007650:	222d      	movlt	r2, #45	; 0x2d
 8007652:	222b      	movge	r2, #43	; 0x2b
 8007654:	2909      	cmp	r1, #9
 8007656:	7042      	strb	r2, [r0, #1]
 8007658:	dd2a      	ble.n	80076b0 <__exponent+0x70>
 800765a:	f10d 0407 	add.w	r4, sp, #7
 800765e:	46a4      	mov	ip, r4
 8007660:	270a      	movs	r7, #10
 8007662:	46a6      	mov	lr, r4
 8007664:	460a      	mov	r2, r1
 8007666:	fb91 f6f7 	sdiv	r6, r1, r7
 800766a:	fb07 1516 	mls	r5, r7, r6, r1
 800766e:	3530      	adds	r5, #48	; 0x30
 8007670:	2a63      	cmp	r2, #99	; 0x63
 8007672:	f104 34ff 	add.w	r4, r4, #4294967295
 8007676:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800767a:	4631      	mov	r1, r6
 800767c:	dcf1      	bgt.n	8007662 <__exponent+0x22>
 800767e:	3130      	adds	r1, #48	; 0x30
 8007680:	f1ae 0502 	sub.w	r5, lr, #2
 8007684:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007688:	1c44      	adds	r4, r0, #1
 800768a:	4629      	mov	r1, r5
 800768c:	4561      	cmp	r1, ip
 800768e:	d30a      	bcc.n	80076a6 <__exponent+0x66>
 8007690:	f10d 0209 	add.w	r2, sp, #9
 8007694:	eba2 020e 	sub.w	r2, r2, lr
 8007698:	4565      	cmp	r5, ip
 800769a:	bf88      	it	hi
 800769c:	2200      	movhi	r2, #0
 800769e:	4413      	add	r3, r2
 80076a0:	1a18      	subs	r0, r3, r0
 80076a2:	b003      	add	sp, #12
 80076a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076aa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80076ae:	e7ed      	b.n	800768c <__exponent+0x4c>
 80076b0:	2330      	movs	r3, #48	; 0x30
 80076b2:	3130      	adds	r1, #48	; 0x30
 80076b4:	7083      	strb	r3, [r0, #2]
 80076b6:	70c1      	strb	r1, [r0, #3]
 80076b8:	1d03      	adds	r3, r0, #4
 80076ba:	e7f1      	b.n	80076a0 <__exponent+0x60>

080076bc <_printf_float>:
 80076bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c0:	ed2d 8b02 	vpush	{d8}
 80076c4:	b08d      	sub	sp, #52	; 0x34
 80076c6:	460c      	mov	r4, r1
 80076c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80076cc:	4616      	mov	r6, r2
 80076ce:	461f      	mov	r7, r3
 80076d0:	4605      	mov	r5, r0
 80076d2:	f001 faff 	bl	8008cd4 <_localeconv_r>
 80076d6:	f8d0 a000 	ldr.w	sl, [r0]
 80076da:	4650      	mov	r0, sl
 80076dc:	f7f8 fd98 	bl	8000210 <strlen>
 80076e0:	2300      	movs	r3, #0
 80076e2:	930a      	str	r3, [sp, #40]	; 0x28
 80076e4:	6823      	ldr	r3, [r4, #0]
 80076e6:	9305      	str	r3, [sp, #20]
 80076e8:	f8d8 3000 	ldr.w	r3, [r8]
 80076ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80076f0:	3307      	adds	r3, #7
 80076f2:	f023 0307 	bic.w	r3, r3, #7
 80076f6:	f103 0208 	add.w	r2, r3, #8
 80076fa:	f8c8 2000 	str.w	r2, [r8]
 80076fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007702:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007706:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800770a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800770e:	9307      	str	r3, [sp, #28]
 8007710:	f8cd 8018 	str.w	r8, [sp, #24]
 8007714:	ee08 0a10 	vmov	s16, r0
 8007718:	4b9f      	ldr	r3, [pc, #636]	; (8007998 <_printf_float+0x2dc>)
 800771a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800771e:	f04f 32ff 	mov.w	r2, #4294967295
 8007722:	f7f9 fa23 	bl	8000b6c <__aeabi_dcmpun>
 8007726:	bb88      	cbnz	r0, 800778c <_printf_float+0xd0>
 8007728:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800772c:	4b9a      	ldr	r3, [pc, #616]	; (8007998 <_printf_float+0x2dc>)
 800772e:	f04f 32ff 	mov.w	r2, #4294967295
 8007732:	f7f9 f9fd 	bl	8000b30 <__aeabi_dcmple>
 8007736:	bb48      	cbnz	r0, 800778c <_printf_float+0xd0>
 8007738:	2200      	movs	r2, #0
 800773a:	2300      	movs	r3, #0
 800773c:	4640      	mov	r0, r8
 800773e:	4649      	mov	r1, r9
 8007740:	f7f9 f9ec 	bl	8000b1c <__aeabi_dcmplt>
 8007744:	b110      	cbz	r0, 800774c <_printf_float+0x90>
 8007746:	232d      	movs	r3, #45	; 0x2d
 8007748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800774c:	4b93      	ldr	r3, [pc, #588]	; (800799c <_printf_float+0x2e0>)
 800774e:	4894      	ldr	r0, [pc, #592]	; (80079a0 <_printf_float+0x2e4>)
 8007750:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007754:	bf94      	ite	ls
 8007756:	4698      	movls	r8, r3
 8007758:	4680      	movhi	r8, r0
 800775a:	2303      	movs	r3, #3
 800775c:	6123      	str	r3, [r4, #16]
 800775e:	9b05      	ldr	r3, [sp, #20]
 8007760:	f023 0204 	bic.w	r2, r3, #4
 8007764:	6022      	str	r2, [r4, #0]
 8007766:	f04f 0900 	mov.w	r9, #0
 800776a:	9700      	str	r7, [sp, #0]
 800776c:	4633      	mov	r3, r6
 800776e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007770:	4621      	mov	r1, r4
 8007772:	4628      	mov	r0, r5
 8007774:	f000 f9d8 	bl	8007b28 <_printf_common>
 8007778:	3001      	adds	r0, #1
 800777a:	f040 8090 	bne.w	800789e <_printf_float+0x1e2>
 800777e:	f04f 30ff 	mov.w	r0, #4294967295
 8007782:	b00d      	add	sp, #52	; 0x34
 8007784:	ecbd 8b02 	vpop	{d8}
 8007788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800778c:	4642      	mov	r2, r8
 800778e:	464b      	mov	r3, r9
 8007790:	4640      	mov	r0, r8
 8007792:	4649      	mov	r1, r9
 8007794:	f7f9 f9ea 	bl	8000b6c <__aeabi_dcmpun>
 8007798:	b140      	cbz	r0, 80077ac <_printf_float+0xf0>
 800779a:	464b      	mov	r3, r9
 800779c:	2b00      	cmp	r3, #0
 800779e:	bfbc      	itt	lt
 80077a0:	232d      	movlt	r3, #45	; 0x2d
 80077a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80077a6:	487f      	ldr	r0, [pc, #508]	; (80079a4 <_printf_float+0x2e8>)
 80077a8:	4b7f      	ldr	r3, [pc, #508]	; (80079a8 <_printf_float+0x2ec>)
 80077aa:	e7d1      	b.n	8007750 <_printf_float+0x94>
 80077ac:	6863      	ldr	r3, [r4, #4]
 80077ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80077b2:	9206      	str	r2, [sp, #24]
 80077b4:	1c5a      	adds	r2, r3, #1
 80077b6:	d13f      	bne.n	8007838 <_printf_float+0x17c>
 80077b8:	2306      	movs	r3, #6
 80077ba:	6063      	str	r3, [r4, #4]
 80077bc:	9b05      	ldr	r3, [sp, #20]
 80077be:	6861      	ldr	r1, [r4, #4]
 80077c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80077c4:	2300      	movs	r3, #0
 80077c6:	9303      	str	r3, [sp, #12]
 80077c8:	ab0a      	add	r3, sp, #40	; 0x28
 80077ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 80077ce:	ab09      	add	r3, sp, #36	; 0x24
 80077d0:	ec49 8b10 	vmov	d0, r8, r9
 80077d4:	9300      	str	r3, [sp, #0]
 80077d6:	6022      	str	r2, [r4, #0]
 80077d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80077dc:	4628      	mov	r0, r5
 80077de:	f7ff fecd 	bl	800757c <__cvt>
 80077e2:	9b06      	ldr	r3, [sp, #24]
 80077e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077e6:	2b47      	cmp	r3, #71	; 0x47
 80077e8:	4680      	mov	r8, r0
 80077ea:	d108      	bne.n	80077fe <_printf_float+0x142>
 80077ec:	1cc8      	adds	r0, r1, #3
 80077ee:	db02      	blt.n	80077f6 <_printf_float+0x13a>
 80077f0:	6863      	ldr	r3, [r4, #4]
 80077f2:	4299      	cmp	r1, r3
 80077f4:	dd41      	ble.n	800787a <_printf_float+0x1be>
 80077f6:	f1ab 0b02 	sub.w	fp, fp, #2
 80077fa:	fa5f fb8b 	uxtb.w	fp, fp
 80077fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007802:	d820      	bhi.n	8007846 <_printf_float+0x18a>
 8007804:	3901      	subs	r1, #1
 8007806:	465a      	mov	r2, fp
 8007808:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800780c:	9109      	str	r1, [sp, #36]	; 0x24
 800780e:	f7ff ff17 	bl	8007640 <__exponent>
 8007812:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007814:	1813      	adds	r3, r2, r0
 8007816:	2a01      	cmp	r2, #1
 8007818:	4681      	mov	r9, r0
 800781a:	6123      	str	r3, [r4, #16]
 800781c:	dc02      	bgt.n	8007824 <_printf_float+0x168>
 800781e:	6822      	ldr	r2, [r4, #0]
 8007820:	07d2      	lsls	r2, r2, #31
 8007822:	d501      	bpl.n	8007828 <_printf_float+0x16c>
 8007824:	3301      	adds	r3, #1
 8007826:	6123      	str	r3, [r4, #16]
 8007828:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800782c:	2b00      	cmp	r3, #0
 800782e:	d09c      	beq.n	800776a <_printf_float+0xae>
 8007830:	232d      	movs	r3, #45	; 0x2d
 8007832:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007836:	e798      	b.n	800776a <_printf_float+0xae>
 8007838:	9a06      	ldr	r2, [sp, #24]
 800783a:	2a47      	cmp	r2, #71	; 0x47
 800783c:	d1be      	bne.n	80077bc <_printf_float+0x100>
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1bc      	bne.n	80077bc <_printf_float+0x100>
 8007842:	2301      	movs	r3, #1
 8007844:	e7b9      	b.n	80077ba <_printf_float+0xfe>
 8007846:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800784a:	d118      	bne.n	800787e <_printf_float+0x1c2>
 800784c:	2900      	cmp	r1, #0
 800784e:	6863      	ldr	r3, [r4, #4]
 8007850:	dd0b      	ble.n	800786a <_printf_float+0x1ae>
 8007852:	6121      	str	r1, [r4, #16]
 8007854:	b913      	cbnz	r3, 800785c <_printf_float+0x1a0>
 8007856:	6822      	ldr	r2, [r4, #0]
 8007858:	07d0      	lsls	r0, r2, #31
 800785a:	d502      	bpl.n	8007862 <_printf_float+0x1a6>
 800785c:	3301      	adds	r3, #1
 800785e:	440b      	add	r3, r1
 8007860:	6123      	str	r3, [r4, #16]
 8007862:	65a1      	str	r1, [r4, #88]	; 0x58
 8007864:	f04f 0900 	mov.w	r9, #0
 8007868:	e7de      	b.n	8007828 <_printf_float+0x16c>
 800786a:	b913      	cbnz	r3, 8007872 <_printf_float+0x1b6>
 800786c:	6822      	ldr	r2, [r4, #0]
 800786e:	07d2      	lsls	r2, r2, #31
 8007870:	d501      	bpl.n	8007876 <_printf_float+0x1ba>
 8007872:	3302      	adds	r3, #2
 8007874:	e7f4      	b.n	8007860 <_printf_float+0x1a4>
 8007876:	2301      	movs	r3, #1
 8007878:	e7f2      	b.n	8007860 <_printf_float+0x1a4>
 800787a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800787e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007880:	4299      	cmp	r1, r3
 8007882:	db05      	blt.n	8007890 <_printf_float+0x1d4>
 8007884:	6823      	ldr	r3, [r4, #0]
 8007886:	6121      	str	r1, [r4, #16]
 8007888:	07d8      	lsls	r0, r3, #31
 800788a:	d5ea      	bpl.n	8007862 <_printf_float+0x1a6>
 800788c:	1c4b      	adds	r3, r1, #1
 800788e:	e7e7      	b.n	8007860 <_printf_float+0x1a4>
 8007890:	2900      	cmp	r1, #0
 8007892:	bfd4      	ite	le
 8007894:	f1c1 0202 	rsble	r2, r1, #2
 8007898:	2201      	movgt	r2, #1
 800789a:	4413      	add	r3, r2
 800789c:	e7e0      	b.n	8007860 <_printf_float+0x1a4>
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	055a      	lsls	r2, r3, #21
 80078a2:	d407      	bmi.n	80078b4 <_printf_float+0x1f8>
 80078a4:	6923      	ldr	r3, [r4, #16]
 80078a6:	4642      	mov	r2, r8
 80078a8:	4631      	mov	r1, r6
 80078aa:	4628      	mov	r0, r5
 80078ac:	47b8      	blx	r7
 80078ae:	3001      	adds	r0, #1
 80078b0:	d12c      	bne.n	800790c <_printf_float+0x250>
 80078b2:	e764      	b.n	800777e <_printf_float+0xc2>
 80078b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80078b8:	f240 80e0 	bls.w	8007a7c <_printf_float+0x3c0>
 80078bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078c0:	2200      	movs	r2, #0
 80078c2:	2300      	movs	r3, #0
 80078c4:	f7f9 f920 	bl	8000b08 <__aeabi_dcmpeq>
 80078c8:	2800      	cmp	r0, #0
 80078ca:	d034      	beq.n	8007936 <_printf_float+0x27a>
 80078cc:	4a37      	ldr	r2, [pc, #220]	; (80079ac <_printf_float+0x2f0>)
 80078ce:	2301      	movs	r3, #1
 80078d0:	4631      	mov	r1, r6
 80078d2:	4628      	mov	r0, r5
 80078d4:	47b8      	blx	r7
 80078d6:	3001      	adds	r0, #1
 80078d8:	f43f af51 	beq.w	800777e <_printf_float+0xc2>
 80078dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078e0:	429a      	cmp	r2, r3
 80078e2:	db02      	blt.n	80078ea <_printf_float+0x22e>
 80078e4:	6823      	ldr	r3, [r4, #0]
 80078e6:	07d8      	lsls	r0, r3, #31
 80078e8:	d510      	bpl.n	800790c <_printf_float+0x250>
 80078ea:	ee18 3a10 	vmov	r3, s16
 80078ee:	4652      	mov	r2, sl
 80078f0:	4631      	mov	r1, r6
 80078f2:	4628      	mov	r0, r5
 80078f4:	47b8      	blx	r7
 80078f6:	3001      	adds	r0, #1
 80078f8:	f43f af41 	beq.w	800777e <_printf_float+0xc2>
 80078fc:	f04f 0800 	mov.w	r8, #0
 8007900:	f104 091a 	add.w	r9, r4, #26
 8007904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007906:	3b01      	subs	r3, #1
 8007908:	4543      	cmp	r3, r8
 800790a:	dc09      	bgt.n	8007920 <_printf_float+0x264>
 800790c:	6823      	ldr	r3, [r4, #0]
 800790e:	079b      	lsls	r3, r3, #30
 8007910:	f100 8105 	bmi.w	8007b1e <_printf_float+0x462>
 8007914:	68e0      	ldr	r0, [r4, #12]
 8007916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007918:	4298      	cmp	r0, r3
 800791a:	bfb8      	it	lt
 800791c:	4618      	movlt	r0, r3
 800791e:	e730      	b.n	8007782 <_printf_float+0xc6>
 8007920:	2301      	movs	r3, #1
 8007922:	464a      	mov	r2, r9
 8007924:	4631      	mov	r1, r6
 8007926:	4628      	mov	r0, r5
 8007928:	47b8      	blx	r7
 800792a:	3001      	adds	r0, #1
 800792c:	f43f af27 	beq.w	800777e <_printf_float+0xc2>
 8007930:	f108 0801 	add.w	r8, r8, #1
 8007934:	e7e6      	b.n	8007904 <_printf_float+0x248>
 8007936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007938:	2b00      	cmp	r3, #0
 800793a:	dc39      	bgt.n	80079b0 <_printf_float+0x2f4>
 800793c:	4a1b      	ldr	r2, [pc, #108]	; (80079ac <_printf_float+0x2f0>)
 800793e:	2301      	movs	r3, #1
 8007940:	4631      	mov	r1, r6
 8007942:	4628      	mov	r0, r5
 8007944:	47b8      	blx	r7
 8007946:	3001      	adds	r0, #1
 8007948:	f43f af19 	beq.w	800777e <_printf_float+0xc2>
 800794c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007950:	4313      	orrs	r3, r2
 8007952:	d102      	bne.n	800795a <_printf_float+0x29e>
 8007954:	6823      	ldr	r3, [r4, #0]
 8007956:	07d9      	lsls	r1, r3, #31
 8007958:	d5d8      	bpl.n	800790c <_printf_float+0x250>
 800795a:	ee18 3a10 	vmov	r3, s16
 800795e:	4652      	mov	r2, sl
 8007960:	4631      	mov	r1, r6
 8007962:	4628      	mov	r0, r5
 8007964:	47b8      	blx	r7
 8007966:	3001      	adds	r0, #1
 8007968:	f43f af09 	beq.w	800777e <_printf_float+0xc2>
 800796c:	f04f 0900 	mov.w	r9, #0
 8007970:	f104 0a1a 	add.w	sl, r4, #26
 8007974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007976:	425b      	negs	r3, r3
 8007978:	454b      	cmp	r3, r9
 800797a:	dc01      	bgt.n	8007980 <_printf_float+0x2c4>
 800797c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800797e:	e792      	b.n	80078a6 <_printf_float+0x1ea>
 8007980:	2301      	movs	r3, #1
 8007982:	4652      	mov	r2, sl
 8007984:	4631      	mov	r1, r6
 8007986:	4628      	mov	r0, r5
 8007988:	47b8      	blx	r7
 800798a:	3001      	adds	r0, #1
 800798c:	f43f aef7 	beq.w	800777e <_printf_float+0xc2>
 8007990:	f109 0901 	add.w	r9, r9, #1
 8007994:	e7ee      	b.n	8007974 <_printf_float+0x2b8>
 8007996:	bf00      	nop
 8007998:	7fefffff 	.word	0x7fefffff
 800799c:	0800ada4 	.word	0x0800ada4
 80079a0:	0800ada8 	.word	0x0800ada8
 80079a4:	0800adb0 	.word	0x0800adb0
 80079a8:	0800adac 	.word	0x0800adac
 80079ac:	0800afd9 	.word	0x0800afd9
 80079b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079b4:	429a      	cmp	r2, r3
 80079b6:	bfa8      	it	ge
 80079b8:	461a      	movge	r2, r3
 80079ba:	2a00      	cmp	r2, #0
 80079bc:	4691      	mov	r9, r2
 80079be:	dc37      	bgt.n	8007a30 <_printf_float+0x374>
 80079c0:	f04f 0b00 	mov.w	fp, #0
 80079c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079c8:	f104 021a 	add.w	r2, r4, #26
 80079cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079ce:	9305      	str	r3, [sp, #20]
 80079d0:	eba3 0309 	sub.w	r3, r3, r9
 80079d4:	455b      	cmp	r3, fp
 80079d6:	dc33      	bgt.n	8007a40 <_printf_float+0x384>
 80079d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079dc:	429a      	cmp	r2, r3
 80079de:	db3b      	blt.n	8007a58 <_printf_float+0x39c>
 80079e0:	6823      	ldr	r3, [r4, #0]
 80079e2:	07da      	lsls	r2, r3, #31
 80079e4:	d438      	bmi.n	8007a58 <_printf_float+0x39c>
 80079e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079e8:	9a05      	ldr	r2, [sp, #20]
 80079ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079ec:	1a9a      	subs	r2, r3, r2
 80079ee:	eba3 0901 	sub.w	r9, r3, r1
 80079f2:	4591      	cmp	r9, r2
 80079f4:	bfa8      	it	ge
 80079f6:	4691      	movge	r9, r2
 80079f8:	f1b9 0f00 	cmp.w	r9, #0
 80079fc:	dc35      	bgt.n	8007a6a <_printf_float+0x3ae>
 80079fe:	f04f 0800 	mov.w	r8, #0
 8007a02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a06:	f104 0a1a 	add.w	sl, r4, #26
 8007a0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a0e:	1a9b      	subs	r3, r3, r2
 8007a10:	eba3 0309 	sub.w	r3, r3, r9
 8007a14:	4543      	cmp	r3, r8
 8007a16:	f77f af79 	ble.w	800790c <_printf_float+0x250>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	4652      	mov	r2, sl
 8007a1e:	4631      	mov	r1, r6
 8007a20:	4628      	mov	r0, r5
 8007a22:	47b8      	blx	r7
 8007a24:	3001      	adds	r0, #1
 8007a26:	f43f aeaa 	beq.w	800777e <_printf_float+0xc2>
 8007a2a:	f108 0801 	add.w	r8, r8, #1
 8007a2e:	e7ec      	b.n	8007a0a <_printf_float+0x34e>
 8007a30:	4613      	mov	r3, r2
 8007a32:	4631      	mov	r1, r6
 8007a34:	4642      	mov	r2, r8
 8007a36:	4628      	mov	r0, r5
 8007a38:	47b8      	blx	r7
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	d1c0      	bne.n	80079c0 <_printf_float+0x304>
 8007a3e:	e69e      	b.n	800777e <_printf_float+0xc2>
 8007a40:	2301      	movs	r3, #1
 8007a42:	4631      	mov	r1, r6
 8007a44:	4628      	mov	r0, r5
 8007a46:	9205      	str	r2, [sp, #20]
 8007a48:	47b8      	blx	r7
 8007a4a:	3001      	adds	r0, #1
 8007a4c:	f43f ae97 	beq.w	800777e <_printf_float+0xc2>
 8007a50:	9a05      	ldr	r2, [sp, #20]
 8007a52:	f10b 0b01 	add.w	fp, fp, #1
 8007a56:	e7b9      	b.n	80079cc <_printf_float+0x310>
 8007a58:	ee18 3a10 	vmov	r3, s16
 8007a5c:	4652      	mov	r2, sl
 8007a5e:	4631      	mov	r1, r6
 8007a60:	4628      	mov	r0, r5
 8007a62:	47b8      	blx	r7
 8007a64:	3001      	adds	r0, #1
 8007a66:	d1be      	bne.n	80079e6 <_printf_float+0x32a>
 8007a68:	e689      	b.n	800777e <_printf_float+0xc2>
 8007a6a:	9a05      	ldr	r2, [sp, #20]
 8007a6c:	464b      	mov	r3, r9
 8007a6e:	4442      	add	r2, r8
 8007a70:	4631      	mov	r1, r6
 8007a72:	4628      	mov	r0, r5
 8007a74:	47b8      	blx	r7
 8007a76:	3001      	adds	r0, #1
 8007a78:	d1c1      	bne.n	80079fe <_printf_float+0x342>
 8007a7a:	e680      	b.n	800777e <_printf_float+0xc2>
 8007a7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a7e:	2a01      	cmp	r2, #1
 8007a80:	dc01      	bgt.n	8007a86 <_printf_float+0x3ca>
 8007a82:	07db      	lsls	r3, r3, #31
 8007a84:	d538      	bpl.n	8007af8 <_printf_float+0x43c>
 8007a86:	2301      	movs	r3, #1
 8007a88:	4642      	mov	r2, r8
 8007a8a:	4631      	mov	r1, r6
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	47b8      	blx	r7
 8007a90:	3001      	adds	r0, #1
 8007a92:	f43f ae74 	beq.w	800777e <_printf_float+0xc2>
 8007a96:	ee18 3a10 	vmov	r3, s16
 8007a9a:	4652      	mov	r2, sl
 8007a9c:	4631      	mov	r1, r6
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	47b8      	blx	r7
 8007aa2:	3001      	adds	r0, #1
 8007aa4:	f43f ae6b 	beq.w	800777e <_printf_float+0xc2>
 8007aa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007aac:	2200      	movs	r2, #0
 8007aae:	2300      	movs	r3, #0
 8007ab0:	f7f9 f82a 	bl	8000b08 <__aeabi_dcmpeq>
 8007ab4:	b9d8      	cbnz	r0, 8007aee <_printf_float+0x432>
 8007ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ab8:	f108 0201 	add.w	r2, r8, #1
 8007abc:	3b01      	subs	r3, #1
 8007abe:	4631      	mov	r1, r6
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	47b8      	blx	r7
 8007ac4:	3001      	adds	r0, #1
 8007ac6:	d10e      	bne.n	8007ae6 <_printf_float+0x42a>
 8007ac8:	e659      	b.n	800777e <_printf_float+0xc2>
 8007aca:	2301      	movs	r3, #1
 8007acc:	4652      	mov	r2, sl
 8007ace:	4631      	mov	r1, r6
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	47b8      	blx	r7
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	f43f ae52 	beq.w	800777e <_printf_float+0xc2>
 8007ada:	f108 0801 	add.w	r8, r8, #1
 8007ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	4543      	cmp	r3, r8
 8007ae4:	dcf1      	bgt.n	8007aca <_printf_float+0x40e>
 8007ae6:	464b      	mov	r3, r9
 8007ae8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007aec:	e6dc      	b.n	80078a8 <_printf_float+0x1ec>
 8007aee:	f04f 0800 	mov.w	r8, #0
 8007af2:	f104 0a1a 	add.w	sl, r4, #26
 8007af6:	e7f2      	b.n	8007ade <_printf_float+0x422>
 8007af8:	2301      	movs	r3, #1
 8007afa:	4642      	mov	r2, r8
 8007afc:	e7df      	b.n	8007abe <_printf_float+0x402>
 8007afe:	2301      	movs	r3, #1
 8007b00:	464a      	mov	r2, r9
 8007b02:	4631      	mov	r1, r6
 8007b04:	4628      	mov	r0, r5
 8007b06:	47b8      	blx	r7
 8007b08:	3001      	adds	r0, #1
 8007b0a:	f43f ae38 	beq.w	800777e <_printf_float+0xc2>
 8007b0e:	f108 0801 	add.w	r8, r8, #1
 8007b12:	68e3      	ldr	r3, [r4, #12]
 8007b14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b16:	1a5b      	subs	r3, r3, r1
 8007b18:	4543      	cmp	r3, r8
 8007b1a:	dcf0      	bgt.n	8007afe <_printf_float+0x442>
 8007b1c:	e6fa      	b.n	8007914 <_printf_float+0x258>
 8007b1e:	f04f 0800 	mov.w	r8, #0
 8007b22:	f104 0919 	add.w	r9, r4, #25
 8007b26:	e7f4      	b.n	8007b12 <_printf_float+0x456>

08007b28 <_printf_common>:
 8007b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b2c:	4616      	mov	r6, r2
 8007b2e:	4699      	mov	r9, r3
 8007b30:	688a      	ldr	r2, [r1, #8]
 8007b32:	690b      	ldr	r3, [r1, #16]
 8007b34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	bfb8      	it	lt
 8007b3c:	4613      	movlt	r3, r2
 8007b3e:	6033      	str	r3, [r6, #0]
 8007b40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b44:	4607      	mov	r7, r0
 8007b46:	460c      	mov	r4, r1
 8007b48:	b10a      	cbz	r2, 8007b4e <_printf_common+0x26>
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	6033      	str	r3, [r6, #0]
 8007b4e:	6823      	ldr	r3, [r4, #0]
 8007b50:	0699      	lsls	r1, r3, #26
 8007b52:	bf42      	ittt	mi
 8007b54:	6833      	ldrmi	r3, [r6, #0]
 8007b56:	3302      	addmi	r3, #2
 8007b58:	6033      	strmi	r3, [r6, #0]
 8007b5a:	6825      	ldr	r5, [r4, #0]
 8007b5c:	f015 0506 	ands.w	r5, r5, #6
 8007b60:	d106      	bne.n	8007b70 <_printf_common+0x48>
 8007b62:	f104 0a19 	add.w	sl, r4, #25
 8007b66:	68e3      	ldr	r3, [r4, #12]
 8007b68:	6832      	ldr	r2, [r6, #0]
 8007b6a:	1a9b      	subs	r3, r3, r2
 8007b6c:	42ab      	cmp	r3, r5
 8007b6e:	dc26      	bgt.n	8007bbe <_printf_common+0x96>
 8007b70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b74:	1e13      	subs	r3, r2, #0
 8007b76:	6822      	ldr	r2, [r4, #0]
 8007b78:	bf18      	it	ne
 8007b7a:	2301      	movne	r3, #1
 8007b7c:	0692      	lsls	r2, r2, #26
 8007b7e:	d42b      	bmi.n	8007bd8 <_printf_common+0xb0>
 8007b80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b84:	4649      	mov	r1, r9
 8007b86:	4638      	mov	r0, r7
 8007b88:	47c0      	blx	r8
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	d01e      	beq.n	8007bcc <_printf_common+0xa4>
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	68e5      	ldr	r5, [r4, #12]
 8007b92:	6832      	ldr	r2, [r6, #0]
 8007b94:	f003 0306 	and.w	r3, r3, #6
 8007b98:	2b04      	cmp	r3, #4
 8007b9a:	bf08      	it	eq
 8007b9c:	1aad      	subeq	r5, r5, r2
 8007b9e:	68a3      	ldr	r3, [r4, #8]
 8007ba0:	6922      	ldr	r2, [r4, #16]
 8007ba2:	bf0c      	ite	eq
 8007ba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ba8:	2500      	movne	r5, #0
 8007baa:	4293      	cmp	r3, r2
 8007bac:	bfc4      	itt	gt
 8007bae:	1a9b      	subgt	r3, r3, r2
 8007bb0:	18ed      	addgt	r5, r5, r3
 8007bb2:	2600      	movs	r6, #0
 8007bb4:	341a      	adds	r4, #26
 8007bb6:	42b5      	cmp	r5, r6
 8007bb8:	d11a      	bne.n	8007bf0 <_printf_common+0xc8>
 8007bba:	2000      	movs	r0, #0
 8007bbc:	e008      	b.n	8007bd0 <_printf_common+0xa8>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	4652      	mov	r2, sl
 8007bc2:	4649      	mov	r1, r9
 8007bc4:	4638      	mov	r0, r7
 8007bc6:	47c0      	blx	r8
 8007bc8:	3001      	adds	r0, #1
 8007bca:	d103      	bne.n	8007bd4 <_printf_common+0xac>
 8007bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bd4:	3501      	adds	r5, #1
 8007bd6:	e7c6      	b.n	8007b66 <_printf_common+0x3e>
 8007bd8:	18e1      	adds	r1, r4, r3
 8007bda:	1c5a      	adds	r2, r3, #1
 8007bdc:	2030      	movs	r0, #48	; 0x30
 8007bde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007be2:	4422      	add	r2, r4
 8007be4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007be8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bec:	3302      	adds	r3, #2
 8007bee:	e7c7      	b.n	8007b80 <_printf_common+0x58>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	4622      	mov	r2, r4
 8007bf4:	4649      	mov	r1, r9
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	47c0      	blx	r8
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	d0e6      	beq.n	8007bcc <_printf_common+0xa4>
 8007bfe:	3601      	adds	r6, #1
 8007c00:	e7d9      	b.n	8007bb6 <_printf_common+0x8e>
	...

08007c04 <_printf_i>:
 8007c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c08:	7e0f      	ldrb	r7, [r1, #24]
 8007c0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c0c:	2f78      	cmp	r7, #120	; 0x78
 8007c0e:	4691      	mov	r9, r2
 8007c10:	4680      	mov	r8, r0
 8007c12:	460c      	mov	r4, r1
 8007c14:	469a      	mov	sl, r3
 8007c16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c1a:	d807      	bhi.n	8007c2c <_printf_i+0x28>
 8007c1c:	2f62      	cmp	r7, #98	; 0x62
 8007c1e:	d80a      	bhi.n	8007c36 <_printf_i+0x32>
 8007c20:	2f00      	cmp	r7, #0
 8007c22:	f000 80d8 	beq.w	8007dd6 <_printf_i+0x1d2>
 8007c26:	2f58      	cmp	r7, #88	; 0x58
 8007c28:	f000 80a3 	beq.w	8007d72 <_printf_i+0x16e>
 8007c2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c34:	e03a      	b.n	8007cac <_printf_i+0xa8>
 8007c36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c3a:	2b15      	cmp	r3, #21
 8007c3c:	d8f6      	bhi.n	8007c2c <_printf_i+0x28>
 8007c3e:	a101      	add	r1, pc, #4	; (adr r1, 8007c44 <_printf_i+0x40>)
 8007c40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c44:	08007c9d 	.word	0x08007c9d
 8007c48:	08007cb1 	.word	0x08007cb1
 8007c4c:	08007c2d 	.word	0x08007c2d
 8007c50:	08007c2d 	.word	0x08007c2d
 8007c54:	08007c2d 	.word	0x08007c2d
 8007c58:	08007c2d 	.word	0x08007c2d
 8007c5c:	08007cb1 	.word	0x08007cb1
 8007c60:	08007c2d 	.word	0x08007c2d
 8007c64:	08007c2d 	.word	0x08007c2d
 8007c68:	08007c2d 	.word	0x08007c2d
 8007c6c:	08007c2d 	.word	0x08007c2d
 8007c70:	08007dbd 	.word	0x08007dbd
 8007c74:	08007ce1 	.word	0x08007ce1
 8007c78:	08007d9f 	.word	0x08007d9f
 8007c7c:	08007c2d 	.word	0x08007c2d
 8007c80:	08007c2d 	.word	0x08007c2d
 8007c84:	08007ddf 	.word	0x08007ddf
 8007c88:	08007c2d 	.word	0x08007c2d
 8007c8c:	08007ce1 	.word	0x08007ce1
 8007c90:	08007c2d 	.word	0x08007c2d
 8007c94:	08007c2d 	.word	0x08007c2d
 8007c98:	08007da7 	.word	0x08007da7
 8007c9c:	682b      	ldr	r3, [r5, #0]
 8007c9e:	1d1a      	adds	r2, r3, #4
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	602a      	str	r2, [r5, #0]
 8007ca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ca8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cac:	2301      	movs	r3, #1
 8007cae:	e0a3      	b.n	8007df8 <_printf_i+0x1f4>
 8007cb0:	6820      	ldr	r0, [r4, #0]
 8007cb2:	6829      	ldr	r1, [r5, #0]
 8007cb4:	0606      	lsls	r6, r0, #24
 8007cb6:	f101 0304 	add.w	r3, r1, #4
 8007cba:	d50a      	bpl.n	8007cd2 <_printf_i+0xce>
 8007cbc:	680e      	ldr	r6, [r1, #0]
 8007cbe:	602b      	str	r3, [r5, #0]
 8007cc0:	2e00      	cmp	r6, #0
 8007cc2:	da03      	bge.n	8007ccc <_printf_i+0xc8>
 8007cc4:	232d      	movs	r3, #45	; 0x2d
 8007cc6:	4276      	negs	r6, r6
 8007cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ccc:	485e      	ldr	r0, [pc, #376]	; (8007e48 <_printf_i+0x244>)
 8007cce:	230a      	movs	r3, #10
 8007cd0:	e019      	b.n	8007d06 <_printf_i+0x102>
 8007cd2:	680e      	ldr	r6, [r1, #0]
 8007cd4:	602b      	str	r3, [r5, #0]
 8007cd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007cda:	bf18      	it	ne
 8007cdc:	b236      	sxthne	r6, r6
 8007cde:	e7ef      	b.n	8007cc0 <_printf_i+0xbc>
 8007ce0:	682b      	ldr	r3, [r5, #0]
 8007ce2:	6820      	ldr	r0, [r4, #0]
 8007ce4:	1d19      	adds	r1, r3, #4
 8007ce6:	6029      	str	r1, [r5, #0]
 8007ce8:	0601      	lsls	r1, r0, #24
 8007cea:	d501      	bpl.n	8007cf0 <_printf_i+0xec>
 8007cec:	681e      	ldr	r6, [r3, #0]
 8007cee:	e002      	b.n	8007cf6 <_printf_i+0xf2>
 8007cf0:	0646      	lsls	r6, r0, #25
 8007cf2:	d5fb      	bpl.n	8007cec <_printf_i+0xe8>
 8007cf4:	881e      	ldrh	r6, [r3, #0]
 8007cf6:	4854      	ldr	r0, [pc, #336]	; (8007e48 <_printf_i+0x244>)
 8007cf8:	2f6f      	cmp	r7, #111	; 0x6f
 8007cfa:	bf0c      	ite	eq
 8007cfc:	2308      	moveq	r3, #8
 8007cfe:	230a      	movne	r3, #10
 8007d00:	2100      	movs	r1, #0
 8007d02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d06:	6865      	ldr	r5, [r4, #4]
 8007d08:	60a5      	str	r5, [r4, #8]
 8007d0a:	2d00      	cmp	r5, #0
 8007d0c:	bfa2      	ittt	ge
 8007d0e:	6821      	ldrge	r1, [r4, #0]
 8007d10:	f021 0104 	bicge.w	r1, r1, #4
 8007d14:	6021      	strge	r1, [r4, #0]
 8007d16:	b90e      	cbnz	r6, 8007d1c <_printf_i+0x118>
 8007d18:	2d00      	cmp	r5, #0
 8007d1a:	d04d      	beq.n	8007db8 <_printf_i+0x1b4>
 8007d1c:	4615      	mov	r5, r2
 8007d1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d22:	fb03 6711 	mls	r7, r3, r1, r6
 8007d26:	5dc7      	ldrb	r7, [r0, r7]
 8007d28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d2c:	4637      	mov	r7, r6
 8007d2e:	42bb      	cmp	r3, r7
 8007d30:	460e      	mov	r6, r1
 8007d32:	d9f4      	bls.n	8007d1e <_printf_i+0x11a>
 8007d34:	2b08      	cmp	r3, #8
 8007d36:	d10b      	bne.n	8007d50 <_printf_i+0x14c>
 8007d38:	6823      	ldr	r3, [r4, #0]
 8007d3a:	07de      	lsls	r6, r3, #31
 8007d3c:	d508      	bpl.n	8007d50 <_printf_i+0x14c>
 8007d3e:	6923      	ldr	r3, [r4, #16]
 8007d40:	6861      	ldr	r1, [r4, #4]
 8007d42:	4299      	cmp	r1, r3
 8007d44:	bfde      	ittt	le
 8007d46:	2330      	movle	r3, #48	; 0x30
 8007d48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d50:	1b52      	subs	r2, r2, r5
 8007d52:	6122      	str	r2, [r4, #16]
 8007d54:	f8cd a000 	str.w	sl, [sp]
 8007d58:	464b      	mov	r3, r9
 8007d5a:	aa03      	add	r2, sp, #12
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	4640      	mov	r0, r8
 8007d60:	f7ff fee2 	bl	8007b28 <_printf_common>
 8007d64:	3001      	adds	r0, #1
 8007d66:	d14c      	bne.n	8007e02 <_printf_i+0x1fe>
 8007d68:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6c:	b004      	add	sp, #16
 8007d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d72:	4835      	ldr	r0, [pc, #212]	; (8007e48 <_printf_i+0x244>)
 8007d74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007d78:	6829      	ldr	r1, [r5, #0]
 8007d7a:	6823      	ldr	r3, [r4, #0]
 8007d7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d80:	6029      	str	r1, [r5, #0]
 8007d82:	061d      	lsls	r5, r3, #24
 8007d84:	d514      	bpl.n	8007db0 <_printf_i+0x1ac>
 8007d86:	07df      	lsls	r7, r3, #31
 8007d88:	bf44      	itt	mi
 8007d8a:	f043 0320 	orrmi.w	r3, r3, #32
 8007d8e:	6023      	strmi	r3, [r4, #0]
 8007d90:	b91e      	cbnz	r6, 8007d9a <_printf_i+0x196>
 8007d92:	6823      	ldr	r3, [r4, #0]
 8007d94:	f023 0320 	bic.w	r3, r3, #32
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	2310      	movs	r3, #16
 8007d9c:	e7b0      	b.n	8007d00 <_printf_i+0xfc>
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	f043 0320 	orr.w	r3, r3, #32
 8007da4:	6023      	str	r3, [r4, #0]
 8007da6:	2378      	movs	r3, #120	; 0x78
 8007da8:	4828      	ldr	r0, [pc, #160]	; (8007e4c <_printf_i+0x248>)
 8007daa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007dae:	e7e3      	b.n	8007d78 <_printf_i+0x174>
 8007db0:	0659      	lsls	r1, r3, #25
 8007db2:	bf48      	it	mi
 8007db4:	b2b6      	uxthmi	r6, r6
 8007db6:	e7e6      	b.n	8007d86 <_printf_i+0x182>
 8007db8:	4615      	mov	r5, r2
 8007dba:	e7bb      	b.n	8007d34 <_printf_i+0x130>
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	6826      	ldr	r6, [r4, #0]
 8007dc0:	6961      	ldr	r1, [r4, #20]
 8007dc2:	1d18      	adds	r0, r3, #4
 8007dc4:	6028      	str	r0, [r5, #0]
 8007dc6:	0635      	lsls	r5, r6, #24
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	d501      	bpl.n	8007dd0 <_printf_i+0x1cc>
 8007dcc:	6019      	str	r1, [r3, #0]
 8007dce:	e002      	b.n	8007dd6 <_printf_i+0x1d2>
 8007dd0:	0670      	lsls	r0, r6, #25
 8007dd2:	d5fb      	bpl.n	8007dcc <_printf_i+0x1c8>
 8007dd4:	8019      	strh	r1, [r3, #0]
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	6123      	str	r3, [r4, #16]
 8007dda:	4615      	mov	r5, r2
 8007ddc:	e7ba      	b.n	8007d54 <_printf_i+0x150>
 8007dde:	682b      	ldr	r3, [r5, #0]
 8007de0:	1d1a      	adds	r2, r3, #4
 8007de2:	602a      	str	r2, [r5, #0]
 8007de4:	681d      	ldr	r5, [r3, #0]
 8007de6:	6862      	ldr	r2, [r4, #4]
 8007de8:	2100      	movs	r1, #0
 8007dea:	4628      	mov	r0, r5
 8007dec:	f7f8 fa18 	bl	8000220 <memchr>
 8007df0:	b108      	cbz	r0, 8007df6 <_printf_i+0x1f2>
 8007df2:	1b40      	subs	r0, r0, r5
 8007df4:	6060      	str	r0, [r4, #4]
 8007df6:	6863      	ldr	r3, [r4, #4]
 8007df8:	6123      	str	r3, [r4, #16]
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e00:	e7a8      	b.n	8007d54 <_printf_i+0x150>
 8007e02:	6923      	ldr	r3, [r4, #16]
 8007e04:	462a      	mov	r2, r5
 8007e06:	4649      	mov	r1, r9
 8007e08:	4640      	mov	r0, r8
 8007e0a:	47d0      	blx	sl
 8007e0c:	3001      	adds	r0, #1
 8007e0e:	d0ab      	beq.n	8007d68 <_printf_i+0x164>
 8007e10:	6823      	ldr	r3, [r4, #0]
 8007e12:	079b      	lsls	r3, r3, #30
 8007e14:	d413      	bmi.n	8007e3e <_printf_i+0x23a>
 8007e16:	68e0      	ldr	r0, [r4, #12]
 8007e18:	9b03      	ldr	r3, [sp, #12]
 8007e1a:	4298      	cmp	r0, r3
 8007e1c:	bfb8      	it	lt
 8007e1e:	4618      	movlt	r0, r3
 8007e20:	e7a4      	b.n	8007d6c <_printf_i+0x168>
 8007e22:	2301      	movs	r3, #1
 8007e24:	4632      	mov	r2, r6
 8007e26:	4649      	mov	r1, r9
 8007e28:	4640      	mov	r0, r8
 8007e2a:	47d0      	blx	sl
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	d09b      	beq.n	8007d68 <_printf_i+0x164>
 8007e30:	3501      	adds	r5, #1
 8007e32:	68e3      	ldr	r3, [r4, #12]
 8007e34:	9903      	ldr	r1, [sp, #12]
 8007e36:	1a5b      	subs	r3, r3, r1
 8007e38:	42ab      	cmp	r3, r5
 8007e3a:	dcf2      	bgt.n	8007e22 <_printf_i+0x21e>
 8007e3c:	e7eb      	b.n	8007e16 <_printf_i+0x212>
 8007e3e:	2500      	movs	r5, #0
 8007e40:	f104 0619 	add.w	r6, r4, #25
 8007e44:	e7f5      	b.n	8007e32 <_printf_i+0x22e>
 8007e46:	bf00      	nop
 8007e48:	0800adb4 	.word	0x0800adb4
 8007e4c:	0800adc5 	.word	0x0800adc5

08007e50 <sniprintf>:
 8007e50:	b40c      	push	{r2, r3}
 8007e52:	b530      	push	{r4, r5, lr}
 8007e54:	4b17      	ldr	r3, [pc, #92]	; (8007eb4 <sniprintf+0x64>)
 8007e56:	1e0c      	subs	r4, r1, #0
 8007e58:	681d      	ldr	r5, [r3, #0]
 8007e5a:	b09d      	sub	sp, #116	; 0x74
 8007e5c:	da08      	bge.n	8007e70 <sniprintf+0x20>
 8007e5e:	238b      	movs	r3, #139	; 0x8b
 8007e60:	602b      	str	r3, [r5, #0]
 8007e62:	f04f 30ff 	mov.w	r0, #4294967295
 8007e66:	b01d      	add	sp, #116	; 0x74
 8007e68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e6c:	b002      	add	sp, #8
 8007e6e:	4770      	bx	lr
 8007e70:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007e74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007e78:	bf14      	ite	ne
 8007e7a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007e7e:	4623      	moveq	r3, r4
 8007e80:	9304      	str	r3, [sp, #16]
 8007e82:	9307      	str	r3, [sp, #28]
 8007e84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007e88:	9002      	str	r0, [sp, #8]
 8007e8a:	9006      	str	r0, [sp, #24]
 8007e8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007e90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007e92:	ab21      	add	r3, sp, #132	; 0x84
 8007e94:	a902      	add	r1, sp, #8
 8007e96:	4628      	mov	r0, r5
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	f001 fc1d 	bl	80096d8 <_svfiprintf_r>
 8007e9e:	1c43      	adds	r3, r0, #1
 8007ea0:	bfbc      	itt	lt
 8007ea2:	238b      	movlt	r3, #139	; 0x8b
 8007ea4:	602b      	strlt	r3, [r5, #0]
 8007ea6:	2c00      	cmp	r4, #0
 8007ea8:	d0dd      	beq.n	8007e66 <sniprintf+0x16>
 8007eaa:	9b02      	ldr	r3, [sp, #8]
 8007eac:	2200      	movs	r2, #0
 8007eae:	701a      	strb	r2, [r3, #0]
 8007eb0:	e7d9      	b.n	8007e66 <sniprintf+0x16>
 8007eb2:	bf00      	nop
 8007eb4:	20000014 	.word	0x20000014

08007eb8 <siscanf>:
 8007eb8:	b40e      	push	{r1, r2, r3}
 8007eba:	b510      	push	{r4, lr}
 8007ebc:	b09f      	sub	sp, #124	; 0x7c
 8007ebe:	ac21      	add	r4, sp, #132	; 0x84
 8007ec0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007ec4:	f854 2b04 	ldr.w	r2, [r4], #4
 8007ec8:	9201      	str	r2, [sp, #4]
 8007eca:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007ece:	9004      	str	r0, [sp, #16]
 8007ed0:	9008      	str	r0, [sp, #32]
 8007ed2:	f7f8 f99d 	bl	8000210 <strlen>
 8007ed6:	4b0c      	ldr	r3, [pc, #48]	; (8007f08 <siscanf+0x50>)
 8007ed8:	9005      	str	r0, [sp, #20]
 8007eda:	9009      	str	r0, [sp, #36]	; 0x24
 8007edc:	930d      	str	r3, [sp, #52]	; 0x34
 8007ede:	480b      	ldr	r0, [pc, #44]	; (8007f0c <siscanf+0x54>)
 8007ee0:	9a01      	ldr	r2, [sp, #4]
 8007ee2:	6800      	ldr	r0, [r0, #0]
 8007ee4:	9403      	str	r4, [sp, #12]
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	9311      	str	r3, [sp, #68]	; 0x44
 8007eea:	9316      	str	r3, [sp, #88]	; 0x58
 8007eec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007ef0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007ef4:	a904      	add	r1, sp, #16
 8007ef6:	4623      	mov	r3, r4
 8007ef8:	f001 fd48 	bl	800998c <__ssvfiscanf_r>
 8007efc:	b01f      	add	sp, #124	; 0x7c
 8007efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f02:	b003      	add	sp, #12
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	08007f33 	.word	0x08007f33
 8007f0c:	20000014 	.word	0x20000014

08007f10 <__sread>:
 8007f10:	b510      	push	{r4, lr}
 8007f12:	460c      	mov	r4, r1
 8007f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f18:	f002 f802 	bl	8009f20 <_read_r>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	bfab      	itete	ge
 8007f20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f22:	89a3      	ldrhlt	r3, [r4, #12]
 8007f24:	181b      	addge	r3, r3, r0
 8007f26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f2a:	bfac      	ite	ge
 8007f2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f2e:	81a3      	strhlt	r3, [r4, #12]
 8007f30:	bd10      	pop	{r4, pc}

08007f32 <__seofread>:
 8007f32:	2000      	movs	r0, #0
 8007f34:	4770      	bx	lr

08007f36 <__swrite>:
 8007f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f3a:	461f      	mov	r7, r3
 8007f3c:	898b      	ldrh	r3, [r1, #12]
 8007f3e:	05db      	lsls	r3, r3, #23
 8007f40:	4605      	mov	r5, r0
 8007f42:	460c      	mov	r4, r1
 8007f44:	4616      	mov	r6, r2
 8007f46:	d505      	bpl.n	8007f54 <__swrite+0x1e>
 8007f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f000 fec4 	bl	8008cdc <_lseek_r>
 8007f54:	89a3      	ldrh	r3, [r4, #12]
 8007f56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f5e:	81a3      	strh	r3, [r4, #12]
 8007f60:	4632      	mov	r2, r6
 8007f62:	463b      	mov	r3, r7
 8007f64:	4628      	mov	r0, r5
 8007f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f6a:	f000 b817 	b.w	8007f9c <_write_r>

08007f6e <__sseek>:
 8007f6e:	b510      	push	{r4, lr}
 8007f70:	460c      	mov	r4, r1
 8007f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f76:	f000 feb1 	bl	8008cdc <_lseek_r>
 8007f7a:	1c43      	adds	r3, r0, #1
 8007f7c:	89a3      	ldrh	r3, [r4, #12]
 8007f7e:	bf15      	itete	ne
 8007f80:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f8a:	81a3      	strheq	r3, [r4, #12]
 8007f8c:	bf18      	it	ne
 8007f8e:	81a3      	strhne	r3, [r4, #12]
 8007f90:	bd10      	pop	{r4, pc}

08007f92 <__sclose>:
 8007f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f96:	f000 b813 	b.w	8007fc0 <_close_r>
	...

08007f9c <_write_r>:
 8007f9c:	b538      	push	{r3, r4, r5, lr}
 8007f9e:	4d07      	ldr	r5, [pc, #28]	; (8007fbc <_write_r+0x20>)
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	4608      	mov	r0, r1
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	602a      	str	r2, [r5, #0]
 8007faa:	461a      	mov	r2, r3
 8007fac:	f7fa f863 	bl	8002076 <_write>
 8007fb0:	1c43      	adds	r3, r0, #1
 8007fb2:	d102      	bne.n	8007fba <_write_r+0x1e>
 8007fb4:	682b      	ldr	r3, [r5, #0]
 8007fb6:	b103      	cbz	r3, 8007fba <_write_r+0x1e>
 8007fb8:	6023      	str	r3, [r4, #0]
 8007fba:	bd38      	pop	{r3, r4, r5, pc}
 8007fbc:	200008dc 	.word	0x200008dc

08007fc0 <_close_r>:
 8007fc0:	b538      	push	{r3, r4, r5, lr}
 8007fc2:	4d06      	ldr	r5, [pc, #24]	; (8007fdc <_close_r+0x1c>)
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	4608      	mov	r0, r1
 8007fca:	602b      	str	r3, [r5, #0]
 8007fcc:	f7fa f86f 	bl	80020ae <_close>
 8007fd0:	1c43      	adds	r3, r0, #1
 8007fd2:	d102      	bne.n	8007fda <_close_r+0x1a>
 8007fd4:	682b      	ldr	r3, [r5, #0]
 8007fd6:	b103      	cbz	r3, 8007fda <_close_r+0x1a>
 8007fd8:	6023      	str	r3, [r4, #0]
 8007fda:	bd38      	pop	{r3, r4, r5, pc}
 8007fdc:	200008dc 	.word	0x200008dc

08007fe0 <quorem>:
 8007fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe4:	6903      	ldr	r3, [r0, #16]
 8007fe6:	690c      	ldr	r4, [r1, #16]
 8007fe8:	42a3      	cmp	r3, r4
 8007fea:	4607      	mov	r7, r0
 8007fec:	f2c0 8081 	blt.w	80080f2 <quorem+0x112>
 8007ff0:	3c01      	subs	r4, #1
 8007ff2:	f101 0814 	add.w	r8, r1, #20
 8007ff6:	f100 0514 	add.w	r5, r0, #20
 8007ffa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ffe:	9301      	str	r3, [sp, #4]
 8008000:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008004:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008008:	3301      	adds	r3, #1
 800800a:	429a      	cmp	r2, r3
 800800c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008010:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008014:	fbb2 f6f3 	udiv	r6, r2, r3
 8008018:	d331      	bcc.n	800807e <quorem+0x9e>
 800801a:	f04f 0e00 	mov.w	lr, #0
 800801e:	4640      	mov	r0, r8
 8008020:	46ac      	mov	ip, r5
 8008022:	46f2      	mov	sl, lr
 8008024:	f850 2b04 	ldr.w	r2, [r0], #4
 8008028:	b293      	uxth	r3, r2
 800802a:	fb06 e303 	mla	r3, r6, r3, lr
 800802e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008032:	b29b      	uxth	r3, r3
 8008034:	ebaa 0303 	sub.w	r3, sl, r3
 8008038:	f8dc a000 	ldr.w	sl, [ip]
 800803c:	0c12      	lsrs	r2, r2, #16
 800803e:	fa13 f38a 	uxtah	r3, r3, sl
 8008042:	fb06 e202 	mla	r2, r6, r2, lr
 8008046:	9300      	str	r3, [sp, #0]
 8008048:	9b00      	ldr	r3, [sp, #0]
 800804a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800804e:	b292      	uxth	r2, r2
 8008050:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008054:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008058:	f8bd 3000 	ldrh.w	r3, [sp]
 800805c:	4581      	cmp	r9, r0
 800805e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008062:	f84c 3b04 	str.w	r3, [ip], #4
 8008066:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800806a:	d2db      	bcs.n	8008024 <quorem+0x44>
 800806c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008070:	b92b      	cbnz	r3, 800807e <quorem+0x9e>
 8008072:	9b01      	ldr	r3, [sp, #4]
 8008074:	3b04      	subs	r3, #4
 8008076:	429d      	cmp	r5, r3
 8008078:	461a      	mov	r2, r3
 800807a:	d32e      	bcc.n	80080da <quorem+0xfa>
 800807c:	613c      	str	r4, [r7, #16]
 800807e:	4638      	mov	r0, r7
 8008080:	f001 f8d6 	bl	8009230 <__mcmp>
 8008084:	2800      	cmp	r0, #0
 8008086:	db24      	blt.n	80080d2 <quorem+0xf2>
 8008088:	3601      	adds	r6, #1
 800808a:	4628      	mov	r0, r5
 800808c:	f04f 0c00 	mov.w	ip, #0
 8008090:	f858 2b04 	ldr.w	r2, [r8], #4
 8008094:	f8d0 e000 	ldr.w	lr, [r0]
 8008098:	b293      	uxth	r3, r2
 800809a:	ebac 0303 	sub.w	r3, ip, r3
 800809e:	0c12      	lsrs	r2, r2, #16
 80080a0:	fa13 f38e 	uxtah	r3, r3, lr
 80080a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80080a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080b2:	45c1      	cmp	r9, r8
 80080b4:	f840 3b04 	str.w	r3, [r0], #4
 80080b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80080bc:	d2e8      	bcs.n	8008090 <quorem+0xb0>
 80080be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080c6:	b922      	cbnz	r2, 80080d2 <quorem+0xf2>
 80080c8:	3b04      	subs	r3, #4
 80080ca:	429d      	cmp	r5, r3
 80080cc:	461a      	mov	r2, r3
 80080ce:	d30a      	bcc.n	80080e6 <quorem+0x106>
 80080d0:	613c      	str	r4, [r7, #16]
 80080d2:	4630      	mov	r0, r6
 80080d4:	b003      	add	sp, #12
 80080d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080da:	6812      	ldr	r2, [r2, #0]
 80080dc:	3b04      	subs	r3, #4
 80080de:	2a00      	cmp	r2, #0
 80080e0:	d1cc      	bne.n	800807c <quorem+0x9c>
 80080e2:	3c01      	subs	r4, #1
 80080e4:	e7c7      	b.n	8008076 <quorem+0x96>
 80080e6:	6812      	ldr	r2, [r2, #0]
 80080e8:	3b04      	subs	r3, #4
 80080ea:	2a00      	cmp	r2, #0
 80080ec:	d1f0      	bne.n	80080d0 <quorem+0xf0>
 80080ee:	3c01      	subs	r4, #1
 80080f0:	e7eb      	b.n	80080ca <quorem+0xea>
 80080f2:	2000      	movs	r0, #0
 80080f4:	e7ee      	b.n	80080d4 <quorem+0xf4>
	...

080080f8 <_dtoa_r>:
 80080f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fc:	ed2d 8b04 	vpush	{d8-d9}
 8008100:	ec57 6b10 	vmov	r6, r7, d0
 8008104:	b093      	sub	sp, #76	; 0x4c
 8008106:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008108:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800810c:	9106      	str	r1, [sp, #24]
 800810e:	ee10 aa10 	vmov	sl, s0
 8008112:	4604      	mov	r4, r0
 8008114:	9209      	str	r2, [sp, #36]	; 0x24
 8008116:	930c      	str	r3, [sp, #48]	; 0x30
 8008118:	46bb      	mov	fp, r7
 800811a:	b975      	cbnz	r5, 800813a <_dtoa_r+0x42>
 800811c:	2010      	movs	r0, #16
 800811e:	f000 fdef 	bl	8008d00 <malloc>
 8008122:	4602      	mov	r2, r0
 8008124:	6260      	str	r0, [r4, #36]	; 0x24
 8008126:	b920      	cbnz	r0, 8008132 <_dtoa_r+0x3a>
 8008128:	4ba7      	ldr	r3, [pc, #668]	; (80083c8 <_dtoa_r+0x2d0>)
 800812a:	21ea      	movs	r1, #234	; 0xea
 800812c:	48a7      	ldr	r0, [pc, #668]	; (80083cc <_dtoa_r+0x2d4>)
 800812e:	f002 f883 	bl	800a238 <__assert_func>
 8008132:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008136:	6005      	str	r5, [r0, #0]
 8008138:	60c5      	str	r5, [r0, #12]
 800813a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800813c:	6819      	ldr	r1, [r3, #0]
 800813e:	b151      	cbz	r1, 8008156 <_dtoa_r+0x5e>
 8008140:	685a      	ldr	r2, [r3, #4]
 8008142:	604a      	str	r2, [r1, #4]
 8008144:	2301      	movs	r3, #1
 8008146:	4093      	lsls	r3, r2
 8008148:	608b      	str	r3, [r1, #8]
 800814a:	4620      	mov	r0, r4
 800814c:	f000 fe2e 	bl	8008dac <_Bfree>
 8008150:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008152:	2200      	movs	r2, #0
 8008154:	601a      	str	r2, [r3, #0]
 8008156:	1e3b      	subs	r3, r7, #0
 8008158:	bfaa      	itet	ge
 800815a:	2300      	movge	r3, #0
 800815c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008160:	f8c8 3000 	strge.w	r3, [r8]
 8008164:	4b9a      	ldr	r3, [pc, #616]	; (80083d0 <_dtoa_r+0x2d8>)
 8008166:	bfbc      	itt	lt
 8008168:	2201      	movlt	r2, #1
 800816a:	f8c8 2000 	strlt.w	r2, [r8]
 800816e:	ea33 030b 	bics.w	r3, r3, fp
 8008172:	d11b      	bne.n	80081ac <_dtoa_r+0xb4>
 8008174:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008176:	f242 730f 	movw	r3, #9999	; 0x270f
 800817a:	6013      	str	r3, [r2, #0]
 800817c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008180:	4333      	orrs	r3, r6
 8008182:	f000 8592 	beq.w	8008caa <_dtoa_r+0xbb2>
 8008186:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008188:	b963      	cbnz	r3, 80081a4 <_dtoa_r+0xac>
 800818a:	4b92      	ldr	r3, [pc, #584]	; (80083d4 <_dtoa_r+0x2dc>)
 800818c:	e022      	b.n	80081d4 <_dtoa_r+0xdc>
 800818e:	4b92      	ldr	r3, [pc, #584]	; (80083d8 <_dtoa_r+0x2e0>)
 8008190:	9301      	str	r3, [sp, #4]
 8008192:	3308      	adds	r3, #8
 8008194:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008196:	6013      	str	r3, [r2, #0]
 8008198:	9801      	ldr	r0, [sp, #4]
 800819a:	b013      	add	sp, #76	; 0x4c
 800819c:	ecbd 8b04 	vpop	{d8-d9}
 80081a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a4:	4b8b      	ldr	r3, [pc, #556]	; (80083d4 <_dtoa_r+0x2dc>)
 80081a6:	9301      	str	r3, [sp, #4]
 80081a8:	3303      	adds	r3, #3
 80081aa:	e7f3      	b.n	8008194 <_dtoa_r+0x9c>
 80081ac:	2200      	movs	r2, #0
 80081ae:	2300      	movs	r3, #0
 80081b0:	4650      	mov	r0, sl
 80081b2:	4659      	mov	r1, fp
 80081b4:	f7f8 fca8 	bl	8000b08 <__aeabi_dcmpeq>
 80081b8:	ec4b ab19 	vmov	d9, sl, fp
 80081bc:	4680      	mov	r8, r0
 80081be:	b158      	cbz	r0, 80081d8 <_dtoa_r+0xe0>
 80081c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081c2:	2301      	movs	r3, #1
 80081c4:	6013      	str	r3, [r2, #0]
 80081c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f000 856b 	beq.w	8008ca4 <_dtoa_r+0xbac>
 80081ce:	4883      	ldr	r0, [pc, #524]	; (80083dc <_dtoa_r+0x2e4>)
 80081d0:	6018      	str	r0, [r3, #0]
 80081d2:	1e43      	subs	r3, r0, #1
 80081d4:	9301      	str	r3, [sp, #4]
 80081d6:	e7df      	b.n	8008198 <_dtoa_r+0xa0>
 80081d8:	ec4b ab10 	vmov	d0, sl, fp
 80081dc:	aa10      	add	r2, sp, #64	; 0x40
 80081de:	a911      	add	r1, sp, #68	; 0x44
 80081e0:	4620      	mov	r0, r4
 80081e2:	f001 f8cb 	bl	800937c <__d2b>
 80081e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80081ea:	ee08 0a10 	vmov	s16, r0
 80081ee:	2d00      	cmp	r5, #0
 80081f0:	f000 8084 	beq.w	80082fc <_dtoa_r+0x204>
 80081f4:	ee19 3a90 	vmov	r3, s19
 80081f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008200:	4656      	mov	r6, sl
 8008202:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008206:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800820a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800820e:	4b74      	ldr	r3, [pc, #464]	; (80083e0 <_dtoa_r+0x2e8>)
 8008210:	2200      	movs	r2, #0
 8008212:	4630      	mov	r0, r6
 8008214:	4639      	mov	r1, r7
 8008216:	f7f8 f857 	bl	80002c8 <__aeabi_dsub>
 800821a:	a365      	add	r3, pc, #404	; (adr r3, 80083b0 <_dtoa_r+0x2b8>)
 800821c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008220:	f7f8 fa0a 	bl	8000638 <__aeabi_dmul>
 8008224:	a364      	add	r3, pc, #400	; (adr r3, 80083b8 <_dtoa_r+0x2c0>)
 8008226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822a:	f7f8 f84f 	bl	80002cc <__adddf3>
 800822e:	4606      	mov	r6, r0
 8008230:	4628      	mov	r0, r5
 8008232:	460f      	mov	r7, r1
 8008234:	f7f8 f996 	bl	8000564 <__aeabi_i2d>
 8008238:	a361      	add	r3, pc, #388	; (adr r3, 80083c0 <_dtoa_r+0x2c8>)
 800823a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823e:	f7f8 f9fb 	bl	8000638 <__aeabi_dmul>
 8008242:	4602      	mov	r2, r0
 8008244:	460b      	mov	r3, r1
 8008246:	4630      	mov	r0, r6
 8008248:	4639      	mov	r1, r7
 800824a:	f7f8 f83f 	bl	80002cc <__adddf3>
 800824e:	4606      	mov	r6, r0
 8008250:	460f      	mov	r7, r1
 8008252:	f7f8 fca1 	bl	8000b98 <__aeabi_d2iz>
 8008256:	2200      	movs	r2, #0
 8008258:	9000      	str	r0, [sp, #0]
 800825a:	2300      	movs	r3, #0
 800825c:	4630      	mov	r0, r6
 800825e:	4639      	mov	r1, r7
 8008260:	f7f8 fc5c 	bl	8000b1c <__aeabi_dcmplt>
 8008264:	b150      	cbz	r0, 800827c <_dtoa_r+0x184>
 8008266:	9800      	ldr	r0, [sp, #0]
 8008268:	f7f8 f97c 	bl	8000564 <__aeabi_i2d>
 800826c:	4632      	mov	r2, r6
 800826e:	463b      	mov	r3, r7
 8008270:	f7f8 fc4a 	bl	8000b08 <__aeabi_dcmpeq>
 8008274:	b910      	cbnz	r0, 800827c <_dtoa_r+0x184>
 8008276:	9b00      	ldr	r3, [sp, #0]
 8008278:	3b01      	subs	r3, #1
 800827a:	9300      	str	r3, [sp, #0]
 800827c:	9b00      	ldr	r3, [sp, #0]
 800827e:	2b16      	cmp	r3, #22
 8008280:	d85a      	bhi.n	8008338 <_dtoa_r+0x240>
 8008282:	9a00      	ldr	r2, [sp, #0]
 8008284:	4b57      	ldr	r3, [pc, #348]	; (80083e4 <_dtoa_r+0x2ec>)
 8008286:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800828a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828e:	ec51 0b19 	vmov	r0, r1, d9
 8008292:	f7f8 fc43 	bl	8000b1c <__aeabi_dcmplt>
 8008296:	2800      	cmp	r0, #0
 8008298:	d050      	beq.n	800833c <_dtoa_r+0x244>
 800829a:	9b00      	ldr	r3, [sp, #0]
 800829c:	3b01      	subs	r3, #1
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	2300      	movs	r3, #0
 80082a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80082a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082a6:	1b5d      	subs	r5, r3, r5
 80082a8:	1e6b      	subs	r3, r5, #1
 80082aa:	9305      	str	r3, [sp, #20]
 80082ac:	bf45      	ittet	mi
 80082ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80082b2:	9304      	strmi	r3, [sp, #16]
 80082b4:	2300      	movpl	r3, #0
 80082b6:	2300      	movmi	r3, #0
 80082b8:	bf4c      	ite	mi
 80082ba:	9305      	strmi	r3, [sp, #20]
 80082bc:	9304      	strpl	r3, [sp, #16]
 80082be:	9b00      	ldr	r3, [sp, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	db3d      	blt.n	8008340 <_dtoa_r+0x248>
 80082c4:	9b05      	ldr	r3, [sp, #20]
 80082c6:	9a00      	ldr	r2, [sp, #0]
 80082c8:	920a      	str	r2, [sp, #40]	; 0x28
 80082ca:	4413      	add	r3, r2
 80082cc:	9305      	str	r3, [sp, #20]
 80082ce:	2300      	movs	r3, #0
 80082d0:	9307      	str	r3, [sp, #28]
 80082d2:	9b06      	ldr	r3, [sp, #24]
 80082d4:	2b09      	cmp	r3, #9
 80082d6:	f200 8089 	bhi.w	80083ec <_dtoa_r+0x2f4>
 80082da:	2b05      	cmp	r3, #5
 80082dc:	bfc4      	itt	gt
 80082de:	3b04      	subgt	r3, #4
 80082e0:	9306      	strgt	r3, [sp, #24]
 80082e2:	9b06      	ldr	r3, [sp, #24]
 80082e4:	f1a3 0302 	sub.w	r3, r3, #2
 80082e8:	bfcc      	ite	gt
 80082ea:	2500      	movgt	r5, #0
 80082ec:	2501      	movle	r5, #1
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	f200 8087 	bhi.w	8008402 <_dtoa_r+0x30a>
 80082f4:	e8df f003 	tbb	[pc, r3]
 80082f8:	59383a2d 	.word	0x59383a2d
 80082fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008300:	441d      	add	r5, r3
 8008302:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008306:	2b20      	cmp	r3, #32
 8008308:	bfc1      	itttt	gt
 800830a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800830e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008312:	fa0b f303 	lslgt.w	r3, fp, r3
 8008316:	fa26 f000 	lsrgt.w	r0, r6, r0
 800831a:	bfda      	itte	le
 800831c:	f1c3 0320 	rsble	r3, r3, #32
 8008320:	fa06 f003 	lslle.w	r0, r6, r3
 8008324:	4318      	orrgt	r0, r3
 8008326:	f7f8 f90d 	bl	8000544 <__aeabi_ui2d>
 800832a:	2301      	movs	r3, #1
 800832c:	4606      	mov	r6, r0
 800832e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008332:	3d01      	subs	r5, #1
 8008334:	930e      	str	r3, [sp, #56]	; 0x38
 8008336:	e76a      	b.n	800820e <_dtoa_r+0x116>
 8008338:	2301      	movs	r3, #1
 800833a:	e7b2      	b.n	80082a2 <_dtoa_r+0x1aa>
 800833c:	900b      	str	r0, [sp, #44]	; 0x2c
 800833e:	e7b1      	b.n	80082a4 <_dtoa_r+0x1ac>
 8008340:	9b04      	ldr	r3, [sp, #16]
 8008342:	9a00      	ldr	r2, [sp, #0]
 8008344:	1a9b      	subs	r3, r3, r2
 8008346:	9304      	str	r3, [sp, #16]
 8008348:	4253      	negs	r3, r2
 800834a:	9307      	str	r3, [sp, #28]
 800834c:	2300      	movs	r3, #0
 800834e:	930a      	str	r3, [sp, #40]	; 0x28
 8008350:	e7bf      	b.n	80082d2 <_dtoa_r+0x1da>
 8008352:	2300      	movs	r3, #0
 8008354:	9308      	str	r3, [sp, #32]
 8008356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008358:	2b00      	cmp	r3, #0
 800835a:	dc55      	bgt.n	8008408 <_dtoa_r+0x310>
 800835c:	2301      	movs	r3, #1
 800835e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008362:	461a      	mov	r2, r3
 8008364:	9209      	str	r2, [sp, #36]	; 0x24
 8008366:	e00c      	b.n	8008382 <_dtoa_r+0x28a>
 8008368:	2301      	movs	r3, #1
 800836a:	e7f3      	b.n	8008354 <_dtoa_r+0x25c>
 800836c:	2300      	movs	r3, #0
 800836e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008370:	9308      	str	r3, [sp, #32]
 8008372:	9b00      	ldr	r3, [sp, #0]
 8008374:	4413      	add	r3, r2
 8008376:	9302      	str	r3, [sp, #8]
 8008378:	3301      	adds	r3, #1
 800837a:	2b01      	cmp	r3, #1
 800837c:	9303      	str	r3, [sp, #12]
 800837e:	bfb8      	it	lt
 8008380:	2301      	movlt	r3, #1
 8008382:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008384:	2200      	movs	r2, #0
 8008386:	6042      	str	r2, [r0, #4]
 8008388:	2204      	movs	r2, #4
 800838a:	f102 0614 	add.w	r6, r2, #20
 800838e:	429e      	cmp	r6, r3
 8008390:	6841      	ldr	r1, [r0, #4]
 8008392:	d93d      	bls.n	8008410 <_dtoa_r+0x318>
 8008394:	4620      	mov	r0, r4
 8008396:	f000 fcc9 	bl	8008d2c <_Balloc>
 800839a:	9001      	str	r0, [sp, #4]
 800839c:	2800      	cmp	r0, #0
 800839e:	d13b      	bne.n	8008418 <_dtoa_r+0x320>
 80083a0:	4b11      	ldr	r3, [pc, #68]	; (80083e8 <_dtoa_r+0x2f0>)
 80083a2:	4602      	mov	r2, r0
 80083a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80083a8:	e6c0      	b.n	800812c <_dtoa_r+0x34>
 80083aa:	2301      	movs	r3, #1
 80083ac:	e7df      	b.n	800836e <_dtoa_r+0x276>
 80083ae:	bf00      	nop
 80083b0:	636f4361 	.word	0x636f4361
 80083b4:	3fd287a7 	.word	0x3fd287a7
 80083b8:	8b60c8b3 	.word	0x8b60c8b3
 80083bc:	3fc68a28 	.word	0x3fc68a28
 80083c0:	509f79fb 	.word	0x509f79fb
 80083c4:	3fd34413 	.word	0x3fd34413
 80083c8:	0800ade3 	.word	0x0800ade3
 80083cc:	0800adfa 	.word	0x0800adfa
 80083d0:	7ff00000 	.word	0x7ff00000
 80083d4:	0800addf 	.word	0x0800addf
 80083d8:	0800add6 	.word	0x0800add6
 80083dc:	0800afda 	.word	0x0800afda
 80083e0:	3ff80000 	.word	0x3ff80000
 80083e4:	0800aef0 	.word	0x0800aef0
 80083e8:	0800ae55 	.word	0x0800ae55
 80083ec:	2501      	movs	r5, #1
 80083ee:	2300      	movs	r3, #0
 80083f0:	9306      	str	r3, [sp, #24]
 80083f2:	9508      	str	r5, [sp, #32]
 80083f4:	f04f 33ff 	mov.w	r3, #4294967295
 80083f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80083fc:	2200      	movs	r2, #0
 80083fe:	2312      	movs	r3, #18
 8008400:	e7b0      	b.n	8008364 <_dtoa_r+0x26c>
 8008402:	2301      	movs	r3, #1
 8008404:	9308      	str	r3, [sp, #32]
 8008406:	e7f5      	b.n	80083f4 <_dtoa_r+0x2fc>
 8008408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800840a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800840e:	e7b8      	b.n	8008382 <_dtoa_r+0x28a>
 8008410:	3101      	adds	r1, #1
 8008412:	6041      	str	r1, [r0, #4]
 8008414:	0052      	lsls	r2, r2, #1
 8008416:	e7b8      	b.n	800838a <_dtoa_r+0x292>
 8008418:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800841a:	9a01      	ldr	r2, [sp, #4]
 800841c:	601a      	str	r2, [r3, #0]
 800841e:	9b03      	ldr	r3, [sp, #12]
 8008420:	2b0e      	cmp	r3, #14
 8008422:	f200 809d 	bhi.w	8008560 <_dtoa_r+0x468>
 8008426:	2d00      	cmp	r5, #0
 8008428:	f000 809a 	beq.w	8008560 <_dtoa_r+0x468>
 800842c:	9b00      	ldr	r3, [sp, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	dd32      	ble.n	8008498 <_dtoa_r+0x3a0>
 8008432:	4ab7      	ldr	r2, [pc, #732]	; (8008710 <_dtoa_r+0x618>)
 8008434:	f003 030f 	and.w	r3, r3, #15
 8008438:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800843c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008440:	9b00      	ldr	r3, [sp, #0]
 8008442:	05d8      	lsls	r0, r3, #23
 8008444:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008448:	d516      	bpl.n	8008478 <_dtoa_r+0x380>
 800844a:	4bb2      	ldr	r3, [pc, #712]	; (8008714 <_dtoa_r+0x61c>)
 800844c:	ec51 0b19 	vmov	r0, r1, d9
 8008450:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008454:	f7f8 fa1a 	bl	800088c <__aeabi_ddiv>
 8008458:	f007 070f 	and.w	r7, r7, #15
 800845c:	4682      	mov	sl, r0
 800845e:	468b      	mov	fp, r1
 8008460:	2503      	movs	r5, #3
 8008462:	4eac      	ldr	r6, [pc, #688]	; (8008714 <_dtoa_r+0x61c>)
 8008464:	b957      	cbnz	r7, 800847c <_dtoa_r+0x384>
 8008466:	4642      	mov	r2, r8
 8008468:	464b      	mov	r3, r9
 800846a:	4650      	mov	r0, sl
 800846c:	4659      	mov	r1, fp
 800846e:	f7f8 fa0d 	bl	800088c <__aeabi_ddiv>
 8008472:	4682      	mov	sl, r0
 8008474:	468b      	mov	fp, r1
 8008476:	e028      	b.n	80084ca <_dtoa_r+0x3d2>
 8008478:	2502      	movs	r5, #2
 800847a:	e7f2      	b.n	8008462 <_dtoa_r+0x36a>
 800847c:	07f9      	lsls	r1, r7, #31
 800847e:	d508      	bpl.n	8008492 <_dtoa_r+0x39a>
 8008480:	4640      	mov	r0, r8
 8008482:	4649      	mov	r1, r9
 8008484:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008488:	f7f8 f8d6 	bl	8000638 <__aeabi_dmul>
 800848c:	3501      	adds	r5, #1
 800848e:	4680      	mov	r8, r0
 8008490:	4689      	mov	r9, r1
 8008492:	107f      	asrs	r7, r7, #1
 8008494:	3608      	adds	r6, #8
 8008496:	e7e5      	b.n	8008464 <_dtoa_r+0x36c>
 8008498:	f000 809b 	beq.w	80085d2 <_dtoa_r+0x4da>
 800849c:	9b00      	ldr	r3, [sp, #0]
 800849e:	4f9d      	ldr	r7, [pc, #628]	; (8008714 <_dtoa_r+0x61c>)
 80084a0:	425e      	negs	r6, r3
 80084a2:	4b9b      	ldr	r3, [pc, #620]	; (8008710 <_dtoa_r+0x618>)
 80084a4:	f006 020f 	and.w	r2, r6, #15
 80084a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b0:	ec51 0b19 	vmov	r0, r1, d9
 80084b4:	f7f8 f8c0 	bl	8000638 <__aeabi_dmul>
 80084b8:	1136      	asrs	r6, r6, #4
 80084ba:	4682      	mov	sl, r0
 80084bc:	468b      	mov	fp, r1
 80084be:	2300      	movs	r3, #0
 80084c0:	2502      	movs	r5, #2
 80084c2:	2e00      	cmp	r6, #0
 80084c4:	d17a      	bne.n	80085bc <_dtoa_r+0x4c4>
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1d3      	bne.n	8008472 <_dtoa_r+0x37a>
 80084ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 8082 	beq.w	80085d6 <_dtoa_r+0x4de>
 80084d2:	4b91      	ldr	r3, [pc, #580]	; (8008718 <_dtoa_r+0x620>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	4650      	mov	r0, sl
 80084d8:	4659      	mov	r1, fp
 80084da:	f7f8 fb1f 	bl	8000b1c <__aeabi_dcmplt>
 80084de:	2800      	cmp	r0, #0
 80084e0:	d079      	beq.n	80085d6 <_dtoa_r+0x4de>
 80084e2:	9b03      	ldr	r3, [sp, #12]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d076      	beq.n	80085d6 <_dtoa_r+0x4de>
 80084e8:	9b02      	ldr	r3, [sp, #8]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	dd36      	ble.n	800855c <_dtoa_r+0x464>
 80084ee:	9b00      	ldr	r3, [sp, #0]
 80084f0:	4650      	mov	r0, sl
 80084f2:	4659      	mov	r1, fp
 80084f4:	1e5f      	subs	r7, r3, #1
 80084f6:	2200      	movs	r2, #0
 80084f8:	4b88      	ldr	r3, [pc, #544]	; (800871c <_dtoa_r+0x624>)
 80084fa:	f7f8 f89d 	bl	8000638 <__aeabi_dmul>
 80084fe:	9e02      	ldr	r6, [sp, #8]
 8008500:	4682      	mov	sl, r0
 8008502:	468b      	mov	fp, r1
 8008504:	3501      	adds	r5, #1
 8008506:	4628      	mov	r0, r5
 8008508:	f7f8 f82c 	bl	8000564 <__aeabi_i2d>
 800850c:	4652      	mov	r2, sl
 800850e:	465b      	mov	r3, fp
 8008510:	f7f8 f892 	bl	8000638 <__aeabi_dmul>
 8008514:	4b82      	ldr	r3, [pc, #520]	; (8008720 <_dtoa_r+0x628>)
 8008516:	2200      	movs	r2, #0
 8008518:	f7f7 fed8 	bl	80002cc <__adddf3>
 800851c:	46d0      	mov	r8, sl
 800851e:	46d9      	mov	r9, fp
 8008520:	4682      	mov	sl, r0
 8008522:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008526:	2e00      	cmp	r6, #0
 8008528:	d158      	bne.n	80085dc <_dtoa_r+0x4e4>
 800852a:	4b7e      	ldr	r3, [pc, #504]	; (8008724 <_dtoa_r+0x62c>)
 800852c:	2200      	movs	r2, #0
 800852e:	4640      	mov	r0, r8
 8008530:	4649      	mov	r1, r9
 8008532:	f7f7 fec9 	bl	80002c8 <__aeabi_dsub>
 8008536:	4652      	mov	r2, sl
 8008538:	465b      	mov	r3, fp
 800853a:	4680      	mov	r8, r0
 800853c:	4689      	mov	r9, r1
 800853e:	f7f8 fb0b 	bl	8000b58 <__aeabi_dcmpgt>
 8008542:	2800      	cmp	r0, #0
 8008544:	f040 8295 	bne.w	8008a72 <_dtoa_r+0x97a>
 8008548:	4652      	mov	r2, sl
 800854a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800854e:	4640      	mov	r0, r8
 8008550:	4649      	mov	r1, r9
 8008552:	f7f8 fae3 	bl	8000b1c <__aeabi_dcmplt>
 8008556:	2800      	cmp	r0, #0
 8008558:	f040 8289 	bne.w	8008a6e <_dtoa_r+0x976>
 800855c:	ec5b ab19 	vmov	sl, fp, d9
 8008560:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008562:	2b00      	cmp	r3, #0
 8008564:	f2c0 8148 	blt.w	80087f8 <_dtoa_r+0x700>
 8008568:	9a00      	ldr	r2, [sp, #0]
 800856a:	2a0e      	cmp	r2, #14
 800856c:	f300 8144 	bgt.w	80087f8 <_dtoa_r+0x700>
 8008570:	4b67      	ldr	r3, [pc, #412]	; (8008710 <_dtoa_r+0x618>)
 8008572:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008576:	e9d3 8900 	ldrd	r8, r9, [r3]
 800857a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800857c:	2b00      	cmp	r3, #0
 800857e:	f280 80d5 	bge.w	800872c <_dtoa_r+0x634>
 8008582:	9b03      	ldr	r3, [sp, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	f300 80d1 	bgt.w	800872c <_dtoa_r+0x634>
 800858a:	f040 826f 	bne.w	8008a6c <_dtoa_r+0x974>
 800858e:	4b65      	ldr	r3, [pc, #404]	; (8008724 <_dtoa_r+0x62c>)
 8008590:	2200      	movs	r2, #0
 8008592:	4640      	mov	r0, r8
 8008594:	4649      	mov	r1, r9
 8008596:	f7f8 f84f 	bl	8000638 <__aeabi_dmul>
 800859a:	4652      	mov	r2, sl
 800859c:	465b      	mov	r3, fp
 800859e:	f7f8 fad1 	bl	8000b44 <__aeabi_dcmpge>
 80085a2:	9e03      	ldr	r6, [sp, #12]
 80085a4:	4637      	mov	r7, r6
 80085a6:	2800      	cmp	r0, #0
 80085a8:	f040 8245 	bne.w	8008a36 <_dtoa_r+0x93e>
 80085ac:	9d01      	ldr	r5, [sp, #4]
 80085ae:	2331      	movs	r3, #49	; 0x31
 80085b0:	f805 3b01 	strb.w	r3, [r5], #1
 80085b4:	9b00      	ldr	r3, [sp, #0]
 80085b6:	3301      	adds	r3, #1
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	e240      	b.n	8008a3e <_dtoa_r+0x946>
 80085bc:	07f2      	lsls	r2, r6, #31
 80085be:	d505      	bpl.n	80085cc <_dtoa_r+0x4d4>
 80085c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085c4:	f7f8 f838 	bl	8000638 <__aeabi_dmul>
 80085c8:	3501      	adds	r5, #1
 80085ca:	2301      	movs	r3, #1
 80085cc:	1076      	asrs	r6, r6, #1
 80085ce:	3708      	adds	r7, #8
 80085d0:	e777      	b.n	80084c2 <_dtoa_r+0x3ca>
 80085d2:	2502      	movs	r5, #2
 80085d4:	e779      	b.n	80084ca <_dtoa_r+0x3d2>
 80085d6:	9f00      	ldr	r7, [sp, #0]
 80085d8:	9e03      	ldr	r6, [sp, #12]
 80085da:	e794      	b.n	8008506 <_dtoa_r+0x40e>
 80085dc:	9901      	ldr	r1, [sp, #4]
 80085de:	4b4c      	ldr	r3, [pc, #304]	; (8008710 <_dtoa_r+0x618>)
 80085e0:	4431      	add	r1, r6
 80085e2:	910d      	str	r1, [sp, #52]	; 0x34
 80085e4:	9908      	ldr	r1, [sp, #32]
 80085e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80085ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085ee:	2900      	cmp	r1, #0
 80085f0:	d043      	beq.n	800867a <_dtoa_r+0x582>
 80085f2:	494d      	ldr	r1, [pc, #308]	; (8008728 <_dtoa_r+0x630>)
 80085f4:	2000      	movs	r0, #0
 80085f6:	f7f8 f949 	bl	800088c <__aeabi_ddiv>
 80085fa:	4652      	mov	r2, sl
 80085fc:	465b      	mov	r3, fp
 80085fe:	f7f7 fe63 	bl	80002c8 <__aeabi_dsub>
 8008602:	9d01      	ldr	r5, [sp, #4]
 8008604:	4682      	mov	sl, r0
 8008606:	468b      	mov	fp, r1
 8008608:	4649      	mov	r1, r9
 800860a:	4640      	mov	r0, r8
 800860c:	f7f8 fac4 	bl	8000b98 <__aeabi_d2iz>
 8008610:	4606      	mov	r6, r0
 8008612:	f7f7 ffa7 	bl	8000564 <__aeabi_i2d>
 8008616:	4602      	mov	r2, r0
 8008618:	460b      	mov	r3, r1
 800861a:	4640      	mov	r0, r8
 800861c:	4649      	mov	r1, r9
 800861e:	f7f7 fe53 	bl	80002c8 <__aeabi_dsub>
 8008622:	3630      	adds	r6, #48	; 0x30
 8008624:	f805 6b01 	strb.w	r6, [r5], #1
 8008628:	4652      	mov	r2, sl
 800862a:	465b      	mov	r3, fp
 800862c:	4680      	mov	r8, r0
 800862e:	4689      	mov	r9, r1
 8008630:	f7f8 fa74 	bl	8000b1c <__aeabi_dcmplt>
 8008634:	2800      	cmp	r0, #0
 8008636:	d163      	bne.n	8008700 <_dtoa_r+0x608>
 8008638:	4642      	mov	r2, r8
 800863a:	464b      	mov	r3, r9
 800863c:	4936      	ldr	r1, [pc, #216]	; (8008718 <_dtoa_r+0x620>)
 800863e:	2000      	movs	r0, #0
 8008640:	f7f7 fe42 	bl	80002c8 <__aeabi_dsub>
 8008644:	4652      	mov	r2, sl
 8008646:	465b      	mov	r3, fp
 8008648:	f7f8 fa68 	bl	8000b1c <__aeabi_dcmplt>
 800864c:	2800      	cmp	r0, #0
 800864e:	f040 80b5 	bne.w	80087bc <_dtoa_r+0x6c4>
 8008652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008654:	429d      	cmp	r5, r3
 8008656:	d081      	beq.n	800855c <_dtoa_r+0x464>
 8008658:	4b30      	ldr	r3, [pc, #192]	; (800871c <_dtoa_r+0x624>)
 800865a:	2200      	movs	r2, #0
 800865c:	4650      	mov	r0, sl
 800865e:	4659      	mov	r1, fp
 8008660:	f7f7 ffea 	bl	8000638 <__aeabi_dmul>
 8008664:	4b2d      	ldr	r3, [pc, #180]	; (800871c <_dtoa_r+0x624>)
 8008666:	4682      	mov	sl, r0
 8008668:	468b      	mov	fp, r1
 800866a:	4640      	mov	r0, r8
 800866c:	4649      	mov	r1, r9
 800866e:	2200      	movs	r2, #0
 8008670:	f7f7 ffe2 	bl	8000638 <__aeabi_dmul>
 8008674:	4680      	mov	r8, r0
 8008676:	4689      	mov	r9, r1
 8008678:	e7c6      	b.n	8008608 <_dtoa_r+0x510>
 800867a:	4650      	mov	r0, sl
 800867c:	4659      	mov	r1, fp
 800867e:	f7f7 ffdb 	bl	8000638 <__aeabi_dmul>
 8008682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008684:	9d01      	ldr	r5, [sp, #4]
 8008686:	930f      	str	r3, [sp, #60]	; 0x3c
 8008688:	4682      	mov	sl, r0
 800868a:	468b      	mov	fp, r1
 800868c:	4649      	mov	r1, r9
 800868e:	4640      	mov	r0, r8
 8008690:	f7f8 fa82 	bl	8000b98 <__aeabi_d2iz>
 8008694:	4606      	mov	r6, r0
 8008696:	f7f7 ff65 	bl	8000564 <__aeabi_i2d>
 800869a:	3630      	adds	r6, #48	; 0x30
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	4640      	mov	r0, r8
 80086a2:	4649      	mov	r1, r9
 80086a4:	f7f7 fe10 	bl	80002c8 <__aeabi_dsub>
 80086a8:	f805 6b01 	strb.w	r6, [r5], #1
 80086ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086ae:	429d      	cmp	r5, r3
 80086b0:	4680      	mov	r8, r0
 80086b2:	4689      	mov	r9, r1
 80086b4:	f04f 0200 	mov.w	r2, #0
 80086b8:	d124      	bne.n	8008704 <_dtoa_r+0x60c>
 80086ba:	4b1b      	ldr	r3, [pc, #108]	; (8008728 <_dtoa_r+0x630>)
 80086bc:	4650      	mov	r0, sl
 80086be:	4659      	mov	r1, fp
 80086c0:	f7f7 fe04 	bl	80002cc <__adddf3>
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	4640      	mov	r0, r8
 80086ca:	4649      	mov	r1, r9
 80086cc:	f7f8 fa44 	bl	8000b58 <__aeabi_dcmpgt>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d173      	bne.n	80087bc <_dtoa_r+0x6c4>
 80086d4:	4652      	mov	r2, sl
 80086d6:	465b      	mov	r3, fp
 80086d8:	4913      	ldr	r1, [pc, #76]	; (8008728 <_dtoa_r+0x630>)
 80086da:	2000      	movs	r0, #0
 80086dc:	f7f7 fdf4 	bl	80002c8 <__aeabi_dsub>
 80086e0:	4602      	mov	r2, r0
 80086e2:	460b      	mov	r3, r1
 80086e4:	4640      	mov	r0, r8
 80086e6:	4649      	mov	r1, r9
 80086e8:	f7f8 fa18 	bl	8000b1c <__aeabi_dcmplt>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	f43f af35 	beq.w	800855c <_dtoa_r+0x464>
 80086f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80086f4:	1e6b      	subs	r3, r5, #1
 80086f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80086f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80086fc:	2b30      	cmp	r3, #48	; 0x30
 80086fe:	d0f8      	beq.n	80086f2 <_dtoa_r+0x5fa>
 8008700:	9700      	str	r7, [sp, #0]
 8008702:	e049      	b.n	8008798 <_dtoa_r+0x6a0>
 8008704:	4b05      	ldr	r3, [pc, #20]	; (800871c <_dtoa_r+0x624>)
 8008706:	f7f7 ff97 	bl	8000638 <__aeabi_dmul>
 800870a:	4680      	mov	r8, r0
 800870c:	4689      	mov	r9, r1
 800870e:	e7bd      	b.n	800868c <_dtoa_r+0x594>
 8008710:	0800aef0 	.word	0x0800aef0
 8008714:	0800aec8 	.word	0x0800aec8
 8008718:	3ff00000 	.word	0x3ff00000
 800871c:	40240000 	.word	0x40240000
 8008720:	401c0000 	.word	0x401c0000
 8008724:	40140000 	.word	0x40140000
 8008728:	3fe00000 	.word	0x3fe00000
 800872c:	9d01      	ldr	r5, [sp, #4]
 800872e:	4656      	mov	r6, sl
 8008730:	465f      	mov	r7, fp
 8008732:	4642      	mov	r2, r8
 8008734:	464b      	mov	r3, r9
 8008736:	4630      	mov	r0, r6
 8008738:	4639      	mov	r1, r7
 800873a:	f7f8 f8a7 	bl	800088c <__aeabi_ddiv>
 800873e:	f7f8 fa2b 	bl	8000b98 <__aeabi_d2iz>
 8008742:	4682      	mov	sl, r0
 8008744:	f7f7 ff0e 	bl	8000564 <__aeabi_i2d>
 8008748:	4642      	mov	r2, r8
 800874a:	464b      	mov	r3, r9
 800874c:	f7f7 ff74 	bl	8000638 <__aeabi_dmul>
 8008750:	4602      	mov	r2, r0
 8008752:	460b      	mov	r3, r1
 8008754:	4630      	mov	r0, r6
 8008756:	4639      	mov	r1, r7
 8008758:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800875c:	f7f7 fdb4 	bl	80002c8 <__aeabi_dsub>
 8008760:	f805 6b01 	strb.w	r6, [r5], #1
 8008764:	9e01      	ldr	r6, [sp, #4]
 8008766:	9f03      	ldr	r7, [sp, #12]
 8008768:	1bae      	subs	r6, r5, r6
 800876a:	42b7      	cmp	r7, r6
 800876c:	4602      	mov	r2, r0
 800876e:	460b      	mov	r3, r1
 8008770:	d135      	bne.n	80087de <_dtoa_r+0x6e6>
 8008772:	f7f7 fdab 	bl	80002cc <__adddf3>
 8008776:	4642      	mov	r2, r8
 8008778:	464b      	mov	r3, r9
 800877a:	4606      	mov	r6, r0
 800877c:	460f      	mov	r7, r1
 800877e:	f7f8 f9eb 	bl	8000b58 <__aeabi_dcmpgt>
 8008782:	b9d0      	cbnz	r0, 80087ba <_dtoa_r+0x6c2>
 8008784:	4642      	mov	r2, r8
 8008786:	464b      	mov	r3, r9
 8008788:	4630      	mov	r0, r6
 800878a:	4639      	mov	r1, r7
 800878c:	f7f8 f9bc 	bl	8000b08 <__aeabi_dcmpeq>
 8008790:	b110      	cbz	r0, 8008798 <_dtoa_r+0x6a0>
 8008792:	f01a 0f01 	tst.w	sl, #1
 8008796:	d110      	bne.n	80087ba <_dtoa_r+0x6c2>
 8008798:	4620      	mov	r0, r4
 800879a:	ee18 1a10 	vmov	r1, s16
 800879e:	f000 fb05 	bl	8008dac <_Bfree>
 80087a2:	2300      	movs	r3, #0
 80087a4:	9800      	ldr	r0, [sp, #0]
 80087a6:	702b      	strb	r3, [r5, #0]
 80087a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087aa:	3001      	adds	r0, #1
 80087ac:	6018      	str	r0, [r3, #0]
 80087ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f43f acf1 	beq.w	8008198 <_dtoa_r+0xa0>
 80087b6:	601d      	str	r5, [r3, #0]
 80087b8:	e4ee      	b.n	8008198 <_dtoa_r+0xa0>
 80087ba:	9f00      	ldr	r7, [sp, #0]
 80087bc:	462b      	mov	r3, r5
 80087be:	461d      	mov	r5, r3
 80087c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087c4:	2a39      	cmp	r2, #57	; 0x39
 80087c6:	d106      	bne.n	80087d6 <_dtoa_r+0x6de>
 80087c8:	9a01      	ldr	r2, [sp, #4]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d1f7      	bne.n	80087be <_dtoa_r+0x6c6>
 80087ce:	9901      	ldr	r1, [sp, #4]
 80087d0:	2230      	movs	r2, #48	; 0x30
 80087d2:	3701      	adds	r7, #1
 80087d4:	700a      	strb	r2, [r1, #0]
 80087d6:	781a      	ldrb	r2, [r3, #0]
 80087d8:	3201      	adds	r2, #1
 80087da:	701a      	strb	r2, [r3, #0]
 80087dc:	e790      	b.n	8008700 <_dtoa_r+0x608>
 80087de:	4ba6      	ldr	r3, [pc, #664]	; (8008a78 <_dtoa_r+0x980>)
 80087e0:	2200      	movs	r2, #0
 80087e2:	f7f7 ff29 	bl	8000638 <__aeabi_dmul>
 80087e6:	2200      	movs	r2, #0
 80087e8:	2300      	movs	r3, #0
 80087ea:	4606      	mov	r6, r0
 80087ec:	460f      	mov	r7, r1
 80087ee:	f7f8 f98b 	bl	8000b08 <__aeabi_dcmpeq>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	d09d      	beq.n	8008732 <_dtoa_r+0x63a>
 80087f6:	e7cf      	b.n	8008798 <_dtoa_r+0x6a0>
 80087f8:	9a08      	ldr	r2, [sp, #32]
 80087fa:	2a00      	cmp	r2, #0
 80087fc:	f000 80d7 	beq.w	80089ae <_dtoa_r+0x8b6>
 8008800:	9a06      	ldr	r2, [sp, #24]
 8008802:	2a01      	cmp	r2, #1
 8008804:	f300 80ba 	bgt.w	800897c <_dtoa_r+0x884>
 8008808:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800880a:	2a00      	cmp	r2, #0
 800880c:	f000 80b2 	beq.w	8008974 <_dtoa_r+0x87c>
 8008810:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008814:	9e07      	ldr	r6, [sp, #28]
 8008816:	9d04      	ldr	r5, [sp, #16]
 8008818:	9a04      	ldr	r2, [sp, #16]
 800881a:	441a      	add	r2, r3
 800881c:	9204      	str	r2, [sp, #16]
 800881e:	9a05      	ldr	r2, [sp, #20]
 8008820:	2101      	movs	r1, #1
 8008822:	441a      	add	r2, r3
 8008824:	4620      	mov	r0, r4
 8008826:	9205      	str	r2, [sp, #20]
 8008828:	f000 fb78 	bl	8008f1c <__i2b>
 800882c:	4607      	mov	r7, r0
 800882e:	2d00      	cmp	r5, #0
 8008830:	dd0c      	ble.n	800884c <_dtoa_r+0x754>
 8008832:	9b05      	ldr	r3, [sp, #20]
 8008834:	2b00      	cmp	r3, #0
 8008836:	dd09      	ble.n	800884c <_dtoa_r+0x754>
 8008838:	42ab      	cmp	r3, r5
 800883a:	9a04      	ldr	r2, [sp, #16]
 800883c:	bfa8      	it	ge
 800883e:	462b      	movge	r3, r5
 8008840:	1ad2      	subs	r2, r2, r3
 8008842:	9204      	str	r2, [sp, #16]
 8008844:	9a05      	ldr	r2, [sp, #20]
 8008846:	1aed      	subs	r5, r5, r3
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	9305      	str	r3, [sp, #20]
 800884c:	9b07      	ldr	r3, [sp, #28]
 800884e:	b31b      	cbz	r3, 8008898 <_dtoa_r+0x7a0>
 8008850:	9b08      	ldr	r3, [sp, #32]
 8008852:	2b00      	cmp	r3, #0
 8008854:	f000 80af 	beq.w	80089b6 <_dtoa_r+0x8be>
 8008858:	2e00      	cmp	r6, #0
 800885a:	dd13      	ble.n	8008884 <_dtoa_r+0x78c>
 800885c:	4639      	mov	r1, r7
 800885e:	4632      	mov	r2, r6
 8008860:	4620      	mov	r0, r4
 8008862:	f000 fc1b 	bl	800909c <__pow5mult>
 8008866:	ee18 2a10 	vmov	r2, s16
 800886a:	4601      	mov	r1, r0
 800886c:	4607      	mov	r7, r0
 800886e:	4620      	mov	r0, r4
 8008870:	f000 fb6a 	bl	8008f48 <__multiply>
 8008874:	ee18 1a10 	vmov	r1, s16
 8008878:	4680      	mov	r8, r0
 800887a:	4620      	mov	r0, r4
 800887c:	f000 fa96 	bl	8008dac <_Bfree>
 8008880:	ee08 8a10 	vmov	s16, r8
 8008884:	9b07      	ldr	r3, [sp, #28]
 8008886:	1b9a      	subs	r2, r3, r6
 8008888:	d006      	beq.n	8008898 <_dtoa_r+0x7a0>
 800888a:	ee18 1a10 	vmov	r1, s16
 800888e:	4620      	mov	r0, r4
 8008890:	f000 fc04 	bl	800909c <__pow5mult>
 8008894:	ee08 0a10 	vmov	s16, r0
 8008898:	2101      	movs	r1, #1
 800889a:	4620      	mov	r0, r4
 800889c:	f000 fb3e 	bl	8008f1c <__i2b>
 80088a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	4606      	mov	r6, r0
 80088a6:	f340 8088 	ble.w	80089ba <_dtoa_r+0x8c2>
 80088aa:	461a      	mov	r2, r3
 80088ac:	4601      	mov	r1, r0
 80088ae:	4620      	mov	r0, r4
 80088b0:	f000 fbf4 	bl	800909c <__pow5mult>
 80088b4:	9b06      	ldr	r3, [sp, #24]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	4606      	mov	r6, r0
 80088ba:	f340 8081 	ble.w	80089c0 <_dtoa_r+0x8c8>
 80088be:	f04f 0800 	mov.w	r8, #0
 80088c2:	6933      	ldr	r3, [r6, #16]
 80088c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80088c8:	6918      	ldr	r0, [r3, #16]
 80088ca:	f000 fad7 	bl	8008e7c <__hi0bits>
 80088ce:	f1c0 0020 	rsb	r0, r0, #32
 80088d2:	9b05      	ldr	r3, [sp, #20]
 80088d4:	4418      	add	r0, r3
 80088d6:	f010 001f 	ands.w	r0, r0, #31
 80088da:	f000 8092 	beq.w	8008a02 <_dtoa_r+0x90a>
 80088de:	f1c0 0320 	rsb	r3, r0, #32
 80088e2:	2b04      	cmp	r3, #4
 80088e4:	f340 808a 	ble.w	80089fc <_dtoa_r+0x904>
 80088e8:	f1c0 001c 	rsb	r0, r0, #28
 80088ec:	9b04      	ldr	r3, [sp, #16]
 80088ee:	4403      	add	r3, r0
 80088f0:	9304      	str	r3, [sp, #16]
 80088f2:	9b05      	ldr	r3, [sp, #20]
 80088f4:	4403      	add	r3, r0
 80088f6:	4405      	add	r5, r0
 80088f8:	9305      	str	r3, [sp, #20]
 80088fa:	9b04      	ldr	r3, [sp, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	dd07      	ble.n	8008910 <_dtoa_r+0x818>
 8008900:	ee18 1a10 	vmov	r1, s16
 8008904:	461a      	mov	r2, r3
 8008906:	4620      	mov	r0, r4
 8008908:	f000 fc22 	bl	8009150 <__lshift>
 800890c:	ee08 0a10 	vmov	s16, r0
 8008910:	9b05      	ldr	r3, [sp, #20]
 8008912:	2b00      	cmp	r3, #0
 8008914:	dd05      	ble.n	8008922 <_dtoa_r+0x82a>
 8008916:	4631      	mov	r1, r6
 8008918:	461a      	mov	r2, r3
 800891a:	4620      	mov	r0, r4
 800891c:	f000 fc18 	bl	8009150 <__lshift>
 8008920:	4606      	mov	r6, r0
 8008922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008924:	2b00      	cmp	r3, #0
 8008926:	d06e      	beq.n	8008a06 <_dtoa_r+0x90e>
 8008928:	ee18 0a10 	vmov	r0, s16
 800892c:	4631      	mov	r1, r6
 800892e:	f000 fc7f 	bl	8009230 <__mcmp>
 8008932:	2800      	cmp	r0, #0
 8008934:	da67      	bge.n	8008a06 <_dtoa_r+0x90e>
 8008936:	9b00      	ldr	r3, [sp, #0]
 8008938:	3b01      	subs	r3, #1
 800893a:	ee18 1a10 	vmov	r1, s16
 800893e:	9300      	str	r3, [sp, #0]
 8008940:	220a      	movs	r2, #10
 8008942:	2300      	movs	r3, #0
 8008944:	4620      	mov	r0, r4
 8008946:	f000 fa53 	bl	8008df0 <__multadd>
 800894a:	9b08      	ldr	r3, [sp, #32]
 800894c:	ee08 0a10 	vmov	s16, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 81b1 	beq.w	8008cb8 <_dtoa_r+0xbc0>
 8008956:	2300      	movs	r3, #0
 8008958:	4639      	mov	r1, r7
 800895a:	220a      	movs	r2, #10
 800895c:	4620      	mov	r0, r4
 800895e:	f000 fa47 	bl	8008df0 <__multadd>
 8008962:	9b02      	ldr	r3, [sp, #8]
 8008964:	2b00      	cmp	r3, #0
 8008966:	4607      	mov	r7, r0
 8008968:	f300 808e 	bgt.w	8008a88 <_dtoa_r+0x990>
 800896c:	9b06      	ldr	r3, [sp, #24]
 800896e:	2b02      	cmp	r3, #2
 8008970:	dc51      	bgt.n	8008a16 <_dtoa_r+0x91e>
 8008972:	e089      	b.n	8008a88 <_dtoa_r+0x990>
 8008974:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008976:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800897a:	e74b      	b.n	8008814 <_dtoa_r+0x71c>
 800897c:	9b03      	ldr	r3, [sp, #12]
 800897e:	1e5e      	subs	r6, r3, #1
 8008980:	9b07      	ldr	r3, [sp, #28]
 8008982:	42b3      	cmp	r3, r6
 8008984:	bfbf      	itttt	lt
 8008986:	9b07      	ldrlt	r3, [sp, #28]
 8008988:	9607      	strlt	r6, [sp, #28]
 800898a:	1af2      	sublt	r2, r6, r3
 800898c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800898e:	bfb6      	itet	lt
 8008990:	189b      	addlt	r3, r3, r2
 8008992:	1b9e      	subge	r6, r3, r6
 8008994:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008996:	9b03      	ldr	r3, [sp, #12]
 8008998:	bfb8      	it	lt
 800899a:	2600      	movlt	r6, #0
 800899c:	2b00      	cmp	r3, #0
 800899e:	bfb7      	itett	lt
 80089a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80089a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80089a8:	1a9d      	sublt	r5, r3, r2
 80089aa:	2300      	movlt	r3, #0
 80089ac:	e734      	b.n	8008818 <_dtoa_r+0x720>
 80089ae:	9e07      	ldr	r6, [sp, #28]
 80089b0:	9d04      	ldr	r5, [sp, #16]
 80089b2:	9f08      	ldr	r7, [sp, #32]
 80089b4:	e73b      	b.n	800882e <_dtoa_r+0x736>
 80089b6:	9a07      	ldr	r2, [sp, #28]
 80089b8:	e767      	b.n	800888a <_dtoa_r+0x792>
 80089ba:	9b06      	ldr	r3, [sp, #24]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	dc18      	bgt.n	80089f2 <_dtoa_r+0x8fa>
 80089c0:	f1ba 0f00 	cmp.w	sl, #0
 80089c4:	d115      	bne.n	80089f2 <_dtoa_r+0x8fa>
 80089c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089ca:	b993      	cbnz	r3, 80089f2 <_dtoa_r+0x8fa>
 80089cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80089d0:	0d1b      	lsrs	r3, r3, #20
 80089d2:	051b      	lsls	r3, r3, #20
 80089d4:	b183      	cbz	r3, 80089f8 <_dtoa_r+0x900>
 80089d6:	9b04      	ldr	r3, [sp, #16]
 80089d8:	3301      	adds	r3, #1
 80089da:	9304      	str	r3, [sp, #16]
 80089dc:	9b05      	ldr	r3, [sp, #20]
 80089de:	3301      	adds	r3, #1
 80089e0:	9305      	str	r3, [sp, #20]
 80089e2:	f04f 0801 	mov.w	r8, #1
 80089e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f47f af6a 	bne.w	80088c2 <_dtoa_r+0x7ca>
 80089ee:	2001      	movs	r0, #1
 80089f0:	e76f      	b.n	80088d2 <_dtoa_r+0x7da>
 80089f2:	f04f 0800 	mov.w	r8, #0
 80089f6:	e7f6      	b.n	80089e6 <_dtoa_r+0x8ee>
 80089f8:	4698      	mov	r8, r3
 80089fa:	e7f4      	b.n	80089e6 <_dtoa_r+0x8ee>
 80089fc:	f43f af7d 	beq.w	80088fa <_dtoa_r+0x802>
 8008a00:	4618      	mov	r0, r3
 8008a02:	301c      	adds	r0, #28
 8008a04:	e772      	b.n	80088ec <_dtoa_r+0x7f4>
 8008a06:	9b03      	ldr	r3, [sp, #12]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	dc37      	bgt.n	8008a7c <_dtoa_r+0x984>
 8008a0c:	9b06      	ldr	r3, [sp, #24]
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	dd34      	ble.n	8008a7c <_dtoa_r+0x984>
 8008a12:	9b03      	ldr	r3, [sp, #12]
 8008a14:	9302      	str	r3, [sp, #8]
 8008a16:	9b02      	ldr	r3, [sp, #8]
 8008a18:	b96b      	cbnz	r3, 8008a36 <_dtoa_r+0x93e>
 8008a1a:	4631      	mov	r1, r6
 8008a1c:	2205      	movs	r2, #5
 8008a1e:	4620      	mov	r0, r4
 8008a20:	f000 f9e6 	bl	8008df0 <__multadd>
 8008a24:	4601      	mov	r1, r0
 8008a26:	4606      	mov	r6, r0
 8008a28:	ee18 0a10 	vmov	r0, s16
 8008a2c:	f000 fc00 	bl	8009230 <__mcmp>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	f73f adbb 	bgt.w	80085ac <_dtoa_r+0x4b4>
 8008a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a38:	9d01      	ldr	r5, [sp, #4]
 8008a3a:	43db      	mvns	r3, r3
 8008a3c:	9300      	str	r3, [sp, #0]
 8008a3e:	f04f 0800 	mov.w	r8, #0
 8008a42:	4631      	mov	r1, r6
 8008a44:	4620      	mov	r0, r4
 8008a46:	f000 f9b1 	bl	8008dac <_Bfree>
 8008a4a:	2f00      	cmp	r7, #0
 8008a4c:	f43f aea4 	beq.w	8008798 <_dtoa_r+0x6a0>
 8008a50:	f1b8 0f00 	cmp.w	r8, #0
 8008a54:	d005      	beq.n	8008a62 <_dtoa_r+0x96a>
 8008a56:	45b8      	cmp	r8, r7
 8008a58:	d003      	beq.n	8008a62 <_dtoa_r+0x96a>
 8008a5a:	4641      	mov	r1, r8
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f000 f9a5 	bl	8008dac <_Bfree>
 8008a62:	4639      	mov	r1, r7
 8008a64:	4620      	mov	r0, r4
 8008a66:	f000 f9a1 	bl	8008dac <_Bfree>
 8008a6a:	e695      	b.n	8008798 <_dtoa_r+0x6a0>
 8008a6c:	2600      	movs	r6, #0
 8008a6e:	4637      	mov	r7, r6
 8008a70:	e7e1      	b.n	8008a36 <_dtoa_r+0x93e>
 8008a72:	9700      	str	r7, [sp, #0]
 8008a74:	4637      	mov	r7, r6
 8008a76:	e599      	b.n	80085ac <_dtoa_r+0x4b4>
 8008a78:	40240000 	.word	0x40240000
 8008a7c:	9b08      	ldr	r3, [sp, #32]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f000 80ca 	beq.w	8008c18 <_dtoa_r+0xb20>
 8008a84:	9b03      	ldr	r3, [sp, #12]
 8008a86:	9302      	str	r3, [sp, #8]
 8008a88:	2d00      	cmp	r5, #0
 8008a8a:	dd05      	ble.n	8008a98 <_dtoa_r+0x9a0>
 8008a8c:	4639      	mov	r1, r7
 8008a8e:	462a      	mov	r2, r5
 8008a90:	4620      	mov	r0, r4
 8008a92:	f000 fb5d 	bl	8009150 <__lshift>
 8008a96:	4607      	mov	r7, r0
 8008a98:	f1b8 0f00 	cmp.w	r8, #0
 8008a9c:	d05b      	beq.n	8008b56 <_dtoa_r+0xa5e>
 8008a9e:	6879      	ldr	r1, [r7, #4]
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f000 f943 	bl	8008d2c <_Balloc>
 8008aa6:	4605      	mov	r5, r0
 8008aa8:	b928      	cbnz	r0, 8008ab6 <_dtoa_r+0x9be>
 8008aaa:	4b87      	ldr	r3, [pc, #540]	; (8008cc8 <_dtoa_r+0xbd0>)
 8008aac:	4602      	mov	r2, r0
 8008aae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008ab2:	f7ff bb3b 	b.w	800812c <_dtoa_r+0x34>
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	3202      	adds	r2, #2
 8008aba:	0092      	lsls	r2, r2, #2
 8008abc:	f107 010c 	add.w	r1, r7, #12
 8008ac0:	300c      	adds	r0, #12
 8008ac2:	f000 f925 	bl	8008d10 <memcpy>
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	4629      	mov	r1, r5
 8008aca:	4620      	mov	r0, r4
 8008acc:	f000 fb40 	bl	8009150 <__lshift>
 8008ad0:	9b01      	ldr	r3, [sp, #4]
 8008ad2:	f103 0901 	add.w	r9, r3, #1
 8008ad6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008ada:	4413      	add	r3, r2
 8008adc:	9305      	str	r3, [sp, #20]
 8008ade:	f00a 0301 	and.w	r3, sl, #1
 8008ae2:	46b8      	mov	r8, r7
 8008ae4:	9304      	str	r3, [sp, #16]
 8008ae6:	4607      	mov	r7, r0
 8008ae8:	4631      	mov	r1, r6
 8008aea:	ee18 0a10 	vmov	r0, s16
 8008aee:	f7ff fa77 	bl	8007fe0 <quorem>
 8008af2:	4641      	mov	r1, r8
 8008af4:	9002      	str	r0, [sp, #8]
 8008af6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008afa:	ee18 0a10 	vmov	r0, s16
 8008afe:	f000 fb97 	bl	8009230 <__mcmp>
 8008b02:	463a      	mov	r2, r7
 8008b04:	9003      	str	r0, [sp, #12]
 8008b06:	4631      	mov	r1, r6
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f000 fbad 	bl	8009268 <__mdiff>
 8008b0e:	68c2      	ldr	r2, [r0, #12]
 8008b10:	f109 3bff 	add.w	fp, r9, #4294967295
 8008b14:	4605      	mov	r5, r0
 8008b16:	bb02      	cbnz	r2, 8008b5a <_dtoa_r+0xa62>
 8008b18:	4601      	mov	r1, r0
 8008b1a:	ee18 0a10 	vmov	r0, s16
 8008b1e:	f000 fb87 	bl	8009230 <__mcmp>
 8008b22:	4602      	mov	r2, r0
 8008b24:	4629      	mov	r1, r5
 8008b26:	4620      	mov	r0, r4
 8008b28:	9207      	str	r2, [sp, #28]
 8008b2a:	f000 f93f 	bl	8008dac <_Bfree>
 8008b2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008b32:	ea43 0102 	orr.w	r1, r3, r2
 8008b36:	9b04      	ldr	r3, [sp, #16]
 8008b38:	430b      	orrs	r3, r1
 8008b3a:	464d      	mov	r5, r9
 8008b3c:	d10f      	bne.n	8008b5e <_dtoa_r+0xa66>
 8008b3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b42:	d02a      	beq.n	8008b9a <_dtoa_r+0xaa2>
 8008b44:	9b03      	ldr	r3, [sp, #12]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	dd02      	ble.n	8008b50 <_dtoa_r+0xa58>
 8008b4a:	9b02      	ldr	r3, [sp, #8]
 8008b4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008b50:	f88b a000 	strb.w	sl, [fp]
 8008b54:	e775      	b.n	8008a42 <_dtoa_r+0x94a>
 8008b56:	4638      	mov	r0, r7
 8008b58:	e7ba      	b.n	8008ad0 <_dtoa_r+0x9d8>
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	e7e2      	b.n	8008b24 <_dtoa_r+0xa2c>
 8008b5e:	9b03      	ldr	r3, [sp, #12]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	db04      	blt.n	8008b6e <_dtoa_r+0xa76>
 8008b64:	9906      	ldr	r1, [sp, #24]
 8008b66:	430b      	orrs	r3, r1
 8008b68:	9904      	ldr	r1, [sp, #16]
 8008b6a:	430b      	orrs	r3, r1
 8008b6c:	d122      	bne.n	8008bb4 <_dtoa_r+0xabc>
 8008b6e:	2a00      	cmp	r2, #0
 8008b70:	ddee      	ble.n	8008b50 <_dtoa_r+0xa58>
 8008b72:	ee18 1a10 	vmov	r1, s16
 8008b76:	2201      	movs	r2, #1
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f000 fae9 	bl	8009150 <__lshift>
 8008b7e:	4631      	mov	r1, r6
 8008b80:	ee08 0a10 	vmov	s16, r0
 8008b84:	f000 fb54 	bl	8009230 <__mcmp>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	dc03      	bgt.n	8008b94 <_dtoa_r+0xa9c>
 8008b8c:	d1e0      	bne.n	8008b50 <_dtoa_r+0xa58>
 8008b8e:	f01a 0f01 	tst.w	sl, #1
 8008b92:	d0dd      	beq.n	8008b50 <_dtoa_r+0xa58>
 8008b94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b98:	d1d7      	bne.n	8008b4a <_dtoa_r+0xa52>
 8008b9a:	2339      	movs	r3, #57	; 0x39
 8008b9c:	f88b 3000 	strb.w	r3, [fp]
 8008ba0:	462b      	mov	r3, r5
 8008ba2:	461d      	mov	r5, r3
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008baa:	2a39      	cmp	r2, #57	; 0x39
 8008bac:	d071      	beq.n	8008c92 <_dtoa_r+0xb9a>
 8008bae:	3201      	adds	r2, #1
 8008bb0:	701a      	strb	r2, [r3, #0]
 8008bb2:	e746      	b.n	8008a42 <_dtoa_r+0x94a>
 8008bb4:	2a00      	cmp	r2, #0
 8008bb6:	dd07      	ble.n	8008bc8 <_dtoa_r+0xad0>
 8008bb8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008bbc:	d0ed      	beq.n	8008b9a <_dtoa_r+0xaa2>
 8008bbe:	f10a 0301 	add.w	r3, sl, #1
 8008bc2:	f88b 3000 	strb.w	r3, [fp]
 8008bc6:	e73c      	b.n	8008a42 <_dtoa_r+0x94a>
 8008bc8:	9b05      	ldr	r3, [sp, #20]
 8008bca:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008bce:	4599      	cmp	r9, r3
 8008bd0:	d047      	beq.n	8008c62 <_dtoa_r+0xb6a>
 8008bd2:	ee18 1a10 	vmov	r1, s16
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	220a      	movs	r2, #10
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f000 f908 	bl	8008df0 <__multadd>
 8008be0:	45b8      	cmp	r8, r7
 8008be2:	ee08 0a10 	vmov	s16, r0
 8008be6:	f04f 0300 	mov.w	r3, #0
 8008bea:	f04f 020a 	mov.w	r2, #10
 8008bee:	4641      	mov	r1, r8
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	d106      	bne.n	8008c02 <_dtoa_r+0xb0a>
 8008bf4:	f000 f8fc 	bl	8008df0 <__multadd>
 8008bf8:	4680      	mov	r8, r0
 8008bfa:	4607      	mov	r7, r0
 8008bfc:	f109 0901 	add.w	r9, r9, #1
 8008c00:	e772      	b.n	8008ae8 <_dtoa_r+0x9f0>
 8008c02:	f000 f8f5 	bl	8008df0 <__multadd>
 8008c06:	4639      	mov	r1, r7
 8008c08:	4680      	mov	r8, r0
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	220a      	movs	r2, #10
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f000 f8ee 	bl	8008df0 <__multadd>
 8008c14:	4607      	mov	r7, r0
 8008c16:	e7f1      	b.n	8008bfc <_dtoa_r+0xb04>
 8008c18:	9b03      	ldr	r3, [sp, #12]
 8008c1a:	9302      	str	r3, [sp, #8]
 8008c1c:	9d01      	ldr	r5, [sp, #4]
 8008c1e:	ee18 0a10 	vmov	r0, s16
 8008c22:	4631      	mov	r1, r6
 8008c24:	f7ff f9dc 	bl	8007fe0 <quorem>
 8008c28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008c2c:	9b01      	ldr	r3, [sp, #4]
 8008c2e:	f805 ab01 	strb.w	sl, [r5], #1
 8008c32:	1aea      	subs	r2, r5, r3
 8008c34:	9b02      	ldr	r3, [sp, #8]
 8008c36:	4293      	cmp	r3, r2
 8008c38:	dd09      	ble.n	8008c4e <_dtoa_r+0xb56>
 8008c3a:	ee18 1a10 	vmov	r1, s16
 8008c3e:	2300      	movs	r3, #0
 8008c40:	220a      	movs	r2, #10
 8008c42:	4620      	mov	r0, r4
 8008c44:	f000 f8d4 	bl	8008df0 <__multadd>
 8008c48:	ee08 0a10 	vmov	s16, r0
 8008c4c:	e7e7      	b.n	8008c1e <_dtoa_r+0xb26>
 8008c4e:	9b02      	ldr	r3, [sp, #8]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	bfc8      	it	gt
 8008c54:	461d      	movgt	r5, r3
 8008c56:	9b01      	ldr	r3, [sp, #4]
 8008c58:	bfd8      	it	le
 8008c5a:	2501      	movle	r5, #1
 8008c5c:	441d      	add	r5, r3
 8008c5e:	f04f 0800 	mov.w	r8, #0
 8008c62:	ee18 1a10 	vmov	r1, s16
 8008c66:	2201      	movs	r2, #1
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f000 fa71 	bl	8009150 <__lshift>
 8008c6e:	4631      	mov	r1, r6
 8008c70:	ee08 0a10 	vmov	s16, r0
 8008c74:	f000 fadc 	bl	8009230 <__mcmp>
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	dc91      	bgt.n	8008ba0 <_dtoa_r+0xaa8>
 8008c7c:	d102      	bne.n	8008c84 <_dtoa_r+0xb8c>
 8008c7e:	f01a 0f01 	tst.w	sl, #1
 8008c82:	d18d      	bne.n	8008ba0 <_dtoa_r+0xaa8>
 8008c84:	462b      	mov	r3, r5
 8008c86:	461d      	mov	r5, r3
 8008c88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c8c:	2a30      	cmp	r2, #48	; 0x30
 8008c8e:	d0fa      	beq.n	8008c86 <_dtoa_r+0xb8e>
 8008c90:	e6d7      	b.n	8008a42 <_dtoa_r+0x94a>
 8008c92:	9a01      	ldr	r2, [sp, #4]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d184      	bne.n	8008ba2 <_dtoa_r+0xaaa>
 8008c98:	9b00      	ldr	r3, [sp, #0]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	2331      	movs	r3, #49	; 0x31
 8008ca0:	7013      	strb	r3, [r2, #0]
 8008ca2:	e6ce      	b.n	8008a42 <_dtoa_r+0x94a>
 8008ca4:	4b09      	ldr	r3, [pc, #36]	; (8008ccc <_dtoa_r+0xbd4>)
 8008ca6:	f7ff ba95 	b.w	80081d4 <_dtoa_r+0xdc>
 8008caa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f47f aa6e 	bne.w	800818e <_dtoa_r+0x96>
 8008cb2:	4b07      	ldr	r3, [pc, #28]	; (8008cd0 <_dtoa_r+0xbd8>)
 8008cb4:	f7ff ba8e 	b.w	80081d4 <_dtoa_r+0xdc>
 8008cb8:	9b02      	ldr	r3, [sp, #8]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	dcae      	bgt.n	8008c1c <_dtoa_r+0xb24>
 8008cbe:	9b06      	ldr	r3, [sp, #24]
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	f73f aea8 	bgt.w	8008a16 <_dtoa_r+0x91e>
 8008cc6:	e7a9      	b.n	8008c1c <_dtoa_r+0xb24>
 8008cc8:	0800ae55 	.word	0x0800ae55
 8008ccc:	0800afd9 	.word	0x0800afd9
 8008cd0:	0800add6 	.word	0x0800add6

08008cd4 <_localeconv_r>:
 8008cd4:	4800      	ldr	r0, [pc, #0]	; (8008cd8 <_localeconv_r+0x4>)
 8008cd6:	4770      	bx	lr
 8008cd8:	20000168 	.word	0x20000168

08008cdc <_lseek_r>:
 8008cdc:	b538      	push	{r3, r4, r5, lr}
 8008cde:	4d07      	ldr	r5, [pc, #28]	; (8008cfc <_lseek_r+0x20>)
 8008ce0:	4604      	mov	r4, r0
 8008ce2:	4608      	mov	r0, r1
 8008ce4:	4611      	mov	r1, r2
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	602a      	str	r2, [r5, #0]
 8008cea:	461a      	mov	r2, r3
 8008cec:	f7f9 fa06 	bl	80020fc <_lseek>
 8008cf0:	1c43      	adds	r3, r0, #1
 8008cf2:	d102      	bne.n	8008cfa <_lseek_r+0x1e>
 8008cf4:	682b      	ldr	r3, [r5, #0]
 8008cf6:	b103      	cbz	r3, 8008cfa <_lseek_r+0x1e>
 8008cf8:	6023      	str	r3, [r4, #0]
 8008cfa:	bd38      	pop	{r3, r4, r5, pc}
 8008cfc:	200008dc 	.word	0x200008dc

08008d00 <malloc>:
 8008d00:	4b02      	ldr	r3, [pc, #8]	; (8008d0c <malloc+0xc>)
 8008d02:	4601      	mov	r1, r0
 8008d04:	6818      	ldr	r0, [r3, #0]
 8008d06:	f000 bc17 	b.w	8009538 <_malloc_r>
 8008d0a:	bf00      	nop
 8008d0c:	20000014 	.word	0x20000014

08008d10 <memcpy>:
 8008d10:	440a      	add	r2, r1
 8008d12:	4291      	cmp	r1, r2
 8008d14:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d18:	d100      	bne.n	8008d1c <memcpy+0xc>
 8008d1a:	4770      	bx	lr
 8008d1c:	b510      	push	{r4, lr}
 8008d1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d26:	4291      	cmp	r1, r2
 8008d28:	d1f9      	bne.n	8008d1e <memcpy+0xe>
 8008d2a:	bd10      	pop	{r4, pc}

08008d2c <_Balloc>:
 8008d2c:	b570      	push	{r4, r5, r6, lr}
 8008d2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d30:	4604      	mov	r4, r0
 8008d32:	460d      	mov	r5, r1
 8008d34:	b976      	cbnz	r6, 8008d54 <_Balloc+0x28>
 8008d36:	2010      	movs	r0, #16
 8008d38:	f7ff ffe2 	bl	8008d00 <malloc>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	6260      	str	r0, [r4, #36]	; 0x24
 8008d40:	b920      	cbnz	r0, 8008d4c <_Balloc+0x20>
 8008d42:	4b18      	ldr	r3, [pc, #96]	; (8008da4 <_Balloc+0x78>)
 8008d44:	4818      	ldr	r0, [pc, #96]	; (8008da8 <_Balloc+0x7c>)
 8008d46:	2166      	movs	r1, #102	; 0x66
 8008d48:	f001 fa76 	bl	800a238 <__assert_func>
 8008d4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d50:	6006      	str	r6, [r0, #0]
 8008d52:	60c6      	str	r6, [r0, #12]
 8008d54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d56:	68f3      	ldr	r3, [r6, #12]
 8008d58:	b183      	cbz	r3, 8008d7c <_Balloc+0x50>
 8008d5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d62:	b9b8      	cbnz	r0, 8008d94 <_Balloc+0x68>
 8008d64:	2101      	movs	r1, #1
 8008d66:	fa01 f605 	lsl.w	r6, r1, r5
 8008d6a:	1d72      	adds	r2, r6, #5
 8008d6c:	0092      	lsls	r2, r2, #2
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f000 fb60 	bl	8009434 <_calloc_r>
 8008d74:	b160      	cbz	r0, 8008d90 <_Balloc+0x64>
 8008d76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d7a:	e00e      	b.n	8008d9a <_Balloc+0x6e>
 8008d7c:	2221      	movs	r2, #33	; 0x21
 8008d7e:	2104      	movs	r1, #4
 8008d80:	4620      	mov	r0, r4
 8008d82:	f000 fb57 	bl	8009434 <_calloc_r>
 8008d86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d88:	60f0      	str	r0, [r6, #12]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1e4      	bne.n	8008d5a <_Balloc+0x2e>
 8008d90:	2000      	movs	r0, #0
 8008d92:	bd70      	pop	{r4, r5, r6, pc}
 8008d94:	6802      	ldr	r2, [r0, #0]
 8008d96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008da0:	e7f7      	b.n	8008d92 <_Balloc+0x66>
 8008da2:	bf00      	nop
 8008da4:	0800ade3 	.word	0x0800ade3
 8008da8:	0800ae66 	.word	0x0800ae66

08008dac <_Bfree>:
 8008dac:	b570      	push	{r4, r5, r6, lr}
 8008dae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008db0:	4605      	mov	r5, r0
 8008db2:	460c      	mov	r4, r1
 8008db4:	b976      	cbnz	r6, 8008dd4 <_Bfree+0x28>
 8008db6:	2010      	movs	r0, #16
 8008db8:	f7ff ffa2 	bl	8008d00 <malloc>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	6268      	str	r0, [r5, #36]	; 0x24
 8008dc0:	b920      	cbnz	r0, 8008dcc <_Bfree+0x20>
 8008dc2:	4b09      	ldr	r3, [pc, #36]	; (8008de8 <_Bfree+0x3c>)
 8008dc4:	4809      	ldr	r0, [pc, #36]	; (8008dec <_Bfree+0x40>)
 8008dc6:	218a      	movs	r1, #138	; 0x8a
 8008dc8:	f001 fa36 	bl	800a238 <__assert_func>
 8008dcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dd0:	6006      	str	r6, [r0, #0]
 8008dd2:	60c6      	str	r6, [r0, #12]
 8008dd4:	b13c      	cbz	r4, 8008de6 <_Bfree+0x3a>
 8008dd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008dd8:	6862      	ldr	r2, [r4, #4]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008de0:	6021      	str	r1, [r4, #0]
 8008de2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008de6:	bd70      	pop	{r4, r5, r6, pc}
 8008de8:	0800ade3 	.word	0x0800ade3
 8008dec:	0800ae66 	.word	0x0800ae66

08008df0 <__multadd>:
 8008df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008df4:	690d      	ldr	r5, [r1, #16]
 8008df6:	4607      	mov	r7, r0
 8008df8:	460c      	mov	r4, r1
 8008dfa:	461e      	mov	r6, r3
 8008dfc:	f101 0c14 	add.w	ip, r1, #20
 8008e00:	2000      	movs	r0, #0
 8008e02:	f8dc 3000 	ldr.w	r3, [ip]
 8008e06:	b299      	uxth	r1, r3
 8008e08:	fb02 6101 	mla	r1, r2, r1, r6
 8008e0c:	0c1e      	lsrs	r6, r3, #16
 8008e0e:	0c0b      	lsrs	r3, r1, #16
 8008e10:	fb02 3306 	mla	r3, r2, r6, r3
 8008e14:	b289      	uxth	r1, r1
 8008e16:	3001      	adds	r0, #1
 8008e18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e1c:	4285      	cmp	r5, r0
 8008e1e:	f84c 1b04 	str.w	r1, [ip], #4
 8008e22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e26:	dcec      	bgt.n	8008e02 <__multadd+0x12>
 8008e28:	b30e      	cbz	r6, 8008e6e <__multadd+0x7e>
 8008e2a:	68a3      	ldr	r3, [r4, #8]
 8008e2c:	42ab      	cmp	r3, r5
 8008e2e:	dc19      	bgt.n	8008e64 <__multadd+0x74>
 8008e30:	6861      	ldr	r1, [r4, #4]
 8008e32:	4638      	mov	r0, r7
 8008e34:	3101      	adds	r1, #1
 8008e36:	f7ff ff79 	bl	8008d2c <_Balloc>
 8008e3a:	4680      	mov	r8, r0
 8008e3c:	b928      	cbnz	r0, 8008e4a <__multadd+0x5a>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	4b0c      	ldr	r3, [pc, #48]	; (8008e74 <__multadd+0x84>)
 8008e42:	480d      	ldr	r0, [pc, #52]	; (8008e78 <__multadd+0x88>)
 8008e44:	21b5      	movs	r1, #181	; 0xb5
 8008e46:	f001 f9f7 	bl	800a238 <__assert_func>
 8008e4a:	6922      	ldr	r2, [r4, #16]
 8008e4c:	3202      	adds	r2, #2
 8008e4e:	f104 010c 	add.w	r1, r4, #12
 8008e52:	0092      	lsls	r2, r2, #2
 8008e54:	300c      	adds	r0, #12
 8008e56:	f7ff ff5b 	bl	8008d10 <memcpy>
 8008e5a:	4621      	mov	r1, r4
 8008e5c:	4638      	mov	r0, r7
 8008e5e:	f7ff ffa5 	bl	8008dac <_Bfree>
 8008e62:	4644      	mov	r4, r8
 8008e64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e68:	3501      	adds	r5, #1
 8008e6a:	615e      	str	r6, [r3, #20]
 8008e6c:	6125      	str	r5, [r4, #16]
 8008e6e:	4620      	mov	r0, r4
 8008e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e74:	0800ae55 	.word	0x0800ae55
 8008e78:	0800ae66 	.word	0x0800ae66

08008e7c <__hi0bits>:
 8008e7c:	0c03      	lsrs	r3, r0, #16
 8008e7e:	041b      	lsls	r3, r3, #16
 8008e80:	b9d3      	cbnz	r3, 8008eb8 <__hi0bits+0x3c>
 8008e82:	0400      	lsls	r0, r0, #16
 8008e84:	2310      	movs	r3, #16
 8008e86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e8a:	bf04      	itt	eq
 8008e8c:	0200      	lsleq	r0, r0, #8
 8008e8e:	3308      	addeq	r3, #8
 8008e90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e94:	bf04      	itt	eq
 8008e96:	0100      	lsleq	r0, r0, #4
 8008e98:	3304      	addeq	r3, #4
 8008e9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e9e:	bf04      	itt	eq
 8008ea0:	0080      	lsleq	r0, r0, #2
 8008ea2:	3302      	addeq	r3, #2
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	db05      	blt.n	8008eb4 <__hi0bits+0x38>
 8008ea8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008eac:	f103 0301 	add.w	r3, r3, #1
 8008eb0:	bf08      	it	eq
 8008eb2:	2320      	moveq	r3, #32
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	4770      	bx	lr
 8008eb8:	2300      	movs	r3, #0
 8008eba:	e7e4      	b.n	8008e86 <__hi0bits+0xa>

08008ebc <__lo0bits>:
 8008ebc:	6803      	ldr	r3, [r0, #0]
 8008ebe:	f013 0207 	ands.w	r2, r3, #7
 8008ec2:	4601      	mov	r1, r0
 8008ec4:	d00b      	beq.n	8008ede <__lo0bits+0x22>
 8008ec6:	07da      	lsls	r2, r3, #31
 8008ec8:	d423      	bmi.n	8008f12 <__lo0bits+0x56>
 8008eca:	0798      	lsls	r0, r3, #30
 8008ecc:	bf49      	itett	mi
 8008ece:	085b      	lsrmi	r3, r3, #1
 8008ed0:	089b      	lsrpl	r3, r3, #2
 8008ed2:	2001      	movmi	r0, #1
 8008ed4:	600b      	strmi	r3, [r1, #0]
 8008ed6:	bf5c      	itt	pl
 8008ed8:	600b      	strpl	r3, [r1, #0]
 8008eda:	2002      	movpl	r0, #2
 8008edc:	4770      	bx	lr
 8008ede:	b298      	uxth	r0, r3
 8008ee0:	b9a8      	cbnz	r0, 8008f0e <__lo0bits+0x52>
 8008ee2:	0c1b      	lsrs	r3, r3, #16
 8008ee4:	2010      	movs	r0, #16
 8008ee6:	b2da      	uxtb	r2, r3
 8008ee8:	b90a      	cbnz	r2, 8008eee <__lo0bits+0x32>
 8008eea:	3008      	adds	r0, #8
 8008eec:	0a1b      	lsrs	r3, r3, #8
 8008eee:	071a      	lsls	r2, r3, #28
 8008ef0:	bf04      	itt	eq
 8008ef2:	091b      	lsreq	r3, r3, #4
 8008ef4:	3004      	addeq	r0, #4
 8008ef6:	079a      	lsls	r2, r3, #30
 8008ef8:	bf04      	itt	eq
 8008efa:	089b      	lsreq	r3, r3, #2
 8008efc:	3002      	addeq	r0, #2
 8008efe:	07da      	lsls	r2, r3, #31
 8008f00:	d403      	bmi.n	8008f0a <__lo0bits+0x4e>
 8008f02:	085b      	lsrs	r3, r3, #1
 8008f04:	f100 0001 	add.w	r0, r0, #1
 8008f08:	d005      	beq.n	8008f16 <__lo0bits+0x5a>
 8008f0a:	600b      	str	r3, [r1, #0]
 8008f0c:	4770      	bx	lr
 8008f0e:	4610      	mov	r0, r2
 8008f10:	e7e9      	b.n	8008ee6 <__lo0bits+0x2a>
 8008f12:	2000      	movs	r0, #0
 8008f14:	4770      	bx	lr
 8008f16:	2020      	movs	r0, #32
 8008f18:	4770      	bx	lr
	...

08008f1c <__i2b>:
 8008f1c:	b510      	push	{r4, lr}
 8008f1e:	460c      	mov	r4, r1
 8008f20:	2101      	movs	r1, #1
 8008f22:	f7ff ff03 	bl	8008d2c <_Balloc>
 8008f26:	4602      	mov	r2, r0
 8008f28:	b928      	cbnz	r0, 8008f36 <__i2b+0x1a>
 8008f2a:	4b05      	ldr	r3, [pc, #20]	; (8008f40 <__i2b+0x24>)
 8008f2c:	4805      	ldr	r0, [pc, #20]	; (8008f44 <__i2b+0x28>)
 8008f2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f32:	f001 f981 	bl	800a238 <__assert_func>
 8008f36:	2301      	movs	r3, #1
 8008f38:	6144      	str	r4, [r0, #20]
 8008f3a:	6103      	str	r3, [r0, #16]
 8008f3c:	bd10      	pop	{r4, pc}
 8008f3e:	bf00      	nop
 8008f40:	0800ae55 	.word	0x0800ae55
 8008f44:	0800ae66 	.word	0x0800ae66

08008f48 <__multiply>:
 8008f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4c:	4691      	mov	r9, r2
 8008f4e:	690a      	ldr	r2, [r1, #16]
 8008f50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	bfb8      	it	lt
 8008f58:	460b      	movlt	r3, r1
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	bfbc      	itt	lt
 8008f5e:	464c      	movlt	r4, r9
 8008f60:	4699      	movlt	r9, r3
 8008f62:	6927      	ldr	r7, [r4, #16]
 8008f64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008f68:	68a3      	ldr	r3, [r4, #8]
 8008f6a:	6861      	ldr	r1, [r4, #4]
 8008f6c:	eb07 060a 	add.w	r6, r7, sl
 8008f70:	42b3      	cmp	r3, r6
 8008f72:	b085      	sub	sp, #20
 8008f74:	bfb8      	it	lt
 8008f76:	3101      	addlt	r1, #1
 8008f78:	f7ff fed8 	bl	8008d2c <_Balloc>
 8008f7c:	b930      	cbnz	r0, 8008f8c <__multiply+0x44>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	4b44      	ldr	r3, [pc, #272]	; (8009094 <__multiply+0x14c>)
 8008f82:	4845      	ldr	r0, [pc, #276]	; (8009098 <__multiply+0x150>)
 8008f84:	f240 115d 	movw	r1, #349	; 0x15d
 8008f88:	f001 f956 	bl	800a238 <__assert_func>
 8008f8c:	f100 0514 	add.w	r5, r0, #20
 8008f90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f94:	462b      	mov	r3, r5
 8008f96:	2200      	movs	r2, #0
 8008f98:	4543      	cmp	r3, r8
 8008f9a:	d321      	bcc.n	8008fe0 <__multiply+0x98>
 8008f9c:	f104 0314 	add.w	r3, r4, #20
 8008fa0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008fa4:	f109 0314 	add.w	r3, r9, #20
 8008fa8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008fac:	9202      	str	r2, [sp, #8]
 8008fae:	1b3a      	subs	r2, r7, r4
 8008fb0:	3a15      	subs	r2, #21
 8008fb2:	f022 0203 	bic.w	r2, r2, #3
 8008fb6:	3204      	adds	r2, #4
 8008fb8:	f104 0115 	add.w	r1, r4, #21
 8008fbc:	428f      	cmp	r7, r1
 8008fbe:	bf38      	it	cc
 8008fc0:	2204      	movcc	r2, #4
 8008fc2:	9201      	str	r2, [sp, #4]
 8008fc4:	9a02      	ldr	r2, [sp, #8]
 8008fc6:	9303      	str	r3, [sp, #12]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d80c      	bhi.n	8008fe6 <__multiply+0x9e>
 8008fcc:	2e00      	cmp	r6, #0
 8008fce:	dd03      	ble.n	8008fd8 <__multiply+0x90>
 8008fd0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d05a      	beq.n	800908e <__multiply+0x146>
 8008fd8:	6106      	str	r6, [r0, #16]
 8008fda:	b005      	add	sp, #20
 8008fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe0:	f843 2b04 	str.w	r2, [r3], #4
 8008fe4:	e7d8      	b.n	8008f98 <__multiply+0x50>
 8008fe6:	f8b3 a000 	ldrh.w	sl, [r3]
 8008fea:	f1ba 0f00 	cmp.w	sl, #0
 8008fee:	d024      	beq.n	800903a <__multiply+0xf2>
 8008ff0:	f104 0e14 	add.w	lr, r4, #20
 8008ff4:	46a9      	mov	r9, r5
 8008ff6:	f04f 0c00 	mov.w	ip, #0
 8008ffa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008ffe:	f8d9 1000 	ldr.w	r1, [r9]
 8009002:	fa1f fb82 	uxth.w	fp, r2
 8009006:	b289      	uxth	r1, r1
 8009008:	fb0a 110b 	mla	r1, sl, fp, r1
 800900c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009010:	f8d9 2000 	ldr.w	r2, [r9]
 8009014:	4461      	add	r1, ip
 8009016:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800901a:	fb0a c20b 	mla	r2, sl, fp, ip
 800901e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009022:	b289      	uxth	r1, r1
 8009024:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009028:	4577      	cmp	r7, lr
 800902a:	f849 1b04 	str.w	r1, [r9], #4
 800902e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009032:	d8e2      	bhi.n	8008ffa <__multiply+0xb2>
 8009034:	9a01      	ldr	r2, [sp, #4]
 8009036:	f845 c002 	str.w	ip, [r5, r2]
 800903a:	9a03      	ldr	r2, [sp, #12]
 800903c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009040:	3304      	adds	r3, #4
 8009042:	f1b9 0f00 	cmp.w	r9, #0
 8009046:	d020      	beq.n	800908a <__multiply+0x142>
 8009048:	6829      	ldr	r1, [r5, #0]
 800904a:	f104 0c14 	add.w	ip, r4, #20
 800904e:	46ae      	mov	lr, r5
 8009050:	f04f 0a00 	mov.w	sl, #0
 8009054:	f8bc b000 	ldrh.w	fp, [ip]
 8009058:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800905c:	fb09 220b 	mla	r2, r9, fp, r2
 8009060:	4492      	add	sl, r2
 8009062:	b289      	uxth	r1, r1
 8009064:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009068:	f84e 1b04 	str.w	r1, [lr], #4
 800906c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009070:	f8be 1000 	ldrh.w	r1, [lr]
 8009074:	0c12      	lsrs	r2, r2, #16
 8009076:	fb09 1102 	mla	r1, r9, r2, r1
 800907a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800907e:	4567      	cmp	r7, ip
 8009080:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009084:	d8e6      	bhi.n	8009054 <__multiply+0x10c>
 8009086:	9a01      	ldr	r2, [sp, #4]
 8009088:	50a9      	str	r1, [r5, r2]
 800908a:	3504      	adds	r5, #4
 800908c:	e79a      	b.n	8008fc4 <__multiply+0x7c>
 800908e:	3e01      	subs	r6, #1
 8009090:	e79c      	b.n	8008fcc <__multiply+0x84>
 8009092:	bf00      	nop
 8009094:	0800ae55 	.word	0x0800ae55
 8009098:	0800ae66 	.word	0x0800ae66

0800909c <__pow5mult>:
 800909c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090a0:	4615      	mov	r5, r2
 80090a2:	f012 0203 	ands.w	r2, r2, #3
 80090a6:	4606      	mov	r6, r0
 80090a8:	460f      	mov	r7, r1
 80090aa:	d007      	beq.n	80090bc <__pow5mult+0x20>
 80090ac:	4c25      	ldr	r4, [pc, #148]	; (8009144 <__pow5mult+0xa8>)
 80090ae:	3a01      	subs	r2, #1
 80090b0:	2300      	movs	r3, #0
 80090b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090b6:	f7ff fe9b 	bl	8008df0 <__multadd>
 80090ba:	4607      	mov	r7, r0
 80090bc:	10ad      	asrs	r5, r5, #2
 80090be:	d03d      	beq.n	800913c <__pow5mult+0xa0>
 80090c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80090c2:	b97c      	cbnz	r4, 80090e4 <__pow5mult+0x48>
 80090c4:	2010      	movs	r0, #16
 80090c6:	f7ff fe1b 	bl	8008d00 <malloc>
 80090ca:	4602      	mov	r2, r0
 80090cc:	6270      	str	r0, [r6, #36]	; 0x24
 80090ce:	b928      	cbnz	r0, 80090dc <__pow5mult+0x40>
 80090d0:	4b1d      	ldr	r3, [pc, #116]	; (8009148 <__pow5mult+0xac>)
 80090d2:	481e      	ldr	r0, [pc, #120]	; (800914c <__pow5mult+0xb0>)
 80090d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80090d8:	f001 f8ae 	bl	800a238 <__assert_func>
 80090dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090e0:	6004      	str	r4, [r0, #0]
 80090e2:	60c4      	str	r4, [r0, #12]
 80090e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80090e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090ec:	b94c      	cbnz	r4, 8009102 <__pow5mult+0x66>
 80090ee:	f240 2171 	movw	r1, #625	; 0x271
 80090f2:	4630      	mov	r0, r6
 80090f4:	f7ff ff12 	bl	8008f1c <__i2b>
 80090f8:	2300      	movs	r3, #0
 80090fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80090fe:	4604      	mov	r4, r0
 8009100:	6003      	str	r3, [r0, #0]
 8009102:	f04f 0900 	mov.w	r9, #0
 8009106:	07eb      	lsls	r3, r5, #31
 8009108:	d50a      	bpl.n	8009120 <__pow5mult+0x84>
 800910a:	4639      	mov	r1, r7
 800910c:	4622      	mov	r2, r4
 800910e:	4630      	mov	r0, r6
 8009110:	f7ff ff1a 	bl	8008f48 <__multiply>
 8009114:	4639      	mov	r1, r7
 8009116:	4680      	mov	r8, r0
 8009118:	4630      	mov	r0, r6
 800911a:	f7ff fe47 	bl	8008dac <_Bfree>
 800911e:	4647      	mov	r7, r8
 8009120:	106d      	asrs	r5, r5, #1
 8009122:	d00b      	beq.n	800913c <__pow5mult+0xa0>
 8009124:	6820      	ldr	r0, [r4, #0]
 8009126:	b938      	cbnz	r0, 8009138 <__pow5mult+0x9c>
 8009128:	4622      	mov	r2, r4
 800912a:	4621      	mov	r1, r4
 800912c:	4630      	mov	r0, r6
 800912e:	f7ff ff0b 	bl	8008f48 <__multiply>
 8009132:	6020      	str	r0, [r4, #0]
 8009134:	f8c0 9000 	str.w	r9, [r0]
 8009138:	4604      	mov	r4, r0
 800913a:	e7e4      	b.n	8009106 <__pow5mult+0x6a>
 800913c:	4638      	mov	r0, r7
 800913e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009142:	bf00      	nop
 8009144:	0800afb8 	.word	0x0800afb8
 8009148:	0800ade3 	.word	0x0800ade3
 800914c:	0800ae66 	.word	0x0800ae66

08009150 <__lshift>:
 8009150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009154:	460c      	mov	r4, r1
 8009156:	6849      	ldr	r1, [r1, #4]
 8009158:	6923      	ldr	r3, [r4, #16]
 800915a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800915e:	68a3      	ldr	r3, [r4, #8]
 8009160:	4607      	mov	r7, r0
 8009162:	4691      	mov	r9, r2
 8009164:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009168:	f108 0601 	add.w	r6, r8, #1
 800916c:	42b3      	cmp	r3, r6
 800916e:	db0b      	blt.n	8009188 <__lshift+0x38>
 8009170:	4638      	mov	r0, r7
 8009172:	f7ff fddb 	bl	8008d2c <_Balloc>
 8009176:	4605      	mov	r5, r0
 8009178:	b948      	cbnz	r0, 800918e <__lshift+0x3e>
 800917a:	4602      	mov	r2, r0
 800917c:	4b2a      	ldr	r3, [pc, #168]	; (8009228 <__lshift+0xd8>)
 800917e:	482b      	ldr	r0, [pc, #172]	; (800922c <__lshift+0xdc>)
 8009180:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009184:	f001 f858 	bl	800a238 <__assert_func>
 8009188:	3101      	adds	r1, #1
 800918a:	005b      	lsls	r3, r3, #1
 800918c:	e7ee      	b.n	800916c <__lshift+0x1c>
 800918e:	2300      	movs	r3, #0
 8009190:	f100 0114 	add.w	r1, r0, #20
 8009194:	f100 0210 	add.w	r2, r0, #16
 8009198:	4618      	mov	r0, r3
 800919a:	4553      	cmp	r3, sl
 800919c:	db37      	blt.n	800920e <__lshift+0xbe>
 800919e:	6920      	ldr	r0, [r4, #16]
 80091a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091a4:	f104 0314 	add.w	r3, r4, #20
 80091a8:	f019 091f 	ands.w	r9, r9, #31
 80091ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80091b4:	d02f      	beq.n	8009216 <__lshift+0xc6>
 80091b6:	f1c9 0e20 	rsb	lr, r9, #32
 80091ba:	468a      	mov	sl, r1
 80091bc:	f04f 0c00 	mov.w	ip, #0
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	fa02 f209 	lsl.w	r2, r2, r9
 80091c6:	ea42 020c 	orr.w	r2, r2, ip
 80091ca:	f84a 2b04 	str.w	r2, [sl], #4
 80091ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80091d2:	4298      	cmp	r0, r3
 80091d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80091d8:	d8f2      	bhi.n	80091c0 <__lshift+0x70>
 80091da:	1b03      	subs	r3, r0, r4
 80091dc:	3b15      	subs	r3, #21
 80091de:	f023 0303 	bic.w	r3, r3, #3
 80091e2:	3304      	adds	r3, #4
 80091e4:	f104 0215 	add.w	r2, r4, #21
 80091e8:	4290      	cmp	r0, r2
 80091ea:	bf38      	it	cc
 80091ec:	2304      	movcc	r3, #4
 80091ee:	f841 c003 	str.w	ip, [r1, r3]
 80091f2:	f1bc 0f00 	cmp.w	ip, #0
 80091f6:	d001      	beq.n	80091fc <__lshift+0xac>
 80091f8:	f108 0602 	add.w	r6, r8, #2
 80091fc:	3e01      	subs	r6, #1
 80091fe:	4638      	mov	r0, r7
 8009200:	612e      	str	r6, [r5, #16]
 8009202:	4621      	mov	r1, r4
 8009204:	f7ff fdd2 	bl	8008dac <_Bfree>
 8009208:	4628      	mov	r0, r5
 800920a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800920e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009212:	3301      	adds	r3, #1
 8009214:	e7c1      	b.n	800919a <__lshift+0x4a>
 8009216:	3904      	subs	r1, #4
 8009218:	f853 2b04 	ldr.w	r2, [r3], #4
 800921c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009220:	4298      	cmp	r0, r3
 8009222:	d8f9      	bhi.n	8009218 <__lshift+0xc8>
 8009224:	e7ea      	b.n	80091fc <__lshift+0xac>
 8009226:	bf00      	nop
 8009228:	0800ae55 	.word	0x0800ae55
 800922c:	0800ae66 	.word	0x0800ae66

08009230 <__mcmp>:
 8009230:	b530      	push	{r4, r5, lr}
 8009232:	6902      	ldr	r2, [r0, #16]
 8009234:	690c      	ldr	r4, [r1, #16]
 8009236:	1b12      	subs	r2, r2, r4
 8009238:	d10e      	bne.n	8009258 <__mcmp+0x28>
 800923a:	f100 0314 	add.w	r3, r0, #20
 800923e:	3114      	adds	r1, #20
 8009240:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009244:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009248:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800924c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009250:	42a5      	cmp	r5, r4
 8009252:	d003      	beq.n	800925c <__mcmp+0x2c>
 8009254:	d305      	bcc.n	8009262 <__mcmp+0x32>
 8009256:	2201      	movs	r2, #1
 8009258:	4610      	mov	r0, r2
 800925a:	bd30      	pop	{r4, r5, pc}
 800925c:	4283      	cmp	r3, r0
 800925e:	d3f3      	bcc.n	8009248 <__mcmp+0x18>
 8009260:	e7fa      	b.n	8009258 <__mcmp+0x28>
 8009262:	f04f 32ff 	mov.w	r2, #4294967295
 8009266:	e7f7      	b.n	8009258 <__mcmp+0x28>

08009268 <__mdiff>:
 8009268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800926c:	460c      	mov	r4, r1
 800926e:	4606      	mov	r6, r0
 8009270:	4611      	mov	r1, r2
 8009272:	4620      	mov	r0, r4
 8009274:	4690      	mov	r8, r2
 8009276:	f7ff ffdb 	bl	8009230 <__mcmp>
 800927a:	1e05      	subs	r5, r0, #0
 800927c:	d110      	bne.n	80092a0 <__mdiff+0x38>
 800927e:	4629      	mov	r1, r5
 8009280:	4630      	mov	r0, r6
 8009282:	f7ff fd53 	bl	8008d2c <_Balloc>
 8009286:	b930      	cbnz	r0, 8009296 <__mdiff+0x2e>
 8009288:	4b3a      	ldr	r3, [pc, #232]	; (8009374 <__mdiff+0x10c>)
 800928a:	4602      	mov	r2, r0
 800928c:	f240 2132 	movw	r1, #562	; 0x232
 8009290:	4839      	ldr	r0, [pc, #228]	; (8009378 <__mdiff+0x110>)
 8009292:	f000 ffd1 	bl	800a238 <__assert_func>
 8009296:	2301      	movs	r3, #1
 8009298:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800929c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a0:	bfa4      	itt	ge
 80092a2:	4643      	movge	r3, r8
 80092a4:	46a0      	movge	r8, r4
 80092a6:	4630      	mov	r0, r6
 80092a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80092ac:	bfa6      	itte	ge
 80092ae:	461c      	movge	r4, r3
 80092b0:	2500      	movge	r5, #0
 80092b2:	2501      	movlt	r5, #1
 80092b4:	f7ff fd3a 	bl	8008d2c <_Balloc>
 80092b8:	b920      	cbnz	r0, 80092c4 <__mdiff+0x5c>
 80092ba:	4b2e      	ldr	r3, [pc, #184]	; (8009374 <__mdiff+0x10c>)
 80092bc:	4602      	mov	r2, r0
 80092be:	f44f 7110 	mov.w	r1, #576	; 0x240
 80092c2:	e7e5      	b.n	8009290 <__mdiff+0x28>
 80092c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80092c8:	6926      	ldr	r6, [r4, #16]
 80092ca:	60c5      	str	r5, [r0, #12]
 80092cc:	f104 0914 	add.w	r9, r4, #20
 80092d0:	f108 0514 	add.w	r5, r8, #20
 80092d4:	f100 0e14 	add.w	lr, r0, #20
 80092d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80092dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80092e0:	f108 0210 	add.w	r2, r8, #16
 80092e4:	46f2      	mov	sl, lr
 80092e6:	2100      	movs	r1, #0
 80092e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80092ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80092f0:	fa1f f883 	uxth.w	r8, r3
 80092f4:	fa11 f18b 	uxtah	r1, r1, fp
 80092f8:	0c1b      	lsrs	r3, r3, #16
 80092fa:	eba1 0808 	sub.w	r8, r1, r8
 80092fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009302:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009306:	fa1f f888 	uxth.w	r8, r8
 800930a:	1419      	asrs	r1, r3, #16
 800930c:	454e      	cmp	r6, r9
 800930e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009312:	f84a 3b04 	str.w	r3, [sl], #4
 8009316:	d8e7      	bhi.n	80092e8 <__mdiff+0x80>
 8009318:	1b33      	subs	r3, r6, r4
 800931a:	3b15      	subs	r3, #21
 800931c:	f023 0303 	bic.w	r3, r3, #3
 8009320:	3304      	adds	r3, #4
 8009322:	3415      	adds	r4, #21
 8009324:	42a6      	cmp	r6, r4
 8009326:	bf38      	it	cc
 8009328:	2304      	movcc	r3, #4
 800932a:	441d      	add	r5, r3
 800932c:	4473      	add	r3, lr
 800932e:	469e      	mov	lr, r3
 8009330:	462e      	mov	r6, r5
 8009332:	4566      	cmp	r6, ip
 8009334:	d30e      	bcc.n	8009354 <__mdiff+0xec>
 8009336:	f10c 0203 	add.w	r2, ip, #3
 800933a:	1b52      	subs	r2, r2, r5
 800933c:	f022 0203 	bic.w	r2, r2, #3
 8009340:	3d03      	subs	r5, #3
 8009342:	45ac      	cmp	ip, r5
 8009344:	bf38      	it	cc
 8009346:	2200      	movcc	r2, #0
 8009348:	441a      	add	r2, r3
 800934a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800934e:	b17b      	cbz	r3, 8009370 <__mdiff+0x108>
 8009350:	6107      	str	r7, [r0, #16]
 8009352:	e7a3      	b.n	800929c <__mdiff+0x34>
 8009354:	f856 8b04 	ldr.w	r8, [r6], #4
 8009358:	fa11 f288 	uxtah	r2, r1, r8
 800935c:	1414      	asrs	r4, r2, #16
 800935e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009362:	b292      	uxth	r2, r2
 8009364:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009368:	f84e 2b04 	str.w	r2, [lr], #4
 800936c:	1421      	asrs	r1, r4, #16
 800936e:	e7e0      	b.n	8009332 <__mdiff+0xca>
 8009370:	3f01      	subs	r7, #1
 8009372:	e7ea      	b.n	800934a <__mdiff+0xe2>
 8009374:	0800ae55 	.word	0x0800ae55
 8009378:	0800ae66 	.word	0x0800ae66

0800937c <__d2b>:
 800937c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009380:	4689      	mov	r9, r1
 8009382:	2101      	movs	r1, #1
 8009384:	ec57 6b10 	vmov	r6, r7, d0
 8009388:	4690      	mov	r8, r2
 800938a:	f7ff fccf 	bl	8008d2c <_Balloc>
 800938e:	4604      	mov	r4, r0
 8009390:	b930      	cbnz	r0, 80093a0 <__d2b+0x24>
 8009392:	4602      	mov	r2, r0
 8009394:	4b25      	ldr	r3, [pc, #148]	; (800942c <__d2b+0xb0>)
 8009396:	4826      	ldr	r0, [pc, #152]	; (8009430 <__d2b+0xb4>)
 8009398:	f240 310a 	movw	r1, #778	; 0x30a
 800939c:	f000 ff4c 	bl	800a238 <__assert_func>
 80093a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80093a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80093a8:	bb35      	cbnz	r5, 80093f8 <__d2b+0x7c>
 80093aa:	2e00      	cmp	r6, #0
 80093ac:	9301      	str	r3, [sp, #4]
 80093ae:	d028      	beq.n	8009402 <__d2b+0x86>
 80093b0:	4668      	mov	r0, sp
 80093b2:	9600      	str	r6, [sp, #0]
 80093b4:	f7ff fd82 	bl	8008ebc <__lo0bits>
 80093b8:	9900      	ldr	r1, [sp, #0]
 80093ba:	b300      	cbz	r0, 80093fe <__d2b+0x82>
 80093bc:	9a01      	ldr	r2, [sp, #4]
 80093be:	f1c0 0320 	rsb	r3, r0, #32
 80093c2:	fa02 f303 	lsl.w	r3, r2, r3
 80093c6:	430b      	orrs	r3, r1
 80093c8:	40c2      	lsrs	r2, r0
 80093ca:	6163      	str	r3, [r4, #20]
 80093cc:	9201      	str	r2, [sp, #4]
 80093ce:	9b01      	ldr	r3, [sp, #4]
 80093d0:	61a3      	str	r3, [r4, #24]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	bf14      	ite	ne
 80093d6:	2202      	movne	r2, #2
 80093d8:	2201      	moveq	r2, #1
 80093da:	6122      	str	r2, [r4, #16]
 80093dc:	b1d5      	cbz	r5, 8009414 <__d2b+0x98>
 80093de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093e2:	4405      	add	r5, r0
 80093e4:	f8c9 5000 	str.w	r5, [r9]
 80093e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093ec:	f8c8 0000 	str.w	r0, [r8]
 80093f0:	4620      	mov	r0, r4
 80093f2:	b003      	add	sp, #12
 80093f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093fc:	e7d5      	b.n	80093aa <__d2b+0x2e>
 80093fe:	6161      	str	r1, [r4, #20]
 8009400:	e7e5      	b.n	80093ce <__d2b+0x52>
 8009402:	a801      	add	r0, sp, #4
 8009404:	f7ff fd5a 	bl	8008ebc <__lo0bits>
 8009408:	9b01      	ldr	r3, [sp, #4]
 800940a:	6163      	str	r3, [r4, #20]
 800940c:	2201      	movs	r2, #1
 800940e:	6122      	str	r2, [r4, #16]
 8009410:	3020      	adds	r0, #32
 8009412:	e7e3      	b.n	80093dc <__d2b+0x60>
 8009414:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009418:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800941c:	f8c9 0000 	str.w	r0, [r9]
 8009420:	6918      	ldr	r0, [r3, #16]
 8009422:	f7ff fd2b 	bl	8008e7c <__hi0bits>
 8009426:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800942a:	e7df      	b.n	80093ec <__d2b+0x70>
 800942c:	0800ae55 	.word	0x0800ae55
 8009430:	0800ae66 	.word	0x0800ae66

08009434 <_calloc_r>:
 8009434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009436:	fba1 2402 	umull	r2, r4, r1, r2
 800943a:	b94c      	cbnz	r4, 8009450 <_calloc_r+0x1c>
 800943c:	4611      	mov	r1, r2
 800943e:	9201      	str	r2, [sp, #4]
 8009440:	f000 f87a 	bl	8009538 <_malloc_r>
 8009444:	9a01      	ldr	r2, [sp, #4]
 8009446:	4605      	mov	r5, r0
 8009448:	b930      	cbnz	r0, 8009458 <_calloc_r+0x24>
 800944a:	4628      	mov	r0, r5
 800944c:	b003      	add	sp, #12
 800944e:	bd30      	pop	{r4, r5, pc}
 8009450:	220c      	movs	r2, #12
 8009452:	6002      	str	r2, [r0, #0]
 8009454:	2500      	movs	r5, #0
 8009456:	e7f8      	b.n	800944a <_calloc_r+0x16>
 8009458:	4621      	mov	r1, r4
 800945a:	f7fe f887 	bl	800756c <memset>
 800945e:	e7f4      	b.n	800944a <_calloc_r+0x16>

08009460 <_free_r>:
 8009460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009462:	2900      	cmp	r1, #0
 8009464:	d044      	beq.n	80094f0 <_free_r+0x90>
 8009466:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800946a:	9001      	str	r0, [sp, #4]
 800946c:	2b00      	cmp	r3, #0
 800946e:	f1a1 0404 	sub.w	r4, r1, #4
 8009472:	bfb8      	it	lt
 8009474:	18e4      	addlt	r4, r4, r3
 8009476:	f001 f8f5 	bl	800a664 <__malloc_lock>
 800947a:	4a1e      	ldr	r2, [pc, #120]	; (80094f4 <_free_r+0x94>)
 800947c:	9801      	ldr	r0, [sp, #4]
 800947e:	6813      	ldr	r3, [r2, #0]
 8009480:	b933      	cbnz	r3, 8009490 <_free_r+0x30>
 8009482:	6063      	str	r3, [r4, #4]
 8009484:	6014      	str	r4, [r2, #0]
 8009486:	b003      	add	sp, #12
 8009488:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800948c:	f001 b8f0 	b.w	800a670 <__malloc_unlock>
 8009490:	42a3      	cmp	r3, r4
 8009492:	d908      	bls.n	80094a6 <_free_r+0x46>
 8009494:	6825      	ldr	r5, [r4, #0]
 8009496:	1961      	adds	r1, r4, r5
 8009498:	428b      	cmp	r3, r1
 800949a:	bf01      	itttt	eq
 800949c:	6819      	ldreq	r1, [r3, #0]
 800949e:	685b      	ldreq	r3, [r3, #4]
 80094a0:	1949      	addeq	r1, r1, r5
 80094a2:	6021      	streq	r1, [r4, #0]
 80094a4:	e7ed      	b.n	8009482 <_free_r+0x22>
 80094a6:	461a      	mov	r2, r3
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	b10b      	cbz	r3, 80094b0 <_free_r+0x50>
 80094ac:	42a3      	cmp	r3, r4
 80094ae:	d9fa      	bls.n	80094a6 <_free_r+0x46>
 80094b0:	6811      	ldr	r1, [r2, #0]
 80094b2:	1855      	adds	r5, r2, r1
 80094b4:	42a5      	cmp	r5, r4
 80094b6:	d10b      	bne.n	80094d0 <_free_r+0x70>
 80094b8:	6824      	ldr	r4, [r4, #0]
 80094ba:	4421      	add	r1, r4
 80094bc:	1854      	adds	r4, r2, r1
 80094be:	42a3      	cmp	r3, r4
 80094c0:	6011      	str	r1, [r2, #0]
 80094c2:	d1e0      	bne.n	8009486 <_free_r+0x26>
 80094c4:	681c      	ldr	r4, [r3, #0]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	6053      	str	r3, [r2, #4]
 80094ca:	4421      	add	r1, r4
 80094cc:	6011      	str	r1, [r2, #0]
 80094ce:	e7da      	b.n	8009486 <_free_r+0x26>
 80094d0:	d902      	bls.n	80094d8 <_free_r+0x78>
 80094d2:	230c      	movs	r3, #12
 80094d4:	6003      	str	r3, [r0, #0]
 80094d6:	e7d6      	b.n	8009486 <_free_r+0x26>
 80094d8:	6825      	ldr	r5, [r4, #0]
 80094da:	1961      	adds	r1, r4, r5
 80094dc:	428b      	cmp	r3, r1
 80094de:	bf04      	itt	eq
 80094e0:	6819      	ldreq	r1, [r3, #0]
 80094e2:	685b      	ldreq	r3, [r3, #4]
 80094e4:	6063      	str	r3, [r4, #4]
 80094e6:	bf04      	itt	eq
 80094e8:	1949      	addeq	r1, r1, r5
 80094ea:	6021      	streq	r1, [r4, #0]
 80094ec:	6054      	str	r4, [r2, #4]
 80094ee:	e7ca      	b.n	8009486 <_free_r+0x26>
 80094f0:	b003      	add	sp, #12
 80094f2:	bd30      	pop	{r4, r5, pc}
 80094f4:	200008d4 	.word	0x200008d4

080094f8 <sbrk_aligned>:
 80094f8:	b570      	push	{r4, r5, r6, lr}
 80094fa:	4e0e      	ldr	r6, [pc, #56]	; (8009534 <sbrk_aligned+0x3c>)
 80094fc:	460c      	mov	r4, r1
 80094fe:	6831      	ldr	r1, [r6, #0]
 8009500:	4605      	mov	r5, r0
 8009502:	b911      	cbnz	r1, 800950a <sbrk_aligned+0x12>
 8009504:	f000 fd1e 	bl	8009f44 <_sbrk_r>
 8009508:	6030      	str	r0, [r6, #0]
 800950a:	4621      	mov	r1, r4
 800950c:	4628      	mov	r0, r5
 800950e:	f000 fd19 	bl	8009f44 <_sbrk_r>
 8009512:	1c43      	adds	r3, r0, #1
 8009514:	d00a      	beq.n	800952c <sbrk_aligned+0x34>
 8009516:	1cc4      	adds	r4, r0, #3
 8009518:	f024 0403 	bic.w	r4, r4, #3
 800951c:	42a0      	cmp	r0, r4
 800951e:	d007      	beq.n	8009530 <sbrk_aligned+0x38>
 8009520:	1a21      	subs	r1, r4, r0
 8009522:	4628      	mov	r0, r5
 8009524:	f000 fd0e 	bl	8009f44 <_sbrk_r>
 8009528:	3001      	adds	r0, #1
 800952a:	d101      	bne.n	8009530 <sbrk_aligned+0x38>
 800952c:	f04f 34ff 	mov.w	r4, #4294967295
 8009530:	4620      	mov	r0, r4
 8009532:	bd70      	pop	{r4, r5, r6, pc}
 8009534:	200008d8 	.word	0x200008d8

08009538 <_malloc_r>:
 8009538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800953c:	1ccd      	adds	r5, r1, #3
 800953e:	f025 0503 	bic.w	r5, r5, #3
 8009542:	3508      	adds	r5, #8
 8009544:	2d0c      	cmp	r5, #12
 8009546:	bf38      	it	cc
 8009548:	250c      	movcc	r5, #12
 800954a:	2d00      	cmp	r5, #0
 800954c:	4607      	mov	r7, r0
 800954e:	db01      	blt.n	8009554 <_malloc_r+0x1c>
 8009550:	42a9      	cmp	r1, r5
 8009552:	d905      	bls.n	8009560 <_malloc_r+0x28>
 8009554:	230c      	movs	r3, #12
 8009556:	603b      	str	r3, [r7, #0]
 8009558:	2600      	movs	r6, #0
 800955a:	4630      	mov	r0, r6
 800955c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009560:	4e2e      	ldr	r6, [pc, #184]	; (800961c <_malloc_r+0xe4>)
 8009562:	f001 f87f 	bl	800a664 <__malloc_lock>
 8009566:	6833      	ldr	r3, [r6, #0]
 8009568:	461c      	mov	r4, r3
 800956a:	bb34      	cbnz	r4, 80095ba <_malloc_r+0x82>
 800956c:	4629      	mov	r1, r5
 800956e:	4638      	mov	r0, r7
 8009570:	f7ff ffc2 	bl	80094f8 <sbrk_aligned>
 8009574:	1c43      	adds	r3, r0, #1
 8009576:	4604      	mov	r4, r0
 8009578:	d14d      	bne.n	8009616 <_malloc_r+0xde>
 800957a:	6834      	ldr	r4, [r6, #0]
 800957c:	4626      	mov	r6, r4
 800957e:	2e00      	cmp	r6, #0
 8009580:	d140      	bne.n	8009604 <_malloc_r+0xcc>
 8009582:	6823      	ldr	r3, [r4, #0]
 8009584:	4631      	mov	r1, r6
 8009586:	4638      	mov	r0, r7
 8009588:	eb04 0803 	add.w	r8, r4, r3
 800958c:	f000 fcda 	bl	8009f44 <_sbrk_r>
 8009590:	4580      	cmp	r8, r0
 8009592:	d13a      	bne.n	800960a <_malloc_r+0xd2>
 8009594:	6821      	ldr	r1, [r4, #0]
 8009596:	3503      	adds	r5, #3
 8009598:	1a6d      	subs	r5, r5, r1
 800959a:	f025 0503 	bic.w	r5, r5, #3
 800959e:	3508      	adds	r5, #8
 80095a0:	2d0c      	cmp	r5, #12
 80095a2:	bf38      	it	cc
 80095a4:	250c      	movcc	r5, #12
 80095a6:	4629      	mov	r1, r5
 80095a8:	4638      	mov	r0, r7
 80095aa:	f7ff ffa5 	bl	80094f8 <sbrk_aligned>
 80095ae:	3001      	adds	r0, #1
 80095b0:	d02b      	beq.n	800960a <_malloc_r+0xd2>
 80095b2:	6823      	ldr	r3, [r4, #0]
 80095b4:	442b      	add	r3, r5
 80095b6:	6023      	str	r3, [r4, #0]
 80095b8:	e00e      	b.n	80095d8 <_malloc_r+0xa0>
 80095ba:	6822      	ldr	r2, [r4, #0]
 80095bc:	1b52      	subs	r2, r2, r5
 80095be:	d41e      	bmi.n	80095fe <_malloc_r+0xc6>
 80095c0:	2a0b      	cmp	r2, #11
 80095c2:	d916      	bls.n	80095f2 <_malloc_r+0xba>
 80095c4:	1961      	adds	r1, r4, r5
 80095c6:	42a3      	cmp	r3, r4
 80095c8:	6025      	str	r5, [r4, #0]
 80095ca:	bf18      	it	ne
 80095cc:	6059      	strne	r1, [r3, #4]
 80095ce:	6863      	ldr	r3, [r4, #4]
 80095d0:	bf08      	it	eq
 80095d2:	6031      	streq	r1, [r6, #0]
 80095d4:	5162      	str	r2, [r4, r5]
 80095d6:	604b      	str	r3, [r1, #4]
 80095d8:	4638      	mov	r0, r7
 80095da:	f104 060b 	add.w	r6, r4, #11
 80095de:	f001 f847 	bl	800a670 <__malloc_unlock>
 80095e2:	f026 0607 	bic.w	r6, r6, #7
 80095e6:	1d23      	adds	r3, r4, #4
 80095e8:	1af2      	subs	r2, r6, r3
 80095ea:	d0b6      	beq.n	800955a <_malloc_r+0x22>
 80095ec:	1b9b      	subs	r3, r3, r6
 80095ee:	50a3      	str	r3, [r4, r2]
 80095f0:	e7b3      	b.n	800955a <_malloc_r+0x22>
 80095f2:	6862      	ldr	r2, [r4, #4]
 80095f4:	42a3      	cmp	r3, r4
 80095f6:	bf0c      	ite	eq
 80095f8:	6032      	streq	r2, [r6, #0]
 80095fa:	605a      	strne	r2, [r3, #4]
 80095fc:	e7ec      	b.n	80095d8 <_malloc_r+0xa0>
 80095fe:	4623      	mov	r3, r4
 8009600:	6864      	ldr	r4, [r4, #4]
 8009602:	e7b2      	b.n	800956a <_malloc_r+0x32>
 8009604:	4634      	mov	r4, r6
 8009606:	6876      	ldr	r6, [r6, #4]
 8009608:	e7b9      	b.n	800957e <_malloc_r+0x46>
 800960a:	230c      	movs	r3, #12
 800960c:	603b      	str	r3, [r7, #0]
 800960e:	4638      	mov	r0, r7
 8009610:	f001 f82e 	bl	800a670 <__malloc_unlock>
 8009614:	e7a1      	b.n	800955a <_malloc_r+0x22>
 8009616:	6025      	str	r5, [r4, #0]
 8009618:	e7de      	b.n	80095d8 <_malloc_r+0xa0>
 800961a:	bf00      	nop
 800961c:	200008d4 	.word	0x200008d4

08009620 <__ssputs_r>:
 8009620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009624:	688e      	ldr	r6, [r1, #8]
 8009626:	429e      	cmp	r6, r3
 8009628:	4682      	mov	sl, r0
 800962a:	460c      	mov	r4, r1
 800962c:	4690      	mov	r8, r2
 800962e:	461f      	mov	r7, r3
 8009630:	d838      	bhi.n	80096a4 <__ssputs_r+0x84>
 8009632:	898a      	ldrh	r2, [r1, #12]
 8009634:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009638:	d032      	beq.n	80096a0 <__ssputs_r+0x80>
 800963a:	6825      	ldr	r5, [r4, #0]
 800963c:	6909      	ldr	r1, [r1, #16]
 800963e:	eba5 0901 	sub.w	r9, r5, r1
 8009642:	6965      	ldr	r5, [r4, #20]
 8009644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009648:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800964c:	3301      	adds	r3, #1
 800964e:	444b      	add	r3, r9
 8009650:	106d      	asrs	r5, r5, #1
 8009652:	429d      	cmp	r5, r3
 8009654:	bf38      	it	cc
 8009656:	461d      	movcc	r5, r3
 8009658:	0553      	lsls	r3, r2, #21
 800965a:	d531      	bpl.n	80096c0 <__ssputs_r+0xa0>
 800965c:	4629      	mov	r1, r5
 800965e:	f7ff ff6b 	bl	8009538 <_malloc_r>
 8009662:	4606      	mov	r6, r0
 8009664:	b950      	cbnz	r0, 800967c <__ssputs_r+0x5c>
 8009666:	230c      	movs	r3, #12
 8009668:	f8ca 3000 	str.w	r3, [sl]
 800966c:	89a3      	ldrh	r3, [r4, #12]
 800966e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009672:	81a3      	strh	r3, [r4, #12]
 8009674:	f04f 30ff 	mov.w	r0, #4294967295
 8009678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800967c:	6921      	ldr	r1, [r4, #16]
 800967e:	464a      	mov	r2, r9
 8009680:	f7ff fb46 	bl	8008d10 <memcpy>
 8009684:	89a3      	ldrh	r3, [r4, #12]
 8009686:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800968a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800968e:	81a3      	strh	r3, [r4, #12]
 8009690:	6126      	str	r6, [r4, #16]
 8009692:	6165      	str	r5, [r4, #20]
 8009694:	444e      	add	r6, r9
 8009696:	eba5 0509 	sub.w	r5, r5, r9
 800969a:	6026      	str	r6, [r4, #0]
 800969c:	60a5      	str	r5, [r4, #8]
 800969e:	463e      	mov	r6, r7
 80096a0:	42be      	cmp	r6, r7
 80096a2:	d900      	bls.n	80096a6 <__ssputs_r+0x86>
 80096a4:	463e      	mov	r6, r7
 80096a6:	6820      	ldr	r0, [r4, #0]
 80096a8:	4632      	mov	r2, r6
 80096aa:	4641      	mov	r1, r8
 80096ac:	f000 ffc0 	bl	800a630 <memmove>
 80096b0:	68a3      	ldr	r3, [r4, #8]
 80096b2:	1b9b      	subs	r3, r3, r6
 80096b4:	60a3      	str	r3, [r4, #8]
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	4433      	add	r3, r6
 80096ba:	6023      	str	r3, [r4, #0]
 80096bc:	2000      	movs	r0, #0
 80096be:	e7db      	b.n	8009678 <__ssputs_r+0x58>
 80096c0:	462a      	mov	r2, r5
 80096c2:	f000 ffdb 	bl	800a67c <_realloc_r>
 80096c6:	4606      	mov	r6, r0
 80096c8:	2800      	cmp	r0, #0
 80096ca:	d1e1      	bne.n	8009690 <__ssputs_r+0x70>
 80096cc:	6921      	ldr	r1, [r4, #16]
 80096ce:	4650      	mov	r0, sl
 80096d0:	f7ff fec6 	bl	8009460 <_free_r>
 80096d4:	e7c7      	b.n	8009666 <__ssputs_r+0x46>
	...

080096d8 <_svfiprintf_r>:
 80096d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096dc:	4698      	mov	r8, r3
 80096de:	898b      	ldrh	r3, [r1, #12]
 80096e0:	061b      	lsls	r3, r3, #24
 80096e2:	b09d      	sub	sp, #116	; 0x74
 80096e4:	4607      	mov	r7, r0
 80096e6:	460d      	mov	r5, r1
 80096e8:	4614      	mov	r4, r2
 80096ea:	d50e      	bpl.n	800970a <_svfiprintf_r+0x32>
 80096ec:	690b      	ldr	r3, [r1, #16]
 80096ee:	b963      	cbnz	r3, 800970a <_svfiprintf_r+0x32>
 80096f0:	2140      	movs	r1, #64	; 0x40
 80096f2:	f7ff ff21 	bl	8009538 <_malloc_r>
 80096f6:	6028      	str	r0, [r5, #0]
 80096f8:	6128      	str	r0, [r5, #16]
 80096fa:	b920      	cbnz	r0, 8009706 <_svfiprintf_r+0x2e>
 80096fc:	230c      	movs	r3, #12
 80096fe:	603b      	str	r3, [r7, #0]
 8009700:	f04f 30ff 	mov.w	r0, #4294967295
 8009704:	e0d1      	b.n	80098aa <_svfiprintf_r+0x1d2>
 8009706:	2340      	movs	r3, #64	; 0x40
 8009708:	616b      	str	r3, [r5, #20]
 800970a:	2300      	movs	r3, #0
 800970c:	9309      	str	r3, [sp, #36]	; 0x24
 800970e:	2320      	movs	r3, #32
 8009710:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009714:	f8cd 800c 	str.w	r8, [sp, #12]
 8009718:	2330      	movs	r3, #48	; 0x30
 800971a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80098c4 <_svfiprintf_r+0x1ec>
 800971e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009722:	f04f 0901 	mov.w	r9, #1
 8009726:	4623      	mov	r3, r4
 8009728:	469a      	mov	sl, r3
 800972a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800972e:	b10a      	cbz	r2, 8009734 <_svfiprintf_r+0x5c>
 8009730:	2a25      	cmp	r2, #37	; 0x25
 8009732:	d1f9      	bne.n	8009728 <_svfiprintf_r+0x50>
 8009734:	ebba 0b04 	subs.w	fp, sl, r4
 8009738:	d00b      	beq.n	8009752 <_svfiprintf_r+0x7a>
 800973a:	465b      	mov	r3, fp
 800973c:	4622      	mov	r2, r4
 800973e:	4629      	mov	r1, r5
 8009740:	4638      	mov	r0, r7
 8009742:	f7ff ff6d 	bl	8009620 <__ssputs_r>
 8009746:	3001      	adds	r0, #1
 8009748:	f000 80aa 	beq.w	80098a0 <_svfiprintf_r+0x1c8>
 800974c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800974e:	445a      	add	r2, fp
 8009750:	9209      	str	r2, [sp, #36]	; 0x24
 8009752:	f89a 3000 	ldrb.w	r3, [sl]
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 80a2 	beq.w	80098a0 <_svfiprintf_r+0x1c8>
 800975c:	2300      	movs	r3, #0
 800975e:	f04f 32ff 	mov.w	r2, #4294967295
 8009762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009766:	f10a 0a01 	add.w	sl, sl, #1
 800976a:	9304      	str	r3, [sp, #16]
 800976c:	9307      	str	r3, [sp, #28]
 800976e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009772:	931a      	str	r3, [sp, #104]	; 0x68
 8009774:	4654      	mov	r4, sl
 8009776:	2205      	movs	r2, #5
 8009778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800977c:	4851      	ldr	r0, [pc, #324]	; (80098c4 <_svfiprintf_r+0x1ec>)
 800977e:	f7f6 fd4f 	bl	8000220 <memchr>
 8009782:	9a04      	ldr	r2, [sp, #16]
 8009784:	b9d8      	cbnz	r0, 80097be <_svfiprintf_r+0xe6>
 8009786:	06d0      	lsls	r0, r2, #27
 8009788:	bf44      	itt	mi
 800978a:	2320      	movmi	r3, #32
 800978c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009790:	0711      	lsls	r1, r2, #28
 8009792:	bf44      	itt	mi
 8009794:	232b      	movmi	r3, #43	; 0x2b
 8009796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800979a:	f89a 3000 	ldrb.w	r3, [sl]
 800979e:	2b2a      	cmp	r3, #42	; 0x2a
 80097a0:	d015      	beq.n	80097ce <_svfiprintf_r+0xf6>
 80097a2:	9a07      	ldr	r2, [sp, #28]
 80097a4:	4654      	mov	r4, sl
 80097a6:	2000      	movs	r0, #0
 80097a8:	f04f 0c0a 	mov.w	ip, #10
 80097ac:	4621      	mov	r1, r4
 80097ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097b2:	3b30      	subs	r3, #48	; 0x30
 80097b4:	2b09      	cmp	r3, #9
 80097b6:	d94e      	bls.n	8009856 <_svfiprintf_r+0x17e>
 80097b8:	b1b0      	cbz	r0, 80097e8 <_svfiprintf_r+0x110>
 80097ba:	9207      	str	r2, [sp, #28]
 80097bc:	e014      	b.n	80097e8 <_svfiprintf_r+0x110>
 80097be:	eba0 0308 	sub.w	r3, r0, r8
 80097c2:	fa09 f303 	lsl.w	r3, r9, r3
 80097c6:	4313      	orrs	r3, r2
 80097c8:	9304      	str	r3, [sp, #16]
 80097ca:	46a2      	mov	sl, r4
 80097cc:	e7d2      	b.n	8009774 <_svfiprintf_r+0x9c>
 80097ce:	9b03      	ldr	r3, [sp, #12]
 80097d0:	1d19      	adds	r1, r3, #4
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	9103      	str	r1, [sp, #12]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	bfbb      	ittet	lt
 80097da:	425b      	neglt	r3, r3
 80097dc:	f042 0202 	orrlt.w	r2, r2, #2
 80097e0:	9307      	strge	r3, [sp, #28]
 80097e2:	9307      	strlt	r3, [sp, #28]
 80097e4:	bfb8      	it	lt
 80097e6:	9204      	strlt	r2, [sp, #16]
 80097e8:	7823      	ldrb	r3, [r4, #0]
 80097ea:	2b2e      	cmp	r3, #46	; 0x2e
 80097ec:	d10c      	bne.n	8009808 <_svfiprintf_r+0x130>
 80097ee:	7863      	ldrb	r3, [r4, #1]
 80097f0:	2b2a      	cmp	r3, #42	; 0x2a
 80097f2:	d135      	bne.n	8009860 <_svfiprintf_r+0x188>
 80097f4:	9b03      	ldr	r3, [sp, #12]
 80097f6:	1d1a      	adds	r2, r3, #4
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	9203      	str	r2, [sp, #12]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	bfb8      	it	lt
 8009800:	f04f 33ff 	movlt.w	r3, #4294967295
 8009804:	3402      	adds	r4, #2
 8009806:	9305      	str	r3, [sp, #20]
 8009808:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80098d4 <_svfiprintf_r+0x1fc>
 800980c:	7821      	ldrb	r1, [r4, #0]
 800980e:	2203      	movs	r2, #3
 8009810:	4650      	mov	r0, sl
 8009812:	f7f6 fd05 	bl	8000220 <memchr>
 8009816:	b140      	cbz	r0, 800982a <_svfiprintf_r+0x152>
 8009818:	2340      	movs	r3, #64	; 0x40
 800981a:	eba0 000a 	sub.w	r0, r0, sl
 800981e:	fa03 f000 	lsl.w	r0, r3, r0
 8009822:	9b04      	ldr	r3, [sp, #16]
 8009824:	4303      	orrs	r3, r0
 8009826:	3401      	adds	r4, #1
 8009828:	9304      	str	r3, [sp, #16]
 800982a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800982e:	4826      	ldr	r0, [pc, #152]	; (80098c8 <_svfiprintf_r+0x1f0>)
 8009830:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009834:	2206      	movs	r2, #6
 8009836:	f7f6 fcf3 	bl	8000220 <memchr>
 800983a:	2800      	cmp	r0, #0
 800983c:	d038      	beq.n	80098b0 <_svfiprintf_r+0x1d8>
 800983e:	4b23      	ldr	r3, [pc, #140]	; (80098cc <_svfiprintf_r+0x1f4>)
 8009840:	bb1b      	cbnz	r3, 800988a <_svfiprintf_r+0x1b2>
 8009842:	9b03      	ldr	r3, [sp, #12]
 8009844:	3307      	adds	r3, #7
 8009846:	f023 0307 	bic.w	r3, r3, #7
 800984a:	3308      	adds	r3, #8
 800984c:	9303      	str	r3, [sp, #12]
 800984e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009850:	4433      	add	r3, r6
 8009852:	9309      	str	r3, [sp, #36]	; 0x24
 8009854:	e767      	b.n	8009726 <_svfiprintf_r+0x4e>
 8009856:	fb0c 3202 	mla	r2, ip, r2, r3
 800985a:	460c      	mov	r4, r1
 800985c:	2001      	movs	r0, #1
 800985e:	e7a5      	b.n	80097ac <_svfiprintf_r+0xd4>
 8009860:	2300      	movs	r3, #0
 8009862:	3401      	adds	r4, #1
 8009864:	9305      	str	r3, [sp, #20]
 8009866:	4619      	mov	r1, r3
 8009868:	f04f 0c0a 	mov.w	ip, #10
 800986c:	4620      	mov	r0, r4
 800986e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009872:	3a30      	subs	r2, #48	; 0x30
 8009874:	2a09      	cmp	r2, #9
 8009876:	d903      	bls.n	8009880 <_svfiprintf_r+0x1a8>
 8009878:	2b00      	cmp	r3, #0
 800987a:	d0c5      	beq.n	8009808 <_svfiprintf_r+0x130>
 800987c:	9105      	str	r1, [sp, #20]
 800987e:	e7c3      	b.n	8009808 <_svfiprintf_r+0x130>
 8009880:	fb0c 2101 	mla	r1, ip, r1, r2
 8009884:	4604      	mov	r4, r0
 8009886:	2301      	movs	r3, #1
 8009888:	e7f0      	b.n	800986c <_svfiprintf_r+0x194>
 800988a:	ab03      	add	r3, sp, #12
 800988c:	9300      	str	r3, [sp, #0]
 800988e:	462a      	mov	r2, r5
 8009890:	4b0f      	ldr	r3, [pc, #60]	; (80098d0 <_svfiprintf_r+0x1f8>)
 8009892:	a904      	add	r1, sp, #16
 8009894:	4638      	mov	r0, r7
 8009896:	f7fd ff11 	bl	80076bc <_printf_float>
 800989a:	1c42      	adds	r2, r0, #1
 800989c:	4606      	mov	r6, r0
 800989e:	d1d6      	bne.n	800984e <_svfiprintf_r+0x176>
 80098a0:	89ab      	ldrh	r3, [r5, #12]
 80098a2:	065b      	lsls	r3, r3, #25
 80098a4:	f53f af2c 	bmi.w	8009700 <_svfiprintf_r+0x28>
 80098a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098aa:	b01d      	add	sp, #116	; 0x74
 80098ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b0:	ab03      	add	r3, sp, #12
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	462a      	mov	r2, r5
 80098b6:	4b06      	ldr	r3, [pc, #24]	; (80098d0 <_svfiprintf_r+0x1f8>)
 80098b8:	a904      	add	r1, sp, #16
 80098ba:	4638      	mov	r0, r7
 80098bc:	f7fe f9a2 	bl	8007c04 <_printf_i>
 80098c0:	e7eb      	b.n	800989a <_svfiprintf_r+0x1c2>
 80098c2:	bf00      	nop
 80098c4:	0800afc4 	.word	0x0800afc4
 80098c8:	0800afce 	.word	0x0800afce
 80098cc:	080076bd 	.word	0x080076bd
 80098d0:	08009621 	.word	0x08009621
 80098d4:	0800afca 	.word	0x0800afca

080098d8 <_sungetc_r>:
 80098d8:	b538      	push	{r3, r4, r5, lr}
 80098da:	1c4b      	adds	r3, r1, #1
 80098dc:	4614      	mov	r4, r2
 80098de:	d103      	bne.n	80098e8 <_sungetc_r+0x10>
 80098e0:	f04f 35ff 	mov.w	r5, #4294967295
 80098e4:	4628      	mov	r0, r5
 80098e6:	bd38      	pop	{r3, r4, r5, pc}
 80098e8:	8993      	ldrh	r3, [r2, #12]
 80098ea:	f023 0320 	bic.w	r3, r3, #32
 80098ee:	8193      	strh	r3, [r2, #12]
 80098f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098f2:	6852      	ldr	r2, [r2, #4]
 80098f4:	b2cd      	uxtb	r5, r1
 80098f6:	b18b      	cbz	r3, 800991c <_sungetc_r+0x44>
 80098f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80098fa:	4293      	cmp	r3, r2
 80098fc:	dd08      	ble.n	8009910 <_sungetc_r+0x38>
 80098fe:	6823      	ldr	r3, [r4, #0]
 8009900:	1e5a      	subs	r2, r3, #1
 8009902:	6022      	str	r2, [r4, #0]
 8009904:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009908:	6863      	ldr	r3, [r4, #4]
 800990a:	3301      	adds	r3, #1
 800990c:	6063      	str	r3, [r4, #4]
 800990e:	e7e9      	b.n	80098e4 <_sungetc_r+0xc>
 8009910:	4621      	mov	r1, r4
 8009912:	f000 fc57 	bl	800a1c4 <__submore>
 8009916:	2800      	cmp	r0, #0
 8009918:	d0f1      	beq.n	80098fe <_sungetc_r+0x26>
 800991a:	e7e1      	b.n	80098e0 <_sungetc_r+0x8>
 800991c:	6921      	ldr	r1, [r4, #16]
 800991e:	6823      	ldr	r3, [r4, #0]
 8009920:	b151      	cbz	r1, 8009938 <_sungetc_r+0x60>
 8009922:	4299      	cmp	r1, r3
 8009924:	d208      	bcs.n	8009938 <_sungetc_r+0x60>
 8009926:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800992a:	42a9      	cmp	r1, r5
 800992c:	d104      	bne.n	8009938 <_sungetc_r+0x60>
 800992e:	3b01      	subs	r3, #1
 8009930:	3201      	adds	r2, #1
 8009932:	6023      	str	r3, [r4, #0]
 8009934:	6062      	str	r2, [r4, #4]
 8009936:	e7d5      	b.n	80098e4 <_sungetc_r+0xc>
 8009938:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800993c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009940:	6363      	str	r3, [r4, #52]	; 0x34
 8009942:	2303      	movs	r3, #3
 8009944:	63a3      	str	r3, [r4, #56]	; 0x38
 8009946:	4623      	mov	r3, r4
 8009948:	f803 5f46 	strb.w	r5, [r3, #70]!
 800994c:	6023      	str	r3, [r4, #0]
 800994e:	2301      	movs	r3, #1
 8009950:	e7dc      	b.n	800990c <_sungetc_r+0x34>

08009952 <__ssrefill_r>:
 8009952:	b510      	push	{r4, lr}
 8009954:	460c      	mov	r4, r1
 8009956:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009958:	b169      	cbz	r1, 8009976 <__ssrefill_r+0x24>
 800995a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800995e:	4299      	cmp	r1, r3
 8009960:	d001      	beq.n	8009966 <__ssrefill_r+0x14>
 8009962:	f7ff fd7d 	bl	8009460 <_free_r>
 8009966:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009968:	6063      	str	r3, [r4, #4]
 800996a:	2000      	movs	r0, #0
 800996c:	6360      	str	r0, [r4, #52]	; 0x34
 800996e:	b113      	cbz	r3, 8009976 <__ssrefill_r+0x24>
 8009970:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009972:	6023      	str	r3, [r4, #0]
 8009974:	bd10      	pop	{r4, pc}
 8009976:	6923      	ldr	r3, [r4, #16]
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	2300      	movs	r3, #0
 800997c:	6063      	str	r3, [r4, #4]
 800997e:	89a3      	ldrh	r3, [r4, #12]
 8009980:	f043 0320 	orr.w	r3, r3, #32
 8009984:	81a3      	strh	r3, [r4, #12]
 8009986:	f04f 30ff 	mov.w	r0, #4294967295
 800998a:	e7f3      	b.n	8009974 <__ssrefill_r+0x22>

0800998c <__ssvfiscanf_r>:
 800998c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009990:	460c      	mov	r4, r1
 8009992:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009996:	2100      	movs	r1, #0
 8009998:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800999c:	49a6      	ldr	r1, [pc, #664]	; (8009c38 <__ssvfiscanf_r+0x2ac>)
 800999e:	91a0      	str	r1, [sp, #640]	; 0x280
 80099a0:	f10d 0804 	add.w	r8, sp, #4
 80099a4:	49a5      	ldr	r1, [pc, #660]	; (8009c3c <__ssvfiscanf_r+0x2b0>)
 80099a6:	4fa6      	ldr	r7, [pc, #664]	; (8009c40 <__ssvfiscanf_r+0x2b4>)
 80099a8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009c44 <__ssvfiscanf_r+0x2b8>
 80099ac:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80099b0:	4606      	mov	r6, r0
 80099b2:	91a1      	str	r1, [sp, #644]	; 0x284
 80099b4:	9300      	str	r3, [sp, #0]
 80099b6:	7813      	ldrb	r3, [r2, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f000 815a 	beq.w	8009c72 <__ssvfiscanf_r+0x2e6>
 80099be:	5dd9      	ldrb	r1, [r3, r7]
 80099c0:	f011 0108 	ands.w	r1, r1, #8
 80099c4:	f102 0501 	add.w	r5, r2, #1
 80099c8:	d019      	beq.n	80099fe <__ssvfiscanf_r+0x72>
 80099ca:	6863      	ldr	r3, [r4, #4]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	dd0f      	ble.n	80099f0 <__ssvfiscanf_r+0x64>
 80099d0:	6823      	ldr	r3, [r4, #0]
 80099d2:	781a      	ldrb	r2, [r3, #0]
 80099d4:	5cba      	ldrb	r2, [r7, r2]
 80099d6:	0712      	lsls	r2, r2, #28
 80099d8:	d401      	bmi.n	80099de <__ssvfiscanf_r+0x52>
 80099da:	462a      	mov	r2, r5
 80099dc:	e7eb      	b.n	80099b6 <__ssvfiscanf_r+0x2a>
 80099de:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80099e0:	3201      	adds	r2, #1
 80099e2:	9245      	str	r2, [sp, #276]	; 0x114
 80099e4:	6862      	ldr	r2, [r4, #4]
 80099e6:	3301      	adds	r3, #1
 80099e8:	3a01      	subs	r2, #1
 80099ea:	6062      	str	r2, [r4, #4]
 80099ec:	6023      	str	r3, [r4, #0]
 80099ee:	e7ec      	b.n	80099ca <__ssvfiscanf_r+0x3e>
 80099f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80099f2:	4621      	mov	r1, r4
 80099f4:	4630      	mov	r0, r6
 80099f6:	4798      	blx	r3
 80099f8:	2800      	cmp	r0, #0
 80099fa:	d0e9      	beq.n	80099d0 <__ssvfiscanf_r+0x44>
 80099fc:	e7ed      	b.n	80099da <__ssvfiscanf_r+0x4e>
 80099fe:	2b25      	cmp	r3, #37	; 0x25
 8009a00:	d012      	beq.n	8009a28 <__ssvfiscanf_r+0x9c>
 8009a02:	469a      	mov	sl, r3
 8009a04:	6863      	ldr	r3, [r4, #4]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	f340 8091 	ble.w	8009b2e <__ssvfiscanf_r+0x1a2>
 8009a0c:	6822      	ldr	r2, [r4, #0]
 8009a0e:	7813      	ldrb	r3, [r2, #0]
 8009a10:	4553      	cmp	r3, sl
 8009a12:	f040 812e 	bne.w	8009c72 <__ssvfiscanf_r+0x2e6>
 8009a16:	6863      	ldr	r3, [r4, #4]
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	6063      	str	r3, [r4, #4]
 8009a1c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009a1e:	3201      	adds	r2, #1
 8009a20:	3301      	adds	r3, #1
 8009a22:	6022      	str	r2, [r4, #0]
 8009a24:	9345      	str	r3, [sp, #276]	; 0x114
 8009a26:	e7d8      	b.n	80099da <__ssvfiscanf_r+0x4e>
 8009a28:	9141      	str	r1, [sp, #260]	; 0x104
 8009a2a:	9143      	str	r1, [sp, #268]	; 0x10c
 8009a2c:	7853      	ldrb	r3, [r2, #1]
 8009a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8009a30:	bf02      	ittt	eq
 8009a32:	2310      	moveq	r3, #16
 8009a34:	1c95      	addeq	r5, r2, #2
 8009a36:	9341      	streq	r3, [sp, #260]	; 0x104
 8009a38:	220a      	movs	r2, #10
 8009a3a:	46aa      	mov	sl, r5
 8009a3c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009a40:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009a44:	2b09      	cmp	r3, #9
 8009a46:	d91d      	bls.n	8009a84 <__ssvfiscanf_r+0xf8>
 8009a48:	487e      	ldr	r0, [pc, #504]	; (8009c44 <__ssvfiscanf_r+0x2b8>)
 8009a4a:	2203      	movs	r2, #3
 8009a4c:	f7f6 fbe8 	bl	8000220 <memchr>
 8009a50:	b140      	cbz	r0, 8009a64 <__ssvfiscanf_r+0xd8>
 8009a52:	2301      	movs	r3, #1
 8009a54:	eba0 0009 	sub.w	r0, r0, r9
 8009a58:	fa03 f000 	lsl.w	r0, r3, r0
 8009a5c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009a5e:	4318      	orrs	r0, r3
 8009a60:	9041      	str	r0, [sp, #260]	; 0x104
 8009a62:	4655      	mov	r5, sl
 8009a64:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009a68:	2b78      	cmp	r3, #120	; 0x78
 8009a6a:	d806      	bhi.n	8009a7a <__ssvfiscanf_r+0xee>
 8009a6c:	2b57      	cmp	r3, #87	; 0x57
 8009a6e:	d810      	bhi.n	8009a92 <__ssvfiscanf_r+0x106>
 8009a70:	2b25      	cmp	r3, #37	; 0x25
 8009a72:	d0c6      	beq.n	8009a02 <__ssvfiscanf_r+0x76>
 8009a74:	d856      	bhi.n	8009b24 <__ssvfiscanf_r+0x198>
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d064      	beq.n	8009b44 <__ssvfiscanf_r+0x1b8>
 8009a7a:	2303      	movs	r3, #3
 8009a7c:	9347      	str	r3, [sp, #284]	; 0x11c
 8009a7e:	230a      	movs	r3, #10
 8009a80:	9342      	str	r3, [sp, #264]	; 0x108
 8009a82:	e071      	b.n	8009b68 <__ssvfiscanf_r+0x1dc>
 8009a84:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009a86:	fb02 1103 	mla	r1, r2, r3, r1
 8009a8a:	3930      	subs	r1, #48	; 0x30
 8009a8c:	9143      	str	r1, [sp, #268]	; 0x10c
 8009a8e:	4655      	mov	r5, sl
 8009a90:	e7d3      	b.n	8009a3a <__ssvfiscanf_r+0xae>
 8009a92:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009a96:	2a20      	cmp	r2, #32
 8009a98:	d8ef      	bhi.n	8009a7a <__ssvfiscanf_r+0xee>
 8009a9a:	a101      	add	r1, pc, #4	; (adr r1, 8009aa0 <__ssvfiscanf_r+0x114>)
 8009a9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009aa0:	08009b53 	.word	0x08009b53
 8009aa4:	08009a7b 	.word	0x08009a7b
 8009aa8:	08009a7b 	.word	0x08009a7b
 8009aac:	08009bb1 	.word	0x08009bb1
 8009ab0:	08009a7b 	.word	0x08009a7b
 8009ab4:	08009a7b 	.word	0x08009a7b
 8009ab8:	08009a7b 	.word	0x08009a7b
 8009abc:	08009a7b 	.word	0x08009a7b
 8009ac0:	08009a7b 	.word	0x08009a7b
 8009ac4:	08009a7b 	.word	0x08009a7b
 8009ac8:	08009a7b 	.word	0x08009a7b
 8009acc:	08009bc7 	.word	0x08009bc7
 8009ad0:	08009b9d 	.word	0x08009b9d
 8009ad4:	08009b2b 	.word	0x08009b2b
 8009ad8:	08009b2b 	.word	0x08009b2b
 8009adc:	08009b2b 	.word	0x08009b2b
 8009ae0:	08009a7b 	.word	0x08009a7b
 8009ae4:	08009ba1 	.word	0x08009ba1
 8009ae8:	08009a7b 	.word	0x08009a7b
 8009aec:	08009a7b 	.word	0x08009a7b
 8009af0:	08009a7b 	.word	0x08009a7b
 8009af4:	08009a7b 	.word	0x08009a7b
 8009af8:	08009bd7 	.word	0x08009bd7
 8009afc:	08009ba9 	.word	0x08009ba9
 8009b00:	08009b4b 	.word	0x08009b4b
 8009b04:	08009a7b 	.word	0x08009a7b
 8009b08:	08009a7b 	.word	0x08009a7b
 8009b0c:	08009bd3 	.word	0x08009bd3
 8009b10:	08009a7b 	.word	0x08009a7b
 8009b14:	08009b9d 	.word	0x08009b9d
 8009b18:	08009a7b 	.word	0x08009a7b
 8009b1c:	08009a7b 	.word	0x08009a7b
 8009b20:	08009b53 	.word	0x08009b53
 8009b24:	3b45      	subs	r3, #69	; 0x45
 8009b26:	2b02      	cmp	r3, #2
 8009b28:	d8a7      	bhi.n	8009a7a <__ssvfiscanf_r+0xee>
 8009b2a:	2305      	movs	r3, #5
 8009b2c:	e01b      	b.n	8009b66 <__ssvfiscanf_r+0x1da>
 8009b2e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009b30:	4621      	mov	r1, r4
 8009b32:	4630      	mov	r0, r6
 8009b34:	4798      	blx	r3
 8009b36:	2800      	cmp	r0, #0
 8009b38:	f43f af68 	beq.w	8009a0c <__ssvfiscanf_r+0x80>
 8009b3c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	f040 808d 	bne.w	8009c5e <__ssvfiscanf_r+0x2d2>
 8009b44:	f04f 30ff 	mov.w	r0, #4294967295
 8009b48:	e08f      	b.n	8009c6a <__ssvfiscanf_r+0x2de>
 8009b4a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009b4c:	f042 0220 	orr.w	r2, r2, #32
 8009b50:	9241      	str	r2, [sp, #260]	; 0x104
 8009b52:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b58:	9241      	str	r2, [sp, #260]	; 0x104
 8009b5a:	2210      	movs	r2, #16
 8009b5c:	2b6f      	cmp	r3, #111	; 0x6f
 8009b5e:	9242      	str	r2, [sp, #264]	; 0x108
 8009b60:	bf34      	ite	cc
 8009b62:	2303      	movcc	r3, #3
 8009b64:	2304      	movcs	r3, #4
 8009b66:	9347      	str	r3, [sp, #284]	; 0x11c
 8009b68:	6863      	ldr	r3, [r4, #4]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	dd42      	ble.n	8009bf4 <__ssvfiscanf_r+0x268>
 8009b6e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009b70:	0659      	lsls	r1, r3, #25
 8009b72:	d404      	bmi.n	8009b7e <__ssvfiscanf_r+0x1f2>
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	781a      	ldrb	r2, [r3, #0]
 8009b78:	5cba      	ldrb	r2, [r7, r2]
 8009b7a:	0712      	lsls	r2, r2, #28
 8009b7c:	d441      	bmi.n	8009c02 <__ssvfiscanf_r+0x276>
 8009b7e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	dc50      	bgt.n	8009c26 <__ssvfiscanf_r+0x29a>
 8009b84:	466b      	mov	r3, sp
 8009b86:	4622      	mov	r2, r4
 8009b88:	a941      	add	r1, sp, #260	; 0x104
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	f000 f876 	bl	8009c7c <_scanf_chars>
 8009b90:	2801      	cmp	r0, #1
 8009b92:	d06e      	beq.n	8009c72 <__ssvfiscanf_r+0x2e6>
 8009b94:	2802      	cmp	r0, #2
 8009b96:	f47f af20 	bne.w	80099da <__ssvfiscanf_r+0x4e>
 8009b9a:	e7cf      	b.n	8009b3c <__ssvfiscanf_r+0x1b0>
 8009b9c:	220a      	movs	r2, #10
 8009b9e:	e7dd      	b.n	8009b5c <__ssvfiscanf_r+0x1d0>
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	9342      	str	r3, [sp, #264]	; 0x108
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	e7de      	b.n	8009b66 <__ssvfiscanf_r+0x1da>
 8009ba8:	2308      	movs	r3, #8
 8009baa:	9342      	str	r3, [sp, #264]	; 0x108
 8009bac:	2304      	movs	r3, #4
 8009bae:	e7da      	b.n	8009b66 <__ssvfiscanf_r+0x1da>
 8009bb0:	4629      	mov	r1, r5
 8009bb2:	4640      	mov	r0, r8
 8009bb4:	f000 f9d6 	bl	8009f64 <__sccl>
 8009bb8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bbe:	9341      	str	r3, [sp, #260]	; 0x104
 8009bc0:	4605      	mov	r5, r0
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e7cf      	b.n	8009b66 <__ssvfiscanf_r+0x1da>
 8009bc6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bcc:	9341      	str	r3, [sp, #260]	; 0x104
 8009bce:	2300      	movs	r3, #0
 8009bd0:	e7c9      	b.n	8009b66 <__ssvfiscanf_r+0x1da>
 8009bd2:	2302      	movs	r3, #2
 8009bd4:	e7c7      	b.n	8009b66 <__ssvfiscanf_r+0x1da>
 8009bd6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009bd8:	06c3      	lsls	r3, r0, #27
 8009bda:	f53f aefe 	bmi.w	80099da <__ssvfiscanf_r+0x4e>
 8009bde:	9b00      	ldr	r3, [sp, #0]
 8009be0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009be2:	1d19      	adds	r1, r3, #4
 8009be4:	9100      	str	r1, [sp, #0]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f010 0f01 	tst.w	r0, #1
 8009bec:	bf14      	ite	ne
 8009bee:	801a      	strhne	r2, [r3, #0]
 8009bf0:	601a      	streq	r2, [r3, #0]
 8009bf2:	e6f2      	b.n	80099da <__ssvfiscanf_r+0x4e>
 8009bf4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	4798      	blx	r3
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d0b6      	beq.n	8009b6e <__ssvfiscanf_r+0x1e2>
 8009c00:	e79c      	b.n	8009b3c <__ssvfiscanf_r+0x1b0>
 8009c02:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009c04:	3201      	adds	r2, #1
 8009c06:	9245      	str	r2, [sp, #276]	; 0x114
 8009c08:	6862      	ldr	r2, [r4, #4]
 8009c0a:	3a01      	subs	r2, #1
 8009c0c:	2a00      	cmp	r2, #0
 8009c0e:	6062      	str	r2, [r4, #4]
 8009c10:	dd02      	ble.n	8009c18 <__ssvfiscanf_r+0x28c>
 8009c12:	3301      	adds	r3, #1
 8009c14:	6023      	str	r3, [r4, #0]
 8009c16:	e7ad      	b.n	8009b74 <__ssvfiscanf_r+0x1e8>
 8009c18:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009c1a:	4621      	mov	r1, r4
 8009c1c:	4630      	mov	r0, r6
 8009c1e:	4798      	blx	r3
 8009c20:	2800      	cmp	r0, #0
 8009c22:	d0a7      	beq.n	8009b74 <__ssvfiscanf_r+0x1e8>
 8009c24:	e78a      	b.n	8009b3c <__ssvfiscanf_r+0x1b0>
 8009c26:	2b04      	cmp	r3, #4
 8009c28:	dc0e      	bgt.n	8009c48 <__ssvfiscanf_r+0x2bc>
 8009c2a:	466b      	mov	r3, sp
 8009c2c:	4622      	mov	r2, r4
 8009c2e:	a941      	add	r1, sp, #260	; 0x104
 8009c30:	4630      	mov	r0, r6
 8009c32:	f000 f87d 	bl	8009d30 <_scanf_i>
 8009c36:	e7ab      	b.n	8009b90 <__ssvfiscanf_r+0x204>
 8009c38:	080098d9 	.word	0x080098d9
 8009c3c:	08009953 	.word	0x08009953
 8009c40:	0800b02d 	.word	0x0800b02d
 8009c44:	0800afca 	.word	0x0800afca
 8009c48:	4b0b      	ldr	r3, [pc, #44]	; (8009c78 <__ssvfiscanf_r+0x2ec>)
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	f43f aec5 	beq.w	80099da <__ssvfiscanf_r+0x4e>
 8009c50:	466b      	mov	r3, sp
 8009c52:	4622      	mov	r2, r4
 8009c54:	a941      	add	r1, sp, #260	; 0x104
 8009c56:	4630      	mov	r0, r6
 8009c58:	f3af 8000 	nop.w
 8009c5c:	e798      	b.n	8009b90 <__ssvfiscanf_r+0x204>
 8009c5e:	89a3      	ldrh	r3, [r4, #12]
 8009c60:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009c64:	bf18      	it	ne
 8009c66:	f04f 30ff 	movne.w	r0, #4294967295
 8009c6a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c72:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009c74:	e7f9      	b.n	8009c6a <__ssvfiscanf_r+0x2de>
 8009c76:	bf00      	nop
 8009c78:	00000000 	.word	0x00000000

08009c7c <_scanf_chars>:
 8009c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c80:	4615      	mov	r5, r2
 8009c82:	688a      	ldr	r2, [r1, #8]
 8009c84:	4680      	mov	r8, r0
 8009c86:	460c      	mov	r4, r1
 8009c88:	b932      	cbnz	r2, 8009c98 <_scanf_chars+0x1c>
 8009c8a:	698a      	ldr	r2, [r1, #24]
 8009c8c:	2a00      	cmp	r2, #0
 8009c8e:	bf0c      	ite	eq
 8009c90:	2201      	moveq	r2, #1
 8009c92:	f04f 32ff 	movne.w	r2, #4294967295
 8009c96:	608a      	str	r2, [r1, #8]
 8009c98:	6822      	ldr	r2, [r4, #0]
 8009c9a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009d2c <_scanf_chars+0xb0>
 8009c9e:	06d1      	lsls	r1, r2, #27
 8009ca0:	bf5f      	itttt	pl
 8009ca2:	681a      	ldrpl	r2, [r3, #0]
 8009ca4:	1d11      	addpl	r1, r2, #4
 8009ca6:	6019      	strpl	r1, [r3, #0]
 8009ca8:	6816      	ldrpl	r6, [r2, #0]
 8009caa:	2700      	movs	r7, #0
 8009cac:	69a0      	ldr	r0, [r4, #24]
 8009cae:	b188      	cbz	r0, 8009cd4 <_scanf_chars+0x58>
 8009cb0:	2801      	cmp	r0, #1
 8009cb2:	d107      	bne.n	8009cc4 <_scanf_chars+0x48>
 8009cb4:	682a      	ldr	r2, [r5, #0]
 8009cb6:	7811      	ldrb	r1, [r2, #0]
 8009cb8:	6962      	ldr	r2, [r4, #20]
 8009cba:	5c52      	ldrb	r2, [r2, r1]
 8009cbc:	b952      	cbnz	r2, 8009cd4 <_scanf_chars+0x58>
 8009cbe:	2f00      	cmp	r7, #0
 8009cc0:	d031      	beq.n	8009d26 <_scanf_chars+0xaa>
 8009cc2:	e022      	b.n	8009d0a <_scanf_chars+0x8e>
 8009cc4:	2802      	cmp	r0, #2
 8009cc6:	d120      	bne.n	8009d0a <_scanf_chars+0x8e>
 8009cc8:	682b      	ldr	r3, [r5, #0]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009cd0:	071b      	lsls	r3, r3, #28
 8009cd2:	d41a      	bmi.n	8009d0a <_scanf_chars+0x8e>
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	06da      	lsls	r2, r3, #27
 8009cd8:	bf5e      	ittt	pl
 8009cda:	682b      	ldrpl	r3, [r5, #0]
 8009cdc:	781b      	ldrbpl	r3, [r3, #0]
 8009cde:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009ce2:	682a      	ldr	r2, [r5, #0]
 8009ce4:	686b      	ldr	r3, [r5, #4]
 8009ce6:	3201      	adds	r2, #1
 8009ce8:	602a      	str	r2, [r5, #0]
 8009cea:	68a2      	ldr	r2, [r4, #8]
 8009cec:	3b01      	subs	r3, #1
 8009cee:	3a01      	subs	r2, #1
 8009cf0:	606b      	str	r3, [r5, #4]
 8009cf2:	3701      	adds	r7, #1
 8009cf4:	60a2      	str	r2, [r4, #8]
 8009cf6:	b142      	cbz	r2, 8009d0a <_scanf_chars+0x8e>
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	dcd7      	bgt.n	8009cac <_scanf_chars+0x30>
 8009cfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009d00:	4629      	mov	r1, r5
 8009d02:	4640      	mov	r0, r8
 8009d04:	4798      	blx	r3
 8009d06:	2800      	cmp	r0, #0
 8009d08:	d0d0      	beq.n	8009cac <_scanf_chars+0x30>
 8009d0a:	6823      	ldr	r3, [r4, #0]
 8009d0c:	f013 0310 	ands.w	r3, r3, #16
 8009d10:	d105      	bne.n	8009d1e <_scanf_chars+0xa2>
 8009d12:	68e2      	ldr	r2, [r4, #12]
 8009d14:	3201      	adds	r2, #1
 8009d16:	60e2      	str	r2, [r4, #12]
 8009d18:	69a2      	ldr	r2, [r4, #24]
 8009d1a:	b102      	cbz	r2, 8009d1e <_scanf_chars+0xa2>
 8009d1c:	7033      	strb	r3, [r6, #0]
 8009d1e:	6923      	ldr	r3, [r4, #16]
 8009d20:	443b      	add	r3, r7
 8009d22:	6123      	str	r3, [r4, #16]
 8009d24:	2000      	movs	r0, #0
 8009d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d2a:	bf00      	nop
 8009d2c:	0800b02d 	.word	0x0800b02d

08009d30 <_scanf_i>:
 8009d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d34:	4698      	mov	r8, r3
 8009d36:	4b76      	ldr	r3, [pc, #472]	; (8009f10 <_scanf_i+0x1e0>)
 8009d38:	460c      	mov	r4, r1
 8009d3a:	4682      	mov	sl, r0
 8009d3c:	4616      	mov	r6, r2
 8009d3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009d42:	b087      	sub	sp, #28
 8009d44:	ab03      	add	r3, sp, #12
 8009d46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009d4a:	4b72      	ldr	r3, [pc, #456]	; (8009f14 <_scanf_i+0x1e4>)
 8009d4c:	69a1      	ldr	r1, [r4, #24]
 8009d4e:	4a72      	ldr	r2, [pc, #456]	; (8009f18 <_scanf_i+0x1e8>)
 8009d50:	2903      	cmp	r1, #3
 8009d52:	bf18      	it	ne
 8009d54:	461a      	movne	r2, r3
 8009d56:	68a3      	ldr	r3, [r4, #8]
 8009d58:	9201      	str	r2, [sp, #4]
 8009d5a:	1e5a      	subs	r2, r3, #1
 8009d5c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009d60:	bf88      	it	hi
 8009d62:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009d66:	4627      	mov	r7, r4
 8009d68:	bf82      	ittt	hi
 8009d6a:	eb03 0905 	addhi.w	r9, r3, r5
 8009d6e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009d72:	60a3      	strhi	r3, [r4, #8]
 8009d74:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009d78:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009d7c:	bf98      	it	ls
 8009d7e:	f04f 0900 	movls.w	r9, #0
 8009d82:	6023      	str	r3, [r4, #0]
 8009d84:	463d      	mov	r5, r7
 8009d86:	f04f 0b00 	mov.w	fp, #0
 8009d8a:	6831      	ldr	r1, [r6, #0]
 8009d8c:	ab03      	add	r3, sp, #12
 8009d8e:	7809      	ldrb	r1, [r1, #0]
 8009d90:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009d94:	2202      	movs	r2, #2
 8009d96:	f7f6 fa43 	bl	8000220 <memchr>
 8009d9a:	b328      	cbz	r0, 8009de8 <_scanf_i+0xb8>
 8009d9c:	f1bb 0f01 	cmp.w	fp, #1
 8009da0:	d159      	bne.n	8009e56 <_scanf_i+0x126>
 8009da2:	6862      	ldr	r2, [r4, #4]
 8009da4:	b92a      	cbnz	r2, 8009db2 <_scanf_i+0x82>
 8009da6:	6822      	ldr	r2, [r4, #0]
 8009da8:	2308      	movs	r3, #8
 8009daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dae:	6063      	str	r3, [r4, #4]
 8009db0:	6022      	str	r2, [r4, #0]
 8009db2:	6822      	ldr	r2, [r4, #0]
 8009db4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009db8:	6022      	str	r2, [r4, #0]
 8009dba:	68a2      	ldr	r2, [r4, #8]
 8009dbc:	1e51      	subs	r1, r2, #1
 8009dbe:	60a1      	str	r1, [r4, #8]
 8009dc0:	b192      	cbz	r2, 8009de8 <_scanf_i+0xb8>
 8009dc2:	6832      	ldr	r2, [r6, #0]
 8009dc4:	1c51      	adds	r1, r2, #1
 8009dc6:	6031      	str	r1, [r6, #0]
 8009dc8:	7812      	ldrb	r2, [r2, #0]
 8009dca:	f805 2b01 	strb.w	r2, [r5], #1
 8009dce:	6872      	ldr	r2, [r6, #4]
 8009dd0:	3a01      	subs	r2, #1
 8009dd2:	2a00      	cmp	r2, #0
 8009dd4:	6072      	str	r2, [r6, #4]
 8009dd6:	dc07      	bgt.n	8009de8 <_scanf_i+0xb8>
 8009dd8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009ddc:	4631      	mov	r1, r6
 8009dde:	4650      	mov	r0, sl
 8009de0:	4790      	blx	r2
 8009de2:	2800      	cmp	r0, #0
 8009de4:	f040 8085 	bne.w	8009ef2 <_scanf_i+0x1c2>
 8009de8:	f10b 0b01 	add.w	fp, fp, #1
 8009dec:	f1bb 0f03 	cmp.w	fp, #3
 8009df0:	d1cb      	bne.n	8009d8a <_scanf_i+0x5a>
 8009df2:	6863      	ldr	r3, [r4, #4]
 8009df4:	b90b      	cbnz	r3, 8009dfa <_scanf_i+0xca>
 8009df6:	230a      	movs	r3, #10
 8009df8:	6063      	str	r3, [r4, #4]
 8009dfa:	6863      	ldr	r3, [r4, #4]
 8009dfc:	4947      	ldr	r1, [pc, #284]	; (8009f1c <_scanf_i+0x1ec>)
 8009dfe:	6960      	ldr	r0, [r4, #20]
 8009e00:	1ac9      	subs	r1, r1, r3
 8009e02:	f000 f8af 	bl	8009f64 <__sccl>
 8009e06:	f04f 0b00 	mov.w	fp, #0
 8009e0a:	68a3      	ldr	r3, [r4, #8]
 8009e0c:	6822      	ldr	r2, [r4, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d03d      	beq.n	8009e8e <_scanf_i+0x15e>
 8009e12:	6831      	ldr	r1, [r6, #0]
 8009e14:	6960      	ldr	r0, [r4, #20]
 8009e16:	f891 c000 	ldrb.w	ip, [r1]
 8009e1a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	d035      	beq.n	8009e8e <_scanf_i+0x15e>
 8009e22:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009e26:	d124      	bne.n	8009e72 <_scanf_i+0x142>
 8009e28:	0510      	lsls	r0, r2, #20
 8009e2a:	d522      	bpl.n	8009e72 <_scanf_i+0x142>
 8009e2c:	f10b 0b01 	add.w	fp, fp, #1
 8009e30:	f1b9 0f00 	cmp.w	r9, #0
 8009e34:	d003      	beq.n	8009e3e <_scanf_i+0x10e>
 8009e36:	3301      	adds	r3, #1
 8009e38:	f109 39ff 	add.w	r9, r9, #4294967295
 8009e3c:	60a3      	str	r3, [r4, #8]
 8009e3e:	6873      	ldr	r3, [r6, #4]
 8009e40:	3b01      	subs	r3, #1
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	6073      	str	r3, [r6, #4]
 8009e46:	dd1b      	ble.n	8009e80 <_scanf_i+0x150>
 8009e48:	6833      	ldr	r3, [r6, #0]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	6033      	str	r3, [r6, #0]
 8009e4e:	68a3      	ldr	r3, [r4, #8]
 8009e50:	3b01      	subs	r3, #1
 8009e52:	60a3      	str	r3, [r4, #8]
 8009e54:	e7d9      	b.n	8009e0a <_scanf_i+0xda>
 8009e56:	f1bb 0f02 	cmp.w	fp, #2
 8009e5a:	d1ae      	bne.n	8009dba <_scanf_i+0x8a>
 8009e5c:	6822      	ldr	r2, [r4, #0]
 8009e5e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009e62:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009e66:	d1bf      	bne.n	8009de8 <_scanf_i+0xb8>
 8009e68:	2310      	movs	r3, #16
 8009e6a:	6063      	str	r3, [r4, #4]
 8009e6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e70:	e7a2      	b.n	8009db8 <_scanf_i+0x88>
 8009e72:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009e76:	6022      	str	r2, [r4, #0]
 8009e78:	780b      	ldrb	r3, [r1, #0]
 8009e7a:	f805 3b01 	strb.w	r3, [r5], #1
 8009e7e:	e7de      	b.n	8009e3e <_scanf_i+0x10e>
 8009e80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009e84:	4631      	mov	r1, r6
 8009e86:	4650      	mov	r0, sl
 8009e88:	4798      	blx	r3
 8009e8a:	2800      	cmp	r0, #0
 8009e8c:	d0df      	beq.n	8009e4e <_scanf_i+0x11e>
 8009e8e:	6823      	ldr	r3, [r4, #0]
 8009e90:	05db      	lsls	r3, r3, #23
 8009e92:	d50d      	bpl.n	8009eb0 <_scanf_i+0x180>
 8009e94:	42bd      	cmp	r5, r7
 8009e96:	d909      	bls.n	8009eac <_scanf_i+0x17c>
 8009e98:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009e9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ea0:	4632      	mov	r2, r6
 8009ea2:	4650      	mov	r0, sl
 8009ea4:	4798      	blx	r3
 8009ea6:	f105 39ff 	add.w	r9, r5, #4294967295
 8009eaa:	464d      	mov	r5, r9
 8009eac:	42bd      	cmp	r5, r7
 8009eae:	d02d      	beq.n	8009f0c <_scanf_i+0x1dc>
 8009eb0:	6822      	ldr	r2, [r4, #0]
 8009eb2:	f012 0210 	ands.w	r2, r2, #16
 8009eb6:	d113      	bne.n	8009ee0 <_scanf_i+0x1b0>
 8009eb8:	702a      	strb	r2, [r5, #0]
 8009eba:	6863      	ldr	r3, [r4, #4]
 8009ebc:	9e01      	ldr	r6, [sp, #4]
 8009ebe:	4639      	mov	r1, r7
 8009ec0:	4650      	mov	r0, sl
 8009ec2:	47b0      	blx	r6
 8009ec4:	6821      	ldr	r1, [r4, #0]
 8009ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8009eca:	f011 0f20 	tst.w	r1, #32
 8009ece:	d013      	beq.n	8009ef8 <_scanf_i+0x1c8>
 8009ed0:	1d1a      	adds	r2, r3, #4
 8009ed2:	f8c8 2000 	str.w	r2, [r8]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	6018      	str	r0, [r3, #0]
 8009eda:	68e3      	ldr	r3, [r4, #12]
 8009edc:	3301      	adds	r3, #1
 8009ede:	60e3      	str	r3, [r4, #12]
 8009ee0:	1bed      	subs	r5, r5, r7
 8009ee2:	44ab      	add	fp, r5
 8009ee4:	6925      	ldr	r5, [r4, #16]
 8009ee6:	445d      	add	r5, fp
 8009ee8:	6125      	str	r5, [r4, #16]
 8009eea:	2000      	movs	r0, #0
 8009eec:	b007      	add	sp, #28
 8009eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef2:	f04f 0b00 	mov.w	fp, #0
 8009ef6:	e7ca      	b.n	8009e8e <_scanf_i+0x15e>
 8009ef8:	1d1a      	adds	r2, r3, #4
 8009efa:	f8c8 2000 	str.w	r2, [r8]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f011 0f01 	tst.w	r1, #1
 8009f04:	bf14      	ite	ne
 8009f06:	8018      	strhne	r0, [r3, #0]
 8009f08:	6018      	streq	r0, [r3, #0]
 8009f0a:	e7e6      	b.n	8009eda <_scanf_i+0x1aa>
 8009f0c:	2001      	movs	r0, #1
 8009f0e:	e7ed      	b.n	8009eec <_scanf_i+0x1bc>
 8009f10:	0800ad7c 	.word	0x0800ad7c
 8009f14:	0800a1c1 	.word	0x0800a1c1
 8009f18:	0800a0d9 	.word	0x0800a0d9
 8009f1c:	0800afee 	.word	0x0800afee

08009f20 <_read_r>:
 8009f20:	b538      	push	{r3, r4, r5, lr}
 8009f22:	4d07      	ldr	r5, [pc, #28]	; (8009f40 <_read_r+0x20>)
 8009f24:	4604      	mov	r4, r0
 8009f26:	4608      	mov	r0, r1
 8009f28:	4611      	mov	r1, r2
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	602a      	str	r2, [r5, #0]
 8009f2e:	461a      	mov	r2, r3
 8009f30:	f7f8 f884 	bl	800203c <_read>
 8009f34:	1c43      	adds	r3, r0, #1
 8009f36:	d102      	bne.n	8009f3e <_read_r+0x1e>
 8009f38:	682b      	ldr	r3, [r5, #0]
 8009f3a:	b103      	cbz	r3, 8009f3e <_read_r+0x1e>
 8009f3c:	6023      	str	r3, [r4, #0]
 8009f3e:	bd38      	pop	{r3, r4, r5, pc}
 8009f40:	200008dc 	.word	0x200008dc

08009f44 <_sbrk_r>:
 8009f44:	b538      	push	{r3, r4, r5, lr}
 8009f46:	4d06      	ldr	r5, [pc, #24]	; (8009f60 <_sbrk_r+0x1c>)
 8009f48:	2300      	movs	r3, #0
 8009f4a:	4604      	mov	r4, r0
 8009f4c:	4608      	mov	r0, r1
 8009f4e:	602b      	str	r3, [r5, #0]
 8009f50:	f7f8 f8e2 	bl	8002118 <_sbrk>
 8009f54:	1c43      	adds	r3, r0, #1
 8009f56:	d102      	bne.n	8009f5e <_sbrk_r+0x1a>
 8009f58:	682b      	ldr	r3, [r5, #0]
 8009f5a:	b103      	cbz	r3, 8009f5e <_sbrk_r+0x1a>
 8009f5c:	6023      	str	r3, [r4, #0]
 8009f5e:	bd38      	pop	{r3, r4, r5, pc}
 8009f60:	200008dc 	.word	0x200008dc

08009f64 <__sccl>:
 8009f64:	b570      	push	{r4, r5, r6, lr}
 8009f66:	780b      	ldrb	r3, [r1, #0]
 8009f68:	4604      	mov	r4, r0
 8009f6a:	2b5e      	cmp	r3, #94	; 0x5e
 8009f6c:	bf0b      	itete	eq
 8009f6e:	784b      	ldrbeq	r3, [r1, #1]
 8009f70:	1c48      	addne	r0, r1, #1
 8009f72:	1c88      	addeq	r0, r1, #2
 8009f74:	2200      	movne	r2, #0
 8009f76:	bf08      	it	eq
 8009f78:	2201      	moveq	r2, #1
 8009f7a:	1e61      	subs	r1, r4, #1
 8009f7c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009f80:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009f84:	42a9      	cmp	r1, r5
 8009f86:	d1fb      	bne.n	8009f80 <__sccl+0x1c>
 8009f88:	b90b      	cbnz	r3, 8009f8e <__sccl+0x2a>
 8009f8a:	3801      	subs	r0, #1
 8009f8c:	bd70      	pop	{r4, r5, r6, pc}
 8009f8e:	f082 0201 	eor.w	r2, r2, #1
 8009f92:	54e2      	strb	r2, [r4, r3]
 8009f94:	4605      	mov	r5, r0
 8009f96:	4628      	mov	r0, r5
 8009f98:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009f9c:	292d      	cmp	r1, #45	; 0x2d
 8009f9e:	d006      	beq.n	8009fae <__sccl+0x4a>
 8009fa0:	295d      	cmp	r1, #93	; 0x5d
 8009fa2:	d0f3      	beq.n	8009f8c <__sccl+0x28>
 8009fa4:	b909      	cbnz	r1, 8009faa <__sccl+0x46>
 8009fa6:	4628      	mov	r0, r5
 8009fa8:	e7f0      	b.n	8009f8c <__sccl+0x28>
 8009faa:	460b      	mov	r3, r1
 8009fac:	e7f1      	b.n	8009f92 <__sccl+0x2e>
 8009fae:	786e      	ldrb	r6, [r5, #1]
 8009fb0:	2e5d      	cmp	r6, #93	; 0x5d
 8009fb2:	d0fa      	beq.n	8009faa <__sccl+0x46>
 8009fb4:	42b3      	cmp	r3, r6
 8009fb6:	dcf8      	bgt.n	8009faa <__sccl+0x46>
 8009fb8:	3502      	adds	r5, #2
 8009fba:	4619      	mov	r1, r3
 8009fbc:	3101      	adds	r1, #1
 8009fbe:	428e      	cmp	r6, r1
 8009fc0:	5462      	strb	r2, [r4, r1]
 8009fc2:	dcfb      	bgt.n	8009fbc <__sccl+0x58>
 8009fc4:	1af1      	subs	r1, r6, r3
 8009fc6:	3901      	subs	r1, #1
 8009fc8:	1c58      	adds	r0, r3, #1
 8009fca:	42b3      	cmp	r3, r6
 8009fcc:	bfa8      	it	ge
 8009fce:	2100      	movge	r1, #0
 8009fd0:	1843      	adds	r3, r0, r1
 8009fd2:	e7e0      	b.n	8009f96 <__sccl+0x32>

08009fd4 <_strtol_l.constprop.0>:
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fda:	d001      	beq.n	8009fe0 <_strtol_l.constprop.0+0xc>
 8009fdc:	2b24      	cmp	r3, #36	; 0x24
 8009fde:	d906      	bls.n	8009fee <_strtol_l.constprop.0+0x1a>
 8009fe0:	f7fd fa9a 	bl	8007518 <__errno>
 8009fe4:	2316      	movs	r3, #22
 8009fe6:	6003      	str	r3, [r0, #0]
 8009fe8:	2000      	movs	r0, #0
 8009fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a0d4 <_strtol_l.constprop.0+0x100>
 8009ff2:	460d      	mov	r5, r1
 8009ff4:	462e      	mov	r6, r5
 8009ff6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ffa:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009ffe:	f017 0708 	ands.w	r7, r7, #8
 800a002:	d1f7      	bne.n	8009ff4 <_strtol_l.constprop.0+0x20>
 800a004:	2c2d      	cmp	r4, #45	; 0x2d
 800a006:	d132      	bne.n	800a06e <_strtol_l.constprop.0+0x9a>
 800a008:	782c      	ldrb	r4, [r5, #0]
 800a00a:	2701      	movs	r7, #1
 800a00c:	1cb5      	adds	r5, r6, #2
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d05b      	beq.n	800a0ca <_strtol_l.constprop.0+0xf6>
 800a012:	2b10      	cmp	r3, #16
 800a014:	d109      	bne.n	800a02a <_strtol_l.constprop.0+0x56>
 800a016:	2c30      	cmp	r4, #48	; 0x30
 800a018:	d107      	bne.n	800a02a <_strtol_l.constprop.0+0x56>
 800a01a:	782c      	ldrb	r4, [r5, #0]
 800a01c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a020:	2c58      	cmp	r4, #88	; 0x58
 800a022:	d14d      	bne.n	800a0c0 <_strtol_l.constprop.0+0xec>
 800a024:	786c      	ldrb	r4, [r5, #1]
 800a026:	2310      	movs	r3, #16
 800a028:	3502      	adds	r5, #2
 800a02a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a02e:	f108 38ff 	add.w	r8, r8, #4294967295
 800a032:	f04f 0c00 	mov.w	ip, #0
 800a036:	fbb8 f9f3 	udiv	r9, r8, r3
 800a03a:	4666      	mov	r6, ip
 800a03c:	fb03 8a19 	mls	sl, r3, r9, r8
 800a040:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a044:	f1be 0f09 	cmp.w	lr, #9
 800a048:	d816      	bhi.n	800a078 <_strtol_l.constprop.0+0xa4>
 800a04a:	4674      	mov	r4, lr
 800a04c:	42a3      	cmp	r3, r4
 800a04e:	dd24      	ble.n	800a09a <_strtol_l.constprop.0+0xc6>
 800a050:	f1bc 0f00 	cmp.w	ip, #0
 800a054:	db1e      	blt.n	800a094 <_strtol_l.constprop.0+0xc0>
 800a056:	45b1      	cmp	r9, r6
 800a058:	d31c      	bcc.n	800a094 <_strtol_l.constprop.0+0xc0>
 800a05a:	d101      	bne.n	800a060 <_strtol_l.constprop.0+0x8c>
 800a05c:	45a2      	cmp	sl, r4
 800a05e:	db19      	blt.n	800a094 <_strtol_l.constprop.0+0xc0>
 800a060:	fb06 4603 	mla	r6, r6, r3, r4
 800a064:	f04f 0c01 	mov.w	ip, #1
 800a068:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a06c:	e7e8      	b.n	800a040 <_strtol_l.constprop.0+0x6c>
 800a06e:	2c2b      	cmp	r4, #43	; 0x2b
 800a070:	bf04      	itt	eq
 800a072:	782c      	ldrbeq	r4, [r5, #0]
 800a074:	1cb5      	addeq	r5, r6, #2
 800a076:	e7ca      	b.n	800a00e <_strtol_l.constprop.0+0x3a>
 800a078:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a07c:	f1be 0f19 	cmp.w	lr, #25
 800a080:	d801      	bhi.n	800a086 <_strtol_l.constprop.0+0xb2>
 800a082:	3c37      	subs	r4, #55	; 0x37
 800a084:	e7e2      	b.n	800a04c <_strtol_l.constprop.0+0x78>
 800a086:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a08a:	f1be 0f19 	cmp.w	lr, #25
 800a08e:	d804      	bhi.n	800a09a <_strtol_l.constprop.0+0xc6>
 800a090:	3c57      	subs	r4, #87	; 0x57
 800a092:	e7db      	b.n	800a04c <_strtol_l.constprop.0+0x78>
 800a094:	f04f 3cff 	mov.w	ip, #4294967295
 800a098:	e7e6      	b.n	800a068 <_strtol_l.constprop.0+0x94>
 800a09a:	f1bc 0f00 	cmp.w	ip, #0
 800a09e:	da05      	bge.n	800a0ac <_strtol_l.constprop.0+0xd8>
 800a0a0:	2322      	movs	r3, #34	; 0x22
 800a0a2:	6003      	str	r3, [r0, #0]
 800a0a4:	4646      	mov	r6, r8
 800a0a6:	b942      	cbnz	r2, 800a0ba <_strtol_l.constprop.0+0xe6>
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	e79e      	b.n	8009fea <_strtol_l.constprop.0+0x16>
 800a0ac:	b107      	cbz	r7, 800a0b0 <_strtol_l.constprop.0+0xdc>
 800a0ae:	4276      	negs	r6, r6
 800a0b0:	2a00      	cmp	r2, #0
 800a0b2:	d0f9      	beq.n	800a0a8 <_strtol_l.constprop.0+0xd4>
 800a0b4:	f1bc 0f00 	cmp.w	ip, #0
 800a0b8:	d000      	beq.n	800a0bc <_strtol_l.constprop.0+0xe8>
 800a0ba:	1e69      	subs	r1, r5, #1
 800a0bc:	6011      	str	r1, [r2, #0]
 800a0be:	e7f3      	b.n	800a0a8 <_strtol_l.constprop.0+0xd4>
 800a0c0:	2430      	movs	r4, #48	; 0x30
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d1b1      	bne.n	800a02a <_strtol_l.constprop.0+0x56>
 800a0c6:	2308      	movs	r3, #8
 800a0c8:	e7af      	b.n	800a02a <_strtol_l.constprop.0+0x56>
 800a0ca:	2c30      	cmp	r4, #48	; 0x30
 800a0cc:	d0a5      	beq.n	800a01a <_strtol_l.constprop.0+0x46>
 800a0ce:	230a      	movs	r3, #10
 800a0d0:	e7ab      	b.n	800a02a <_strtol_l.constprop.0+0x56>
 800a0d2:	bf00      	nop
 800a0d4:	0800b02d 	.word	0x0800b02d

0800a0d8 <_strtol_r>:
 800a0d8:	f7ff bf7c 	b.w	8009fd4 <_strtol_l.constprop.0>

0800a0dc <_strtoul_l.constprop.0>:
 800a0dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0e0:	4f36      	ldr	r7, [pc, #216]	; (800a1bc <_strtoul_l.constprop.0+0xe0>)
 800a0e2:	4686      	mov	lr, r0
 800a0e4:	460d      	mov	r5, r1
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0ec:	5de6      	ldrb	r6, [r4, r7]
 800a0ee:	f016 0608 	ands.w	r6, r6, #8
 800a0f2:	d1f8      	bne.n	800a0e6 <_strtoul_l.constprop.0+0xa>
 800a0f4:	2c2d      	cmp	r4, #45	; 0x2d
 800a0f6:	d12f      	bne.n	800a158 <_strtoul_l.constprop.0+0x7c>
 800a0f8:	782c      	ldrb	r4, [r5, #0]
 800a0fa:	2601      	movs	r6, #1
 800a0fc:	1c85      	adds	r5, r0, #2
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d057      	beq.n	800a1b2 <_strtoul_l.constprop.0+0xd6>
 800a102:	2b10      	cmp	r3, #16
 800a104:	d109      	bne.n	800a11a <_strtoul_l.constprop.0+0x3e>
 800a106:	2c30      	cmp	r4, #48	; 0x30
 800a108:	d107      	bne.n	800a11a <_strtoul_l.constprop.0+0x3e>
 800a10a:	7828      	ldrb	r0, [r5, #0]
 800a10c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a110:	2858      	cmp	r0, #88	; 0x58
 800a112:	d149      	bne.n	800a1a8 <_strtoul_l.constprop.0+0xcc>
 800a114:	786c      	ldrb	r4, [r5, #1]
 800a116:	2310      	movs	r3, #16
 800a118:	3502      	adds	r5, #2
 800a11a:	f04f 38ff 	mov.w	r8, #4294967295
 800a11e:	2700      	movs	r7, #0
 800a120:	fbb8 f8f3 	udiv	r8, r8, r3
 800a124:	fb03 f908 	mul.w	r9, r3, r8
 800a128:	ea6f 0909 	mvn.w	r9, r9
 800a12c:	4638      	mov	r0, r7
 800a12e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a132:	f1bc 0f09 	cmp.w	ip, #9
 800a136:	d814      	bhi.n	800a162 <_strtoul_l.constprop.0+0x86>
 800a138:	4664      	mov	r4, ip
 800a13a:	42a3      	cmp	r3, r4
 800a13c:	dd22      	ble.n	800a184 <_strtoul_l.constprop.0+0xa8>
 800a13e:	2f00      	cmp	r7, #0
 800a140:	db1d      	blt.n	800a17e <_strtoul_l.constprop.0+0xa2>
 800a142:	4580      	cmp	r8, r0
 800a144:	d31b      	bcc.n	800a17e <_strtoul_l.constprop.0+0xa2>
 800a146:	d101      	bne.n	800a14c <_strtoul_l.constprop.0+0x70>
 800a148:	45a1      	cmp	r9, r4
 800a14a:	db18      	blt.n	800a17e <_strtoul_l.constprop.0+0xa2>
 800a14c:	fb00 4003 	mla	r0, r0, r3, r4
 800a150:	2701      	movs	r7, #1
 800a152:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a156:	e7ea      	b.n	800a12e <_strtoul_l.constprop.0+0x52>
 800a158:	2c2b      	cmp	r4, #43	; 0x2b
 800a15a:	bf04      	itt	eq
 800a15c:	782c      	ldrbeq	r4, [r5, #0]
 800a15e:	1c85      	addeq	r5, r0, #2
 800a160:	e7cd      	b.n	800a0fe <_strtoul_l.constprop.0+0x22>
 800a162:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a166:	f1bc 0f19 	cmp.w	ip, #25
 800a16a:	d801      	bhi.n	800a170 <_strtoul_l.constprop.0+0x94>
 800a16c:	3c37      	subs	r4, #55	; 0x37
 800a16e:	e7e4      	b.n	800a13a <_strtoul_l.constprop.0+0x5e>
 800a170:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a174:	f1bc 0f19 	cmp.w	ip, #25
 800a178:	d804      	bhi.n	800a184 <_strtoul_l.constprop.0+0xa8>
 800a17a:	3c57      	subs	r4, #87	; 0x57
 800a17c:	e7dd      	b.n	800a13a <_strtoul_l.constprop.0+0x5e>
 800a17e:	f04f 37ff 	mov.w	r7, #4294967295
 800a182:	e7e6      	b.n	800a152 <_strtoul_l.constprop.0+0x76>
 800a184:	2f00      	cmp	r7, #0
 800a186:	da07      	bge.n	800a198 <_strtoul_l.constprop.0+0xbc>
 800a188:	2322      	movs	r3, #34	; 0x22
 800a18a:	f8ce 3000 	str.w	r3, [lr]
 800a18e:	f04f 30ff 	mov.w	r0, #4294967295
 800a192:	b932      	cbnz	r2, 800a1a2 <_strtoul_l.constprop.0+0xc6>
 800a194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a198:	b106      	cbz	r6, 800a19c <_strtoul_l.constprop.0+0xc0>
 800a19a:	4240      	negs	r0, r0
 800a19c:	2a00      	cmp	r2, #0
 800a19e:	d0f9      	beq.n	800a194 <_strtoul_l.constprop.0+0xb8>
 800a1a0:	b107      	cbz	r7, 800a1a4 <_strtoul_l.constprop.0+0xc8>
 800a1a2:	1e69      	subs	r1, r5, #1
 800a1a4:	6011      	str	r1, [r2, #0]
 800a1a6:	e7f5      	b.n	800a194 <_strtoul_l.constprop.0+0xb8>
 800a1a8:	2430      	movs	r4, #48	; 0x30
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d1b5      	bne.n	800a11a <_strtoul_l.constprop.0+0x3e>
 800a1ae:	2308      	movs	r3, #8
 800a1b0:	e7b3      	b.n	800a11a <_strtoul_l.constprop.0+0x3e>
 800a1b2:	2c30      	cmp	r4, #48	; 0x30
 800a1b4:	d0a9      	beq.n	800a10a <_strtoul_l.constprop.0+0x2e>
 800a1b6:	230a      	movs	r3, #10
 800a1b8:	e7af      	b.n	800a11a <_strtoul_l.constprop.0+0x3e>
 800a1ba:	bf00      	nop
 800a1bc:	0800b02d 	.word	0x0800b02d

0800a1c0 <_strtoul_r>:
 800a1c0:	f7ff bf8c 	b.w	800a0dc <_strtoul_l.constprop.0>

0800a1c4 <__submore>:
 800a1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c8:	460c      	mov	r4, r1
 800a1ca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a1cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1d0:	4299      	cmp	r1, r3
 800a1d2:	d11d      	bne.n	800a210 <__submore+0x4c>
 800a1d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a1d8:	f7ff f9ae 	bl	8009538 <_malloc_r>
 800a1dc:	b918      	cbnz	r0, 800a1e6 <__submore+0x22>
 800a1de:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1ea:	63a3      	str	r3, [r4, #56]	; 0x38
 800a1ec:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a1f0:	6360      	str	r0, [r4, #52]	; 0x34
 800a1f2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a1f6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a1fa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a1fe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a202:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a206:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a20a:	6020      	str	r0, [r4, #0]
 800a20c:	2000      	movs	r0, #0
 800a20e:	e7e8      	b.n	800a1e2 <__submore+0x1e>
 800a210:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a212:	0077      	lsls	r7, r6, #1
 800a214:	463a      	mov	r2, r7
 800a216:	f000 fa31 	bl	800a67c <_realloc_r>
 800a21a:	4605      	mov	r5, r0
 800a21c:	2800      	cmp	r0, #0
 800a21e:	d0de      	beq.n	800a1de <__submore+0x1a>
 800a220:	eb00 0806 	add.w	r8, r0, r6
 800a224:	4601      	mov	r1, r0
 800a226:	4632      	mov	r2, r6
 800a228:	4640      	mov	r0, r8
 800a22a:	f7fe fd71 	bl	8008d10 <memcpy>
 800a22e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a232:	f8c4 8000 	str.w	r8, [r4]
 800a236:	e7e9      	b.n	800a20c <__submore+0x48>

0800a238 <__assert_func>:
 800a238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a23a:	4614      	mov	r4, r2
 800a23c:	461a      	mov	r2, r3
 800a23e:	4b09      	ldr	r3, [pc, #36]	; (800a264 <__assert_func+0x2c>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4605      	mov	r5, r0
 800a244:	68d8      	ldr	r0, [r3, #12]
 800a246:	b14c      	cbz	r4, 800a25c <__assert_func+0x24>
 800a248:	4b07      	ldr	r3, [pc, #28]	; (800a268 <__assert_func+0x30>)
 800a24a:	9100      	str	r1, [sp, #0]
 800a24c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a250:	4906      	ldr	r1, [pc, #24]	; (800a26c <__assert_func+0x34>)
 800a252:	462b      	mov	r3, r5
 800a254:	f000 f9a6 	bl	800a5a4 <fiprintf>
 800a258:	f000 fc66 	bl	800ab28 <abort>
 800a25c:	4b04      	ldr	r3, [pc, #16]	; (800a270 <__assert_func+0x38>)
 800a25e:	461c      	mov	r4, r3
 800a260:	e7f3      	b.n	800a24a <__assert_func+0x12>
 800a262:	bf00      	nop
 800a264:	20000014 	.word	0x20000014
 800a268:	0800aff0 	.word	0x0800aff0
 800a26c:	0800affd 	.word	0x0800affd
 800a270:	0800b02b 	.word	0x0800b02b

0800a274 <__sflush_r>:
 800a274:	898a      	ldrh	r2, [r1, #12]
 800a276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a27a:	4605      	mov	r5, r0
 800a27c:	0710      	lsls	r0, r2, #28
 800a27e:	460c      	mov	r4, r1
 800a280:	d458      	bmi.n	800a334 <__sflush_r+0xc0>
 800a282:	684b      	ldr	r3, [r1, #4]
 800a284:	2b00      	cmp	r3, #0
 800a286:	dc05      	bgt.n	800a294 <__sflush_r+0x20>
 800a288:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	dc02      	bgt.n	800a294 <__sflush_r+0x20>
 800a28e:	2000      	movs	r0, #0
 800a290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a294:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a296:	2e00      	cmp	r6, #0
 800a298:	d0f9      	beq.n	800a28e <__sflush_r+0x1a>
 800a29a:	2300      	movs	r3, #0
 800a29c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2a0:	682f      	ldr	r7, [r5, #0]
 800a2a2:	602b      	str	r3, [r5, #0]
 800a2a4:	d032      	beq.n	800a30c <__sflush_r+0x98>
 800a2a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2a8:	89a3      	ldrh	r3, [r4, #12]
 800a2aa:	075a      	lsls	r2, r3, #29
 800a2ac:	d505      	bpl.n	800a2ba <__sflush_r+0x46>
 800a2ae:	6863      	ldr	r3, [r4, #4]
 800a2b0:	1ac0      	subs	r0, r0, r3
 800a2b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2b4:	b10b      	cbz	r3, 800a2ba <__sflush_r+0x46>
 800a2b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2b8:	1ac0      	subs	r0, r0, r3
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	4602      	mov	r2, r0
 800a2be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2c0:	6a21      	ldr	r1, [r4, #32]
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	47b0      	blx	r6
 800a2c6:	1c43      	adds	r3, r0, #1
 800a2c8:	89a3      	ldrh	r3, [r4, #12]
 800a2ca:	d106      	bne.n	800a2da <__sflush_r+0x66>
 800a2cc:	6829      	ldr	r1, [r5, #0]
 800a2ce:	291d      	cmp	r1, #29
 800a2d0:	d82c      	bhi.n	800a32c <__sflush_r+0xb8>
 800a2d2:	4a2a      	ldr	r2, [pc, #168]	; (800a37c <__sflush_r+0x108>)
 800a2d4:	40ca      	lsrs	r2, r1
 800a2d6:	07d6      	lsls	r6, r2, #31
 800a2d8:	d528      	bpl.n	800a32c <__sflush_r+0xb8>
 800a2da:	2200      	movs	r2, #0
 800a2dc:	6062      	str	r2, [r4, #4]
 800a2de:	04d9      	lsls	r1, r3, #19
 800a2e0:	6922      	ldr	r2, [r4, #16]
 800a2e2:	6022      	str	r2, [r4, #0]
 800a2e4:	d504      	bpl.n	800a2f0 <__sflush_r+0x7c>
 800a2e6:	1c42      	adds	r2, r0, #1
 800a2e8:	d101      	bne.n	800a2ee <__sflush_r+0x7a>
 800a2ea:	682b      	ldr	r3, [r5, #0]
 800a2ec:	b903      	cbnz	r3, 800a2f0 <__sflush_r+0x7c>
 800a2ee:	6560      	str	r0, [r4, #84]	; 0x54
 800a2f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2f2:	602f      	str	r7, [r5, #0]
 800a2f4:	2900      	cmp	r1, #0
 800a2f6:	d0ca      	beq.n	800a28e <__sflush_r+0x1a>
 800a2f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2fc:	4299      	cmp	r1, r3
 800a2fe:	d002      	beq.n	800a306 <__sflush_r+0x92>
 800a300:	4628      	mov	r0, r5
 800a302:	f7ff f8ad 	bl	8009460 <_free_r>
 800a306:	2000      	movs	r0, #0
 800a308:	6360      	str	r0, [r4, #52]	; 0x34
 800a30a:	e7c1      	b.n	800a290 <__sflush_r+0x1c>
 800a30c:	6a21      	ldr	r1, [r4, #32]
 800a30e:	2301      	movs	r3, #1
 800a310:	4628      	mov	r0, r5
 800a312:	47b0      	blx	r6
 800a314:	1c41      	adds	r1, r0, #1
 800a316:	d1c7      	bne.n	800a2a8 <__sflush_r+0x34>
 800a318:	682b      	ldr	r3, [r5, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d0c4      	beq.n	800a2a8 <__sflush_r+0x34>
 800a31e:	2b1d      	cmp	r3, #29
 800a320:	d001      	beq.n	800a326 <__sflush_r+0xb2>
 800a322:	2b16      	cmp	r3, #22
 800a324:	d101      	bne.n	800a32a <__sflush_r+0xb6>
 800a326:	602f      	str	r7, [r5, #0]
 800a328:	e7b1      	b.n	800a28e <__sflush_r+0x1a>
 800a32a:	89a3      	ldrh	r3, [r4, #12]
 800a32c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a330:	81a3      	strh	r3, [r4, #12]
 800a332:	e7ad      	b.n	800a290 <__sflush_r+0x1c>
 800a334:	690f      	ldr	r7, [r1, #16]
 800a336:	2f00      	cmp	r7, #0
 800a338:	d0a9      	beq.n	800a28e <__sflush_r+0x1a>
 800a33a:	0793      	lsls	r3, r2, #30
 800a33c:	680e      	ldr	r6, [r1, #0]
 800a33e:	bf08      	it	eq
 800a340:	694b      	ldreq	r3, [r1, #20]
 800a342:	600f      	str	r7, [r1, #0]
 800a344:	bf18      	it	ne
 800a346:	2300      	movne	r3, #0
 800a348:	eba6 0807 	sub.w	r8, r6, r7
 800a34c:	608b      	str	r3, [r1, #8]
 800a34e:	f1b8 0f00 	cmp.w	r8, #0
 800a352:	dd9c      	ble.n	800a28e <__sflush_r+0x1a>
 800a354:	6a21      	ldr	r1, [r4, #32]
 800a356:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a358:	4643      	mov	r3, r8
 800a35a:	463a      	mov	r2, r7
 800a35c:	4628      	mov	r0, r5
 800a35e:	47b0      	blx	r6
 800a360:	2800      	cmp	r0, #0
 800a362:	dc06      	bgt.n	800a372 <__sflush_r+0xfe>
 800a364:	89a3      	ldrh	r3, [r4, #12]
 800a366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a36a:	81a3      	strh	r3, [r4, #12]
 800a36c:	f04f 30ff 	mov.w	r0, #4294967295
 800a370:	e78e      	b.n	800a290 <__sflush_r+0x1c>
 800a372:	4407      	add	r7, r0
 800a374:	eba8 0800 	sub.w	r8, r8, r0
 800a378:	e7e9      	b.n	800a34e <__sflush_r+0xda>
 800a37a:	bf00      	nop
 800a37c:	20400001 	.word	0x20400001

0800a380 <_fflush_r>:
 800a380:	b538      	push	{r3, r4, r5, lr}
 800a382:	690b      	ldr	r3, [r1, #16]
 800a384:	4605      	mov	r5, r0
 800a386:	460c      	mov	r4, r1
 800a388:	b913      	cbnz	r3, 800a390 <_fflush_r+0x10>
 800a38a:	2500      	movs	r5, #0
 800a38c:	4628      	mov	r0, r5
 800a38e:	bd38      	pop	{r3, r4, r5, pc}
 800a390:	b118      	cbz	r0, 800a39a <_fflush_r+0x1a>
 800a392:	6983      	ldr	r3, [r0, #24]
 800a394:	b90b      	cbnz	r3, 800a39a <_fflush_r+0x1a>
 800a396:	f000 f887 	bl	800a4a8 <__sinit>
 800a39a:	4b14      	ldr	r3, [pc, #80]	; (800a3ec <_fflush_r+0x6c>)
 800a39c:	429c      	cmp	r4, r3
 800a39e:	d11b      	bne.n	800a3d8 <_fflush_r+0x58>
 800a3a0:	686c      	ldr	r4, [r5, #4]
 800a3a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d0ef      	beq.n	800a38a <_fflush_r+0xa>
 800a3aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3ac:	07d0      	lsls	r0, r2, #31
 800a3ae:	d404      	bmi.n	800a3ba <_fflush_r+0x3a>
 800a3b0:	0599      	lsls	r1, r3, #22
 800a3b2:	d402      	bmi.n	800a3ba <_fflush_r+0x3a>
 800a3b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3b6:	f000 f927 	bl	800a608 <__retarget_lock_acquire_recursive>
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	4621      	mov	r1, r4
 800a3be:	f7ff ff59 	bl	800a274 <__sflush_r>
 800a3c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3c4:	07da      	lsls	r2, r3, #31
 800a3c6:	4605      	mov	r5, r0
 800a3c8:	d4e0      	bmi.n	800a38c <_fflush_r+0xc>
 800a3ca:	89a3      	ldrh	r3, [r4, #12]
 800a3cc:	059b      	lsls	r3, r3, #22
 800a3ce:	d4dd      	bmi.n	800a38c <_fflush_r+0xc>
 800a3d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3d2:	f000 f91a 	bl	800a60a <__retarget_lock_release_recursive>
 800a3d6:	e7d9      	b.n	800a38c <_fflush_r+0xc>
 800a3d8:	4b05      	ldr	r3, [pc, #20]	; (800a3f0 <_fflush_r+0x70>)
 800a3da:	429c      	cmp	r4, r3
 800a3dc:	d101      	bne.n	800a3e2 <_fflush_r+0x62>
 800a3de:	68ac      	ldr	r4, [r5, #8]
 800a3e0:	e7df      	b.n	800a3a2 <_fflush_r+0x22>
 800a3e2:	4b04      	ldr	r3, [pc, #16]	; (800a3f4 <_fflush_r+0x74>)
 800a3e4:	429c      	cmp	r4, r3
 800a3e6:	bf08      	it	eq
 800a3e8:	68ec      	ldreq	r4, [r5, #12]
 800a3ea:	e7da      	b.n	800a3a2 <_fflush_r+0x22>
 800a3ec:	0800b150 	.word	0x0800b150
 800a3f0:	0800b170 	.word	0x0800b170
 800a3f4:	0800b130 	.word	0x0800b130

0800a3f8 <std>:
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	b510      	push	{r4, lr}
 800a3fc:	4604      	mov	r4, r0
 800a3fe:	e9c0 3300 	strd	r3, r3, [r0]
 800a402:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a406:	6083      	str	r3, [r0, #8]
 800a408:	8181      	strh	r1, [r0, #12]
 800a40a:	6643      	str	r3, [r0, #100]	; 0x64
 800a40c:	81c2      	strh	r2, [r0, #14]
 800a40e:	6183      	str	r3, [r0, #24]
 800a410:	4619      	mov	r1, r3
 800a412:	2208      	movs	r2, #8
 800a414:	305c      	adds	r0, #92	; 0x5c
 800a416:	f7fd f8a9 	bl	800756c <memset>
 800a41a:	4b05      	ldr	r3, [pc, #20]	; (800a430 <std+0x38>)
 800a41c:	6263      	str	r3, [r4, #36]	; 0x24
 800a41e:	4b05      	ldr	r3, [pc, #20]	; (800a434 <std+0x3c>)
 800a420:	62a3      	str	r3, [r4, #40]	; 0x28
 800a422:	4b05      	ldr	r3, [pc, #20]	; (800a438 <std+0x40>)
 800a424:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a426:	4b05      	ldr	r3, [pc, #20]	; (800a43c <std+0x44>)
 800a428:	6224      	str	r4, [r4, #32]
 800a42a:	6323      	str	r3, [r4, #48]	; 0x30
 800a42c:	bd10      	pop	{r4, pc}
 800a42e:	bf00      	nop
 800a430:	08007f11 	.word	0x08007f11
 800a434:	08007f37 	.word	0x08007f37
 800a438:	08007f6f 	.word	0x08007f6f
 800a43c:	08007f93 	.word	0x08007f93

0800a440 <_cleanup_r>:
 800a440:	4901      	ldr	r1, [pc, #4]	; (800a448 <_cleanup_r+0x8>)
 800a442:	f000 b8c1 	b.w	800a5c8 <_fwalk_reent>
 800a446:	bf00      	nop
 800a448:	0800a381 	.word	0x0800a381

0800a44c <__sfmoreglue>:
 800a44c:	b570      	push	{r4, r5, r6, lr}
 800a44e:	2268      	movs	r2, #104	; 0x68
 800a450:	1e4d      	subs	r5, r1, #1
 800a452:	4355      	muls	r5, r2
 800a454:	460e      	mov	r6, r1
 800a456:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a45a:	f7ff f86d 	bl	8009538 <_malloc_r>
 800a45e:	4604      	mov	r4, r0
 800a460:	b140      	cbz	r0, 800a474 <__sfmoreglue+0x28>
 800a462:	2100      	movs	r1, #0
 800a464:	e9c0 1600 	strd	r1, r6, [r0]
 800a468:	300c      	adds	r0, #12
 800a46a:	60a0      	str	r0, [r4, #8]
 800a46c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a470:	f7fd f87c 	bl	800756c <memset>
 800a474:	4620      	mov	r0, r4
 800a476:	bd70      	pop	{r4, r5, r6, pc}

0800a478 <__sfp_lock_acquire>:
 800a478:	4801      	ldr	r0, [pc, #4]	; (800a480 <__sfp_lock_acquire+0x8>)
 800a47a:	f000 b8c5 	b.w	800a608 <__retarget_lock_acquire_recursive>
 800a47e:	bf00      	nop
 800a480:	200008e1 	.word	0x200008e1

0800a484 <__sfp_lock_release>:
 800a484:	4801      	ldr	r0, [pc, #4]	; (800a48c <__sfp_lock_release+0x8>)
 800a486:	f000 b8c0 	b.w	800a60a <__retarget_lock_release_recursive>
 800a48a:	bf00      	nop
 800a48c:	200008e1 	.word	0x200008e1

0800a490 <__sinit_lock_acquire>:
 800a490:	4801      	ldr	r0, [pc, #4]	; (800a498 <__sinit_lock_acquire+0x8>)
 800a492:	f000 b8b9 	b.w	800a608 <__retarget_lock_acquire_recursive>
 800a496:	bf00      	nop
 800a498:	200008e2 	.word	0x200008e2

0800a49c <__sinit_lock_release>:
 800a49c:	4801      	ldr	r0, [pc, #4]	; (800a4a4 <__sinit_lock_release+0x8>)
 800a49e:	f000 b8b4 	b.w	800a60a <__retarget_lock_release_recursive>
 800a4a2:	bf00      	nop
 800a4a4:	200008e2 	.word	0x200008e2

0800a4a8 <__sinit>:
 800a4a8:	b510      	push	{r4, lr}
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	f7ff fff0 	bl	800a490 <__sinit_lock_acquire>
 800a4b0:	69a3      	ldr	r3, [r4, #24]
 800a4b2:	b11b      	cbz	r3, 800a4bc <__sinit+0x14>
 800a4b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4b8:	f7ff bff0 	b.w	800a49c <__sinit_lock_release>
 800a4bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a4c0:	6523      	str	r3, [r4, #80]	; 0x50
 800a4c2:	4b13      	ldr	r3, [pc, #76]	; (800a510 <__sinit+0x68>)
 800a4c4:	4a13      	ldr	r2, [pc, #76]	; (800a514 <__sinit+0x6c>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a4ca:	42a3      	cmp	r3, r4
 800a4cc:	bf04      	itt	eq
 800a4ce:	2301      	moveq	r3, #1
 800a4d0:	61a3      	streq	r3, [r4, #24]
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	f000 f820 	bl	800a518 <__sfp>
 800a4d8:	6060      	str	r0, [r4, #4]
 800a4da:	4620      	mov	r0, r4
 800a4dc:	f000 f81c 	bl	800a518 <__sfp>
 800a4e0:	60a0      	str	r0, [r4, #8]
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f000 f818 	bl	800a518 <__sfp>
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	60e0      	str	r0, [r4, #12]
 800a4ec:	2104      	movs	r1, #4
 800a4ee:	6860      	ldr	r0, [r4, #4]
 800a4f0:	f7ff ff82 	bl	800a3f8 <std>
 800a4f4:	68a0      	ldr	r0, [r4, #8]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	2109      	movs	r1, #9
 800a4fa:	f7ff ff7d 	bl	800a3f8 <std>
 800a4fe:	68e0      	ldr	r0, [r4, #12]
 800a500:	2202      	movs	r2, #2
 800a502:	2112      	movs	r1, #18
 800a504:	f7ff ff78 	bl	800a3f8 <std>
 800a508:	2301      	movs	r3, #1
 800a50a:	61a3      	str	r3, [r4, #24]
 800a50c:	e7d2      	b.n	800a4b4 <__sinit+0xc>
 800a50e:	bf00      	nop
 800a510:	0800ada0 	.word	0x0800ada0
 800a514:	0800a441 	.word	0x0800a441

0800a518 <__sfp>:
 800a518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a51a:	4607      	mov	r7, r0
 800a51c:	f7ff ffac 	bl	800a478 <__sfp_lock_acquire>
 800a520:	4b1e      	ldr	r3, [pc, #120]	; (800a59c <__sfp+0x84>)
 800a522:	681e      	ldr	r6, [r3, #0]
 800a524:	69b3      	ldr	r3, [r6, #24]
 800a526:	b913      	cbnz	r3, 800a52e <__sfp+0x16>
 800a528:	4630      	mov	r0, r6
 800a52a:	f7ff ffbd 	bl	800a4a8 <__sinit>
 800a52e:	3648      	adds	r6, #72	; 0x48
 800a530:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a534:	3b01      	subs	r3, #1
 800a536:	d503      	bpl.n	800a540 <__sfp+0x28>
 800a538:	6833      	ldr	r3, [r6, #0]
 800a53a:	b30b      	cbz	r3, 800a580 <__sfp+0x68>
 800a53c:	6836      	ldr	r6, [r6, #0]
 800a53e:	e7f7      	b.n	800a530 <__sfp+0x18>
 800a540:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a544:	b9d5      	cbnz	r5, 800a57c <__sfp+0x64>
 800a546:	4b16      	ldr	r3, [pc, #88]	; (800a5a0 <__sfp+0x88>)
 800a548:	60e3      	str	r3, [r4, #12]
 800a54a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a54e:	6665      	str	r5, [r4, #100]	; 0x64
 800a550:	f000 f859 	bl	800a606 <__retarget_lock_init_recursive>
 800a554:	f7ff ff96 	bl	800a484 <__sfp_lock_release>
 800a558:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a55c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a560:	6025      	str	r5, [r4, #0]
 800a562:	61a5      	str	r5, [r4, #24]
 800a564:	2208      	movs	r2, #8
 800a566:	4629      	mov	r1, r5
 800a568:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a56c:	f7fc fffe 	bl	800756c <memset>
 800a570:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a574:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a578:	4620      	mov	r0, r4
 800a57a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a57c:	3468      	adds	r4, #104	; 0x68
 800a57e:	e7d9      	b.n	800a534 <__sfp+0x1c>
 800a580:	2104      	movs	r1, #4
 800a582:	4638      	mov	r0, r7
 800a584:	f7ff ff62 	bl	800a44c <__sfmoreglue>
 800a588:	4604      	mov	r4, r0
 800a58a:	6030      	str	r0, [r6, #0]
 800a58c:	2800      	cmp	r0, #0
 800a58e:	d1d5      	bne.n	800a53c <__sfp+0x24>
 800a590:	f7ff ff78 	bl	800a484 <__sfp_lock_release>
 800a594:	230c      	movs	r3, #12
 800a596:	603b      	str	r3, [r7, #0]
 800a598:	e7ee      	b.n	800a578 <__sfp+0x60>
 800a59a:	bf00      	nop
 800a59c:	0800ada0 	.word	0x0800ada0
 800a5a0:	ffff0001 	.word	0xffff0001

0800a5a4 <fiprintf>:
 800a5a4:	b40e      	push	{r1, r2, r3}
 800a5a6:	b503      	push	{r0, r1, lr}
 800a5a8:	4601      	mov	r1, r0
 800a5aa:	ab03      	add	r3, sp, #12
 800a5ac:	4805      	ldr	r0, [pc, #20]	; (800a5c4 <fiprintf+0x20>)
 800a5ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5b2:	6800      	ldr	r0, [r0, #0]
 800a5b4:	9301      	str	r3, [sp, #4]
 800a5b6:	f000 f8b9 	bl	800a72c <_vfiprintf_r>
 800a5ba:	b002      	add	sp, #8
 800a5bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5c0:	b003      	add	sp, #12
 800a5c2:	4770      	bx	lr
 800a5c4:	20000014 	.word	0x20000014

0800a5c8 <_fwalk_reent>:
 800a5c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5cc:	4606      	mov	r6, r0
 800a5ce:	4688      	mov	r8, r1
 800a5d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a5d4:	2700      	movs	r7, #0
 800a5d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5da:	f1b9 0901 	subs.w	r9, r9, #1
 800a5de:	d505      	bpl.n	800a5ec <_fwalk_reent+0x24>
 800a5e0:	6824      	ldr	r4, [r4, #0]
 800a5e2:	2c00      	cmp	r4, #0
 800a5e4:	d1f7      	bne.n	800a5d6 <_fwalk_reent+0xe>
 800a5e6:	4638      	mov	r0, r7
 800a5e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ec:	89ab      	ldrh	r3, [r5, #12]
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d907      	bls.n	800a602 <_fwalk_reent+0x3a>
 800a5f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	d003      	beq.n	800a602 <_fwalk_reent+0x3a>
 800a5fa:	4629      	mov	r1, r5
 800a5fc:	4630      	mov	r0, r6
 800a5fe:	47c0      	blx	r8
 800a600:	4307      	orrs	r7, r0
 800a602:	3568      	adds	r5, #104	; 0x68
 800a604:	e7e9      	b.n	800a5da <_fwalk_reent+0x12>

0800a606 <__retarget_lock_init_recursive>:
 800a606:	4770      	bx	lr

0800a608 <__retarget_lock_acquire_recursive>:
 800a608:	4770      	bx	lr

0800a60a <__retarget_lock_release_recursive>:
 800a60a:	4770      	bx	lr

0800a60c <__ascii_mbtowc>:
 800a60c:	b082      	sub	sp, #8
 800a60e:	b901      	cbnz	r1, 800a612 <__ascii_mbtowc+0x6>
 800a610:	a901      	add	r1, sp, #4
 800a612:	b142      	cbz	r2, 800a626 <__ascii_mbtowc+0x1a>
 800a614:	b14b      	cbz	r3, 800a62a <__ascii_mbtowc+0x1e>
 800a616:	7813      	ldrb	r3, [r2, #0]
 800a618:	600b      	str	r3, [r1, #0]
 800a61a:	7812      	ldrb	r2, [r2, #0]
 800a61c:	1e10      	subs	r0, r2, #0
 800a61e:	bf18      	it	ne
 800a620:	2001      	movne	r0, #1
 800a622:	b002      	add	sp, #8
 800a624:	4770      	bx	lr
 800a626:	4610      	mov	r0, r2
 800a628:	e7fb      	b.n	800a622 <__ascii_mbtowc+0x16>
 800a62a:	f06f 0001 	mvn.w	r0, #1
 800a62e:	e7f8      	b.n	800a622 <__ascii_mbtowc+0x16>

0800a630 <memmove>:
 800a630:	4288      	cmp	r0, r1
 800a632:	b510      	push	{r4, lr}
 800a634:	eb01 0402 	add.w	r4, r1, r2
 800a638:	d902      	bls.n	800a640 <memmove+0x10>
 800a63a:	4284      	cmp	r4, r0
 800a63c:	4623      	mov	r3, r4
 800a63e:	d807      	bhi.n	800a650 <memmove+0x20>
 800a640:	1e43      	subs	r3, r0, #1
 800a642:	42a1      	cmp	r1, r4
 800a644:	d008      	beq.n	800a658 <memmove+0x28>
 800a646:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a64a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a64e:	e7f8      	b.n	800a642 <memmove+0x12>
 800a650:	4402      	add	r2, r0
 800a652:	4601      	mov	r1, r0
 800a654:	428a      	cmp	r2, r1
 800a656:	d100      	bne.n	800a65a <memmove+0x2a>
 800a658:	bd10      	pop	{r4, pc}
 800a65a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a65e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a662:	e7f7      	b.n	800a654 <memmove+0x24>

0800a664 <__malloc_lock>:
 800a664:	4801      	ldr	r0, [pc, #4]	; (800a66c <__malloc_lock+0x8>)
 800a666:	f7ff bfcf 	b.w	800a608 <__retarget_lock_acquire_recursive>
 800a66a:	bf00      	nop
 800a66c:	200008e0 	.word	0x200008e0

0800a670 <__malloc_unlock>:
 800a670:	4801      	ldr	r0, [pc, #4]	; (800a678 <__malloc_unlock+0x8>)
 800a672:	f7ff bfca 	b.w	800a60a <__retarget_lock_release_recursive>
 800a676:	bf00      	nop
 800a678:	200008e0 	.word	0x200008e0

0800a67c <_realloc_r>:
 800a67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a680:	4680      	mov	r8, r0
 800a682:	4614      	mov	r4, r2
 800a684:	460e      	mov	r6, r1
 800a686:	b921      	cbnz	r1, 800a692 <_realloc_r+0x16>
 800a688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a68c:	4611      	mov	r1, r2
 800a68e:	f7fe bf53 	b.w	8009538 <_malloc_r>
 800a692:	b92a      	cbnz	r2, 800a6a0 <_realloc_r+0x24>
 800a694:	f7fe fee4 	bl	8009460 <_free_r>
 800a698:	4625      	mov	r5, r4
 800a69a:	4628      	mov	r0, r5
 800a69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6a0:	f000 faae 	bl	800ac00 <_malloc_usable_size_r>
 800a6a4:	4284      	cmp	r4, r0
 800a6a6:	4607      	mov	r7, r0
 800a6a8:	d802      	bhi.n	800a6b0 <_realloc_r+0x34>
 800a6aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a6ae:	d812      	bhi.n	800a6d6 <_realloc_r+0x5a>
 800a6b0:	4621      	mov	r1, r4
 800a6b2:	4640      	mov	r0, r8
 800a6b4:	f7fe ff40 	bl	8009538 <_malloc_r>
 800a6b8:	4605      	mov	r5, r0
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	d0ed      	beq.n	800a69a <_realloc_r+0x1e>
 800a6be:	42bc      	cmp	r4, r7
 800a6c0:	4622      	mov	r2, r4
 800a6c2:	4631      	mov	r1, r6
 800a6c4:	bf28      	it	cs
 800a6c6:	463a      	movcs	r2, r7
 800a6c8:	f7fe fb22 	bl	8008d10 <memcpy>
 800a6cc:	4631      	mov	r1, r6
 800a6ce:	4640      	mov	r0, r8
 800a6d0:	f7fe fec6 	bl	8009460 <_free_r>
 800a6d4:	e7e1      	b.n	800a69a <_realloc_r+0x1e>
 800a6d6:	4635      	mov	r5, r6
 800a6d8:	e7df      	b.n	800a69a <_realloc_r+0x1e>

0800a6da <__sfputc_r>:
 800a6da:	6893      	ldr	r3, [r2, #8]
 800a6dc:	3b01      	subs	r3, #1
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	b410      	push	{r4}
 800a6e2:	6093      	str	r3, [r2, #8]
 800a6e4:	da08      	bge.n	800a6f8 <__sfputc_r+0x1e>
 800a6e6:	6994      	ldr	r4, [r2, #24]
 800a6e8:	42a3      	cmp	r3, r4
 800a6ea:	db01      	blt.n	800a6f0 <__sfputc_r+0x16>
 800a6ec:	290a      	cmp	r1, #10
 800a6ee:	d103      	bne.n	800a6f8 <__sfputc_r+0x1e>
 800a6f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6f4:	f000 b94a 	b.w	800a98c <__swbuf_r>
 800a6f8:	6813      	ldr	r3, [r2, #0]
 800a6fa:	1c58      	adds	r0, r3, #1
 800a6fc:	6010      	str	r0, [r2, #0]
 800a6fe:	7019      	strb	r1, [r3, #0]
 800a700:	4608      	mov	r0, r1
 800a702:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <__sfputs_r>:
 800a708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a70a:	4606      	mov	r6, r0
 800a70c:	460f      	mov	r7, r1
 800a70e:	4614      	mov	r4, r2
 800a710:	18d5      	adds	r5, r2, r3
 800a712:	42ac      	cmp	r4, r5
 800a714:	d101      	bne.n	800a71a <__sfputs_r+0x12>
 800a716:	2000      	movs	r0, #0
 800a718:	e007      	b.n	800a72a <__sfputs_r+0x22>
 800a71a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a71e:	463a      	mov	r2, r7
 800a720:	4630      	mov	r0, r6
 800a722:	f7ff ffda 	bl	800a6da <__sfputc_r>
 800a726:	1c43      	adds	r3, r0, #1
 800a728:	d1f3      	bne.n	800a712 <__sfputs_r+0xa>
 800a72a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a72c <_vfiprintf_r>:
 800a72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a730:	460d      	mov	r5, r1
 800a732:	b09d      	sub	sp, #116	; 0x74
 800a734:	4614      	mov	r4, r2
 800a736:	4698      	mov	r8, r3
 800a738:	4606      	mov	r6, r0
 800a73a:	b118      	cbz	r0, 800a744 <_vfiprintf_r+0x18>
 800a73c:	6983      	ldr	r3, [r0, #24]
 800a73e:	b90b      	cbnz	r3, 800a744 <_vfiprintf_r+0x18>
 800a740:	f7ff feb2 	bl	800a4a8 <__sinit>
 800a744:	4b89      	ldr	r3, [pc, #548]	; (800a96c <_vfiprintf_r+0x240>)
 800a746:	429d      	cmp	r5, r3
 800a748:	d11b      	bne.n	800a782 <_vfiprintf_r+0x56>
 800a74a:	6875      	ldr	r5, [r6, #4]
 800a74c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a74e:	07d9      	lsls	r1, r3, #31
 800a750:	d405      	bmi.n	800a75e <_vfiprintf_r+0x32>
 800a752:	89ab      	ldrh	r3, [r5, #12]
 800a754:	059a      	lsls	r2, r3, #22
 800a756:	d402      	bmi.n	800a75e <_vfiprintf_r+0x32>
 800a758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a75a:	f7ff ff55 	bl	800a608 <__retarget_lock_acquire_recursive>
 800a75e:	89ab      	ldrh	r3, [r5, #12]
 800a760:	071b      	lsls	r3, r3, #28
 800a762:	d501      	bpl.n	800a768 <_vfiprintf_r+0x3c>
 800a764:	692b      	ldr	r3, [r5, #16]
 800a766:	b9eb      	cbnz	r3, 800a7a4 <_vfiprintf_r+0x78>
 800a768:	4629      	mov	r1, r5
 800a76a:	4630      	mov	r0, r6
 800a76c:	f000 f96e 	bl	800aa4c <__swsetup_r>
 800a770:	b1c0      	cbz	r0, 800a7a4 <_vfiprintf_r+0x78>
 800a772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a774:	07dc      	lsls	r4, r3, #31
 800a776:	d50e      	bpl.n	800a796 <_vfiprintf_r+0x6a>
 800a778:	f04f 30ff 	mov.w	r0, #4294967295
 800a77c:	b01d      	add	sp, #116	; 0x74
 800a77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a782:	4b7b      	ldr	r3, [pc, #492]	; (800a970 <_vfiprintf_r+0x244>)
 800a784:	429d      	cmp	r5, r3
 800a786:	d101      	bne.n	800a78c <_vfiprintf_r+0x60>
 800a788:	68b5      	ldr	r5, [r6, #8]
 800a78a:	e7df      	b.n	800a74c <_vfiprintf_r+0x20>
 800a78c:	4b79      	ldr	r3, [pc, #484]	; (800a974 <_vfiprintf_r+0x248>)
 800a78e:	429d      	cmp	r5, r3
 800a790:	bf08      	it	eq
 800a792:	68f5      	ldreq	r5, [r6, #12]
 800a794:	e7da      	b.n	800a74c <_vfiprintf_r+0x20>
 800a796:	89ab      	ldrh	r3, [r5, #12]
 800a798:	0598      	lsls	r0, r3, #22
 800a79a:	d4ed      	bmi.n	800a778 <_vfiprintf_r+0x4c>
 800a79c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a79e:	f7ff ff34 	bl	800a60a <__retarget_lock_release_recursive>
 800a7a2:	e7e9      	b.n	800a778 <_vfiprintf_r+0x4c>
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a8:	2320      	movs	r3, #32
 800a7aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7b2:	2330      	movs	r3, #48	; 0x30
 800a7b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a978 <_vfiprintf_r+0x24c>
 800a7b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7bc:	f04f 0901 	mov.w	r9, #1
 800a7c0:	4623      	mov	r3, r4
 800a7c2:	469a      	mov	sl, r3
 800a7c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7c8:	b10a      	cbz	r2, 800a7ce <_vfiprintf_r+0xa2>
 800a7ca:	2a25      	cmp	r2, #37	; 0x25
 800a7cc:	d1f9      	bne.n	800a7c2 <_vfiprintf_r+0x96>
 800a7ce:	ebba 0b04 	subs.w	fp, sl, r4
 800a7d2:	d00b      	beq.n	800a7ec <_vfiprintf_r+0xc0>
 800a7d4:	465b      	mov	r3, fp
 800a7d6:	4622      	mov	r2, r4
 800a7d8:	4629      	mov	r1, r5
 800a7da:	4630      	mov	r0, r6
 800a7dc:	f7ff ff94 	bl	800a708 <__sfputs_r>
 800a7e0:	3001      	adds	r0, #1
 800a7e2:	f000 80aa 	beq.w	800a93a <_vfiprintf_r+0x20e>
 800a7e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7e8:	445a      	add	r2, fp
 800a7ea:	9209      	str	r2, [sp, #36]	; 0x24
 800a7ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f000 80a2 	beq.w	800a93a <_vfiprintf_r+0x20e>
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a800:	f10a 0a01 	add.w	sl, sl, #1
 800a804:	9304      	str	r3, [sp, #16]
 800a806:	9307      	str	r3, [sp, #28]
 800a808:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a80c:	931a      	str	r3, [sp, #104]	; 0x68
 800a80e:	4654      	mov	r4, sl
 800a810:	2205      	movs	r2, #5
 800a812:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a816:	4858      	ldr	r0, [pc, #352]	; (800a978 <_vfiprintf_r+0x24c>)
 800a818:	f7f5 fd02 	bl	8000220 <memchr>
 800a81c:	9a04      	ldr	r2, [sp, #16]
 800a81e:	b9d8      	cbnz	r0, 800a858 <_vfiprintf_r+0x12c>
 800a820:	06d1      	lsls	r1, r2, #27
 800a822:	bf44      	itt	mi
 800a824:	2320      	movmi	r3, #32
 800a826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a82a:	0713      	lsls	r3, r2, #28
 800a82c:	bf44      	itt	mi
 800a82e:	232b      	movmi	r3, #43	; 0x2b
 800a830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a834:	f89a 3000 	ldrb.w	r3, [sl]
 800a838:	2b2a      	cmp	r3, #42	; 0x2a
 800a83a:	d015      	beq.n	800a868 <_vfiprintf_r+0x13c>
 800a83c:	9a07      	ldr	r2, [sp, #28]
 800a83e:	4654      	mov	r4, sl
 800a840:	2000      	movs	r0, #0
 800a842:	f04f 0c0a 	mov.w	ip, #10
 800a846:	4621      	mov	r1, r4
 800a848:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a84c:	3b30      	subs	r3, #48	; 0x30
 800a84e:	2b09      	cmp	r3, #9
 800a850:	d94e      	bls.n	800a8f0 <_vfiprintf_r+0x1c4>
 800a852:	b1b0      	cbz	r0, 800a882 <_vfiprintf_r+0x156>
 800a854:	9207      	str	r2, [sp, #28]
 800a856:	e014      	b.n	800a882 <_vfiprintf_r+0x156>
 800a858:	eba0 0308 	sub.w	r3, r0, r8
 800a85c:	fa09 f303 	lsl.w	r3, r9, r3
 800a860:	4313      	orrs	r3, r2
 800a862:	9304      	str	r3, [sp, #16]
 800a864:	46a2      	mov	sl, r4
 800a866:	e7d2      	b.n	800a80e <_vfiprintf_r+0xe2>
 800a868:	9b03      	ldr	r3, [sp, #12]
 800a86a:	1d19      	adds	r1, r3, #4
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	9103      	str	r1, [sp, #12]
 800a870:	2b00      	cmp	r3, #0
 800a872:	bfbb      	ittet	lt
 800a874:	425b      	neglt	r3, r3
 800a876:	f042 0202 	orrlt.w	r2, r2, #2
 800a87a:	9307      	strge	r3, [sp, #28]
 800a87c:	9307      	strlt	r3, [sp, #28]
 800a87e:	bfb8      	it	lt
 800a880:	9204      	strlt	r2, [sp, #16]
 800a882:	7823      	ldrb	r3, [r4, #0]
 800a884:	2b2e      	cmp	r3, #46	; 0x2e
 800a886:	d10c      	bne.n	800a8a2 <_vfiprintf_r+0x176>
 800a888:	7863      	ldrb	r3, [r4, #1]
 800a88a:	2b2a      	cmp	r3, #42	; 0x2a
 800a88c:	d135      	bne.n	800a8fa <_vfiprintf_r+0x1ce>
 800a88e:	9b03      	ldr	r3, [sp, #12]
 800a890:	1d1a      	adds	r2, r3, #4
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	9203      	str	r2, [sp, #12]
 800a896:	2b00      	cmp	r3, #0
 800a898:	bfb8      	it	lt
 800a89a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a89e:	3402      	adds	r4, #2
 800a8a0:	9305      	str	r3, [sp, #20]
 800a8a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a988 <_vfiprintf_r+0x25c>
 800a8a6:	7821      	ldrb	r1, [r4, #0]
 800a8a8:	2203      	movs	r2, #3
 800a8aa:	4650      	mov	r0, sl
 800a8ac:	f7f5 fcb8 	bl	8000220 <memchr>
 800a8b0:	b140      	cbz	r0, 800a8c4 <_vfiprintf_r+0x198>
 800a8b2:	2340      	movs	r3, #64	; 0x40
 800a8b4:	eba0 000a 	sub.w	r0, r0, sl
 800a8b8:	fa03 f000 	lsl.w	r0, r3, r0
 800a8bc:	9b04      	ldr	r3, [sp, #16]
 800a8be:	4303      	orrs	r3, r0
 800a8c0:	3401      	adds	r4, #1
 800a8c2:	9304      	str	r3, [sp, #16]
 800a8c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8c8:	482c      	ldr	r0, [pc, #176]	; (800a97c <_vfiprintf_r+0x250>)
 800a8ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8ce:	2206      	movs	r2, #6
 800a8d0:	f7f5 fca6 	bl	8000220 <memchr>
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	d03f      	beq.n	800a958 <_vfiprintf_r+0x22c>
 800a8d8:	4b29      	ldr	r3, [pc, #164]	; (800a980 <_vfiprintf_r+0x254>)
 800a8da:	bb1b      	cbnz	r3, 800a924 <_vfiprintf_r+0x1f8>
 800a8dc:	9b03      	ldr	r3, [sp, #12]
 800a8de:	3307      	adds	r3, #7
 800a8e0:	f023 0307 	bic.w	r3, r3, #7
 800a8e4:	3308      	adds	r3, #8
 800a8e6:	9303      	str	r3, [sp, #12]
 800a8e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ea:	443b      	add	r3, r7
 800a8ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a8ee:	e767      	b.n	800a7c0 <_vfiprintf_r+0x94>
 800a8f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8f4:	460c      	mov	r4, r1
 800a8f6:	2001      	movs	r0, #1
 800a8f8:	e7a5      	b.n	800a846 <_vfiprintf_r+0x11a>
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	3401      	adds	r4, #1
 800a8fe:	9305      	str	r3, [sp, #20]
 800a900:	4619      	mov	r1, r3
 800a902:	f04f 0c0a 	mov.w	ip, #10
 800a906:	4620      	mov	r0, r4
 800a908:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a90c:	3a30      	subs	r2, #48	; 0x30
 800a90e:	2a09      	cmp	r2, #9
 800a910:	d903      	bls.n	800a91a <_vfiprintf_r+0x1ee>
 800a912:	2b00      	cmp	r3, #0
 800a914:	d0c5      	beq.n	800a8a2 <_vfiprintf_r+0x176>
 800a916:	9105      	str	r1, [sp, #20]
 800a918:	e7c3      	b.n	800a8a2 <_vfiprintf_r+0x176>
 800a91a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a91e:	4604      	mov	r4, r0
 800a920:	2301      	movs	r3, #1
 800a922:	e7f0      	b.n	800a906 <_vfiprintf_r+0x1da>
 800a924:	ab03      	add	r3, sp, #12
 800a926:	9300      	str	r3, [sp, #0]
 800a928:	462a      	mov	r2, r5
 800a92a:	4b16      	ldr	r3, [pc, #88]	; (800a984 <_vfiprintf_r+0x258>)
 800a92c:	a904      	add	r1, sp, #16
 800a92e:	4630      	mov	r0, r6
 800a930:	f7fc fec4 	bl	80076bc <_printf_float>
 800a934:	4607      	mov	r7, r0
 800a936:	1c78      	adds	r0, r7, #1
 800a938:	d1d6      	bne.n	800a8e8 <_vfiprintf_r+0x1bc>
 800a93a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a93c:	07d9      	lsls	r1, r3, #31
 800a93e:	d405      	bmi.n	800a94c <_vfiprintf_r+0x220>
 800a940:	89ab      	ldrh	r3, [r5, #12]
 800a942:	059a      	lsls	r2, r3, #22
 800a944:	d402      	bmi.n	800a94c <_vfiprintf_r+0x220>
 800a946:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a948:	f7ff fe5f 	bl	800a60a <__retarget_lock_release_recursive>
 800a94c:	89ab      	ldrh	r3, [r5, #12]
 800a94e:	065b      	lsls	r3, r3, #25
 800a950:	f53f af12 	bmi.w	800a778 <_vfiprintf_r+0x4c>
 800a954:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a956:	e711      	b.n	800a77c <_vfiprintf_r+0x50>
 800a958:	ab03      	add	r3, sp, #12
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	462a      	mov	r2, r5
 800a95e:	4b09      	ldr	r3, [pc, #36]	; (800a984 <_vfiprintf_r+0x258>)
 800a960:	a904      	add	r1, sp, #16
 800a962:	4630      	mov	r0, r6
 800a964:	f7fd f94e 	bl	8007c04 <_printf_i>
 800a968:	e7e4      	b.n	800a934 <_vfiprintf_r+0x208>
 800a96a:	bf00      	nop
 800a96c:	0800b150 	.word	0x0800b150
 800a970:	0800b170 	.word	0x0800b170
 800a974:	0800b130 	.word	0x0800b130
 800a978:	0800afc4 	.word	0x0800afc4
 800a97c:	0800afce 	.word	0x0800afce
 800a980:	080076bd 	.word	0x080076bd
 800a984:	0800a709 	.word	0x0800a709
 800a988:	0800afca 	.word	0x0800afca

0800a98c <__swbuf_r>:
 800a98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a98e:	460e      	mov	r6, r1
 800a990:	4614      	mov	r4, r2
 800a992:	4605      	mov	r5, r0
 800a994:	b118      	cbz	r0, 800a99e <__swbuf_r+0x12>
 800a996:	6983      	ldr	r3, [r0, #24]
 800a998:	b90b      	cbnz	r3, 800a99e <__swbuf_r+0x12>
 800a99a:	f7ff fd85 	bl	800a4a8 <__sinit>
 800a99e:	4b21      	ldr	r3, [pc, #132]	; (800aa24 <__swbuf_r+0x98>)
 800a9a0:	429c      	cmp	r4, r3
 800a9a2:	d12b      	bne.n	800a9fc <__swbuf_r+0x70>
 800a9a4:	686c      	ldr	r4, [r5, #4]
 800a9a6:	69a3      	ldr	r3, [r4, #24]
 800a9a8:	60a3      	str	r3, [r4, #8]
 800a9aa:	89a3      	ldrh	r3, [r4, #12]
 800a9ac:	071a      	lsls	r2, r3, #28
 800a9ae:	d52f      	bpl.n	800aa10 <__swbuf_r+0x84>
 800a9b0:	6923      	ldr	r3, [r4, #16]
 800a9b2:	b36b      	cbz	r3, 800aa10 <__swbuf_r+0x84>
 800a9b4:	6923      	ldr	r3, [r4, #16]
 800a9b6:	6820      	ldr	r0, [r4, #0]
 800a9b8:	1ac0      	subs	r0, r0, r3
 800a9ba:	6963      	ldr	r3, [r4, #20]
 800a9bc:	b2f6      	uxtb	r6, r6
 800a9be:	4283      	cmp	r3, r0
 800a9c0:	4637      	mov	r7, r6
 800a9c2:	dc04      	bgt.n	800a9ce <__swbuf_r+0x42>
 800a9c4:	4621      	mov	r1, r4
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	f7ff fcda 	bl	800a380 <_fflush_r>
 800a9cc:	bb30      	cbnz	r0, 800aa1c <__swbuf_r+0x90>
 800a9ce:	68a3      	ldr	r3, [r4, #8]
 800a9d0:	3b01      	subs	r3, #1
 800a9d2:	60a3      	str	r3, [r4, #8]
 800a9d4:	6823      	ldr	r3, [r4, #0]
 800a9d6:	1c5a      	adds	r2, r3, #1
 800a9d8:	6022      	str	r2, [r4, #0]
 800a9da:	701e      	strb	r6, [r3, #0]
 800a9dc:	6963      	ldr	r3, [r4, #20]
 800a9de:	3001      	adds	r0, #1
 800a9e0:	4283      	cmp	r3, r0
 800a9e2:	d004      	beq.n	800a9ee <__swbuf_r+0x62>
 800a9e4:	89a3      	ldrh	r3, [r4, #12]
 800a9e6:	07db      	lsls	r3, r3, #31
 800a9e8:	d506      	bpl.n	800a9f8 <__swbuf_r+0x6c>
 800a9ea:	2e0a      	cmp	r6, #10
 800a9ec:	d104      	bne.n	800a9f8 <__swbuf_r+0x6c>
 800a9ee:	4621      	mov	r1, r4
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	f7ff fcc5 	bl	800a380 <_fflush_r>
 800a9f6:	b988      	cbnz	r0, 800aa1c <__swbuf_r+0x90>
 800a9f8:	4638      	mov	r0, r7
 800a9fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9fc:	4b0a      	ldr	r3, [pc, #40]	; (800aa28 <__swbuf_r+0x9c>)
 800a9fe:	429c      	cmp	r4, r3
 800aa00:	d101      	bne.n	800aa06 <__swbuf_r+0x7a>
 800aa02:	68ac      	ldr	r4, [r5, #8]
 800aa04:	e7cf      	b.n	800a9a6 <__swbuf_r+0x1a>
 800aa06:	4b09      	ldr	r3, [pc, #36]	; (800aa2c <__swbuf_r+0xa0>)
 800aa08:	429c      	cmp	r4, r3
 800aa0a:	bf08      	it	eq
 800aa0c:	68ec      	ldreq	r4, [r5, #12]
 800aa0e:	e7ca      	b.n	800a9a6 <__swbuf_r+0x1a>
 800aa10:	4621      	mov	r1, r4
 800aa12:	4628      	mov	r0, r5
 800aa14:	f000 f81a 	bl	800aa4c <__swsetup_r>
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	d0cb      	beq.n	800a9b4 <__swbuf_r+0x28>
 800aa1c:	f04f 37ff 	mov.w	r7, #4294967295
 800aa20:	e7ea      	b.n	800a9f8 <__swbuf_r+0x6c>
 800aa22:	bf00      	nop
 800aa24:	0800b150 	.word	0x0800b150
 800aa28:	0800b170 	.word	0x0800b170
 800aa2c:	0800b130 	.word	0x0800b130

0800aa30 <__ascii_wctomb>:
 800aa30:	b149      	cbz	r1, 800aa46 <__ascii_wctomb+0x16>
 800aa32:	2aff      	cmp	r2, #255	; 0xff
 800aa34:	bf85      	ittet	hi
 800aa36:	238a      	movhi	r3, #138	; 0x8a
 800aa38:	6003      	strhi	r3, [r0, #0]
 800aa3a:	700a      	strbls	r2, [r1, #0]
 800aa3c:	f04f 30ff 	movhi.w	r0, #4294967295
 800aa40:	bf98      	it	ls
 800aa42:	2001      	movls	r0, #1
 800aa44:	4770      	bx	lr
 800aa46:	4608      	mov	r0, r1
 800aa48:	4770      	bx	lr
	...

0800aa4c <__swsetup_r>:
 800aa4c:	4b32      	ldr	r3, [pc, #200]	; (800ab18 <__swsetup_r+0xcc>)
 800aa4e:	b570      	push	{r4, r5, r6, lr}
 800aa50:	681d      	ldr	r5, [r3, #0]
 800aa52:	4606      	mov	r6, r0
 800aa54:	460c      	mov	r4, r1
 800aa56:	b125      	cbz	r5, 800aa62 <__swsetup_r+0x16>
 800aa58:	69ab      	ldr	r3, [r5, #24]
 800aa5a:	b913      	cbnz	r3, 800aa62 <__swsetup_r+0x16>
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	f7ff fd23 	bl	800a4a8 <__sinit>
 800aa62:	4b2e      	ldr	r3, [pc, #184]	; (800ab1c <__swsetup_r+0xd0>)
 800aa64:	429c      	cmp	r4, r3
 800aa66:	d10f      	bne.n	800aa88 <__swsetup_r+0x3c>
 800aa68:	686c      	ldr	r4, [r5, #4]
 800aa6a:	89a3      	ldrh	r3, [r4, #12]
 800aa6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa70:	0719      	lsls	r1, r3, #28
 800aa72:	d42c      	bmi.n	800aace <__swsetup_r+0x82>
 800aa74:	06dd      	lsls	r5, r3, #27
 800aa76:	d411      	bmi.n	800aa9c <__swsetup_r+0x50>
 800aa78:	2309      	movs	r3, #9
 800aa7a:	6033      	str	r3, [r6, #0]
 800aa7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa80:	81a3      	strh	r3, [r4, #12]
 800aa82:	f04f 30ff 	mov.w	r0, #4294967295
 800aa86:	e03e      	b.n	800ab06 <__swsetup_r+0xba>
 800aa88:	4b25      	ldr	r3, [pc, #148]	; (800ab20 <__swsetup_r+0xd4>)
 800aa8a:	429c      	cmp	r4, r3
 800aa8c:	d101      	bne.n	800aa92 <__swsetup_r+0x46>
 800aa8e:	68ac      	ldr	r4, [r5, #8]
 800aa90:	e7eb      	b.n	800aa6a <__swsetup_r+0x1e>
 800aa92:	4b24      	ldr	r3, [pc, #144]	; (800ab24 <__swsetup_r+0xd8>)
 800aa94:	429c      	cmp	r4, r3
 800aa96:	bf08      	it	eq
 800aa98:	68ec      	ldreq	r4, [r5, #12]
 800aa9a:	e7e6      	b.n	800aa6a <__swsetup_r+0x1e>
 800aa9c:	0758      	lsls	r0, r3, #29
 800aa9e:	d512      	bpl.n	800aac6 <__swsetup_r+0x7a>
 800aaa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aaa2:	b141      	cbz	r1, 800aab6 <__swsetup_r+0x6a>
 800aaa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aaa8:	4299      	cmp	r1, r3
 800aaaa:	d002      	beq.n	800aab2 <__swsetup_r+0x66>
 800aaac:	4630      	mov	r0, r6
 800aaae:	f7fe fcd7 	bl	8009460 <_free_r>
 800aab2:	2300      	movs	r3, #0
 800aab4:	6363      	str	r3, [r4, #52]	; 0x34
 800aab6:	89a3      	ldrh	r3, [r4, #12]
 800aab8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aabc:	81a3      	strh	r3, [r4, #12]
 800aabe:	2300      	movs	r3, #0
 800aac0:	6063      	str	r3, [r4, #4]
 800aac2:	6923      	ldr	r3, [r4, #16]
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	89a3      	ldrh	r3, [r4, #12]
 800aac8:	f043 0308 	orr.w	r3, r3, #8
 800aacc:	81a3      	strh	r3, [r4, #12]
 800aace:	6923      	ldr	r3, [r4, #16]
 800aad0:	b94b      	cbnz	r3, 800aae6 <__swsetup_r+0x9a>
 800aad2:	89a3      	ldrh	r3, [r4, #12]
 800aad4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aadc:	d003      	beq.n	800aae6 <__swsetup_r+0x9a>
 800aade:	4621      	mov	r1, r4
 800aae0:	4630      	mov	r0, r6
 800aae2:	f000 f84d 	bl	800ab80 <__smakebuf_r>
 800aae6:	89a0      	ldrh	r0, [r4, #12]
 800aae8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aaec:	f010 0301 	ands.w	r3, r0, #1
 800aaf0:	d00a      	beq.n	800ab08 <__swsetup_r+0xbc>
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	60a3      	str	r3, [r4, #8]
 800aaf6:	6963      	ldr	r3, [r4, #20]
 800aaf8:	425b      	negs	r3, r3
 800aafa:	61a3      	str	r3, [r4, #24]
 800aafc:	6923      	ldr	r3, [r4, #16]
 800aafe:	b943      	cbnz	r3, 800ab12 <__swsetup_r+0xc6>
 800ab00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab04:	d1ba      	bne.n	800aa7c <__swsetup_r+0x30>
 800ab06:	bd70      	pop	{r4, r5, r6, pc}
 800ab08:	0781      	lsls	r1, r0, #30
 800ab0a:	bf58      	it	pl
 800ab0c:	6963      	ldrpl	r3, [r4, #20]
 800ab0e:	60a3      	str	r3, [r4, #8]
 800ab10:	e7f4      	b.n	800aafc <__swsetup_r+0xb0>
 800ab12:	2000      	movs	r0, #0
 800ab14:	e7f7      	b.n	800ab06 <__swsetup_r+0xba>
 800ab16:	bf00      	nop
 800ab18:	20000014 	.word	0x20000014
 800ab1c:	0800b150 	.word	0x0800b150
 800ab20:	0800b170 	.word	0x0800b170
 800ab24:	0800b130 	.word	0x0800b130

0800ab28 <abort>:
 800ab28:	b508      	push	{r3, lr}
 800ab2a:	2006      	movs	r0, #6
 800ab2c:	f000 f898 	bl	800ac60 <raise>
 800ab30:	2001      	movs	r0, #1
 800ab32:	f7f7 fa79 	bl	8002028 <_exit>

0800ab36 <__swhatbuf_r>:
 800ab36:	b570      	push	{r4, r5, r6, lr}
 800ab38:	460e      	mov	r6, r1
 800ab3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab3e:	2900      	cmp	r1, #0
 800ab40:	b096      	sub	sp, #88	; 0x58
 800ab42:	4614      	mov	r4, r2
 800ab44:	461d      	mov	r5, r3
 800ab46:	da08      	bge.n	800ab5a <__swhatbuf_r+0x24>
 800ab48:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	602a      	str	r2, [r5, #0]
 800ab50:	061a      	lsls	r2, r3, #24
 800ab52:	d410      	bmi.n	800ab76 <__swhatbuf_r+0x40>
 800ab54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab58:	e00e      	b.n	800ab78 <__swhatbuf_r+0x42>
 800ab5a:	466a      	mov	r2, sp
 800ab5c:	f000 f89c 	bl	800ac98 <_fstat_r>
 800ab60:	2800      	cmp	r0, #0
 800ab62:	dbf1      	blt.n	800ab48 <__swhatbuf_r+0x12>
 800ab64:	9a01      	ldr	r2, [sp, #4]
 800ab66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab6e:	425a      	negs	r2, r3
 800ab70:	415a      	adcs	r2, r3
 800ab72:	602a      	str	r2, [r5, #0]
 800ab74:	e7ee      	b.n	800ab54 <__swhatbuf_r+0x1e>
 800ab76:	2340      	movs	r3, #64	; 0x40
 800ab78:	2000      	movs	r0, #0
 800ab7a:	6023      	str	r3, [r4, #0]
 800ab7c:	b016      	add	sp, #88	; 0x58
 800ab7e:	bd70      	pop	{r4, r5, r6, pc}

0800ab80 <__smakebuf_r>:
 800ab80:	898b      	ldrh	r3, [r1, #12]
 800ab82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab84:	079d      	lsls	r5, r3, #30
 800ab86:	4606      	mov	r6, r0
 800ab88:	460c      	mov	r4, r1
 800ab8a:	d507      	bpl.n	800ab9c <__smakebuf_r+0x1c>
 800ab8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab90:	6023      	str	r3, [r4, #0]
 800ab92:	6123      	str	r3, [r4, #16]
 800ab94:	2301      	movs	r3, #1
 800ab96:	6163      	str	r3, [r4, #20]
 800ab98:	b002      	add	sp, #8
 800ab9a:	bd70      	pop	{r4, r5, r6, pc}
 800ab9c:	ab01      	add	r3, sp, #4
 800ab9e:	466a      	mov	r2, sp
 800aba0:	f7ff ffc9 	bl	800ab36 <__swhatbuf_r>
 800aba4:	9900      	ldr	r1, [sp, #0]
 800aba6:	4605      	mov	r5, r0
 800aba8:	4630      	mov	r0, r6
 800abaa:	f7fe fcc5 	bl	8009538 <_malloc_r>
 800abae:	b948      	cbnz	r0, 800abc4 <__smakebuf_r+0x44>
 800abb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abb4:	059a      	lsls	r2, r3, #22
 800abb6:	d4ef      	bmi.n	800ab98 <__smakebuf_r+0x18>
 800abb8:	f023 0303 	bic.w	r3, r3, #3
 800abbc:	f043 0302 	orr.w	r3, r3, #2
 800abc0:	81a3      	strh	r3, [r4, #12]
 800abc2:	e7e3      	b.n	800ab8c <__smakebuf_r+0xc>
 800abc4:	4b0d      	ldr	r3, [pc, #52]	; (800abfc <__smakebuf_r+0x7c>)
 800abc6:	62b3      	str	r3, [r6, #40]	; 0x28
 800abc8:	89a3      	ldrh	r3, [r4, #12]
 800abca:	6020      	str	r0, [r4, #0]
 800abcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abd0:	81a3      	strh	r3, [r4, #12]
 800abd2:	9b00      	ldr	r3, [sp, #0]
 800abd4:	6163      	str	r3, [r4, #20]
 800abd6:	9b01      	ldr	r3, [sp, #4]
 800abd8:	6120      	str	r0, [r4, #16]
 800abda:	b15b      	cbz	r3, 800abf4 <__smakebuf_r+0x74>
 800abdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abe0:	4630      	mov	r0, r6
 800abe2:	f000 f86b 	bl	800acbc <_isatty_r>
 800abe6:	b128      	cbz	r0, 800abf4 <__smakebuf_r+0x74>
 800abe8:	89a3      	ldrh	r3, [r4, #12]
 800abea:	f023 0303 	bic.w	r3, r3, #3
 800abee:	f043 0301 	orr.w	r3, r3, #1
 800abf2:	81a3      	strh	r3, [r4, #12]
 800abf4:	89a0      	ldrh	r0, [r4, #12]
 800abf6:	4305      	orrs	r5, r0
 800abf8:	81a5      	strh	r5, [r4, #12]
 800abfa:	e7cd      	b.n	800ab98 <__smakebuf_r+0x18>
 800abfc:	0800a441 	.word	0x0800a441

0800ac00 <_malloc_usable_size_r>:
 800ac00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac04:	1f18      	subs	r0, r3, #4
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	bfbc      	itt	lt
 800ac0a:	580b      	ldrlt	r3, [r1, r0]
 800ac0c:	18c0      	addlt	r0, r0, r3
 800ac0e:	4770      	bx	lr

0800ac10 <_raise_r>:
 800ac10:	291f      	cmp	r1, #31
 800ac12:	b538      	push	{r3, r4, r5, lr}
 800ac14:	4604      	mov	r4, r0
 800ac16:	460d      	mov	r5, r1
 800ac18:	d904      	bls.n	800ac24 <_raise_r+0x14>
 800ac1a:	2316      	movs	r3, #22
 800ac1c:	6003      	str	r3, [r0, #0]
 800ac1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac22:	bd38      	pop	{r3, r4, r5, pc}
 800ac24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ac26:	b112      	cbz	r2, 800ac2e <_raise_r+0x1e>
 800ac28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac2c:	b94b      	cbnz	r3, 800ac42 <_raise_r+0x32>
 800ac2e:	4620      	mov	r0, r4
 800ac30:	f000 f830 	bl	800ac94 <_getpid_r>
 800ac34:	462a      	mov	r2, r5
 800ac36:	4601      	mov	r1, r0
 800ac38:	4620      	mov	r0, r4
 800ac3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac3e:	f000 b817 	b.w	800ac70 <_kill_r>
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d00a      	beq.n	800ac5c <_raise_r+0x4c>
 800ac46:	1c59      	adds	r1, r3, #1
 800ac48:	d103      	bne.n	800ac52 <_raise_r+0x42>
 800ac4a:	2316      	movs	r3, #22
 800ac4c:	6003      	str	r3, [r0, #0]
 800ac4e:	2001      	movs	r0, #1
 800ac50:	e7e7      	b.n	800ac22 <_raise_r+0x12>
 800ac52:	2400      	movs	r4, #0
 800ac54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac58:	4628      	mov	r0, r5
 800ac5a:	4798      	blx	r3
 800ac5c:	2000      	movs	r0, #0
 800ac5e:	e7e0      	b.n	800ac22 <_raise_r+0x12>

0800ac60 <raise>:
 800ac60:	4b02      	ldr	r3, [pc, #8]	; (800ac6c <raise+0xc>)
 800ac62:	4601      	mov	r1, r0
 800ac64:	6818      	ldr	r0, [r3, #0]
 800ac66:	f7ff bfd3 	b.w	800ac10 <_raise_r>
 800ac6a:	bf00      	nop
 800ac6c:	20000014 	.word	0x20000014

0800ac70 <_kill_r>:
 800ac70:	b538      	push	{r3, r4, r5, lr}
 800ac72:	4d07      	ldr	r5, [pc, #28]	; (800ac90 <_kill_r+0x20>)
 800ac74:	2300      	movs	r3, #0
 800ac76:	4604      	mov	r4, r0
 800ac78:	4608      	mov	r0, r1
 800ac7a:	4611      	mov	r1, r2
 800ac7c:	602b      	str	r3, [r5, #0]
 800ac7e:	f7f7 f9c3 	bl	8002008 <_kill>
 800ac82:	1c43      	adds	r3, r0, #1
 800ac84:	d102      	bne.n	800ac8c <_kill_r+0x1c>
 800ac86:	682b      	ldr	r3, [r5, #0]
 800ac88:	b103      	cbz	r3, 800ac8c <_kill_r+0x1c>
 800ac8a:	6023      	str	r3, [r4, #0]
 800ac8c:	bd38      	pop	{r3, r4, r5, pc}
 800ac8e:	bf00      	nop
 800ac90:	200008dc 	.word	0x200008dc

0800ac94 <_getpid_r>:
 800ac94:	f7f7 b9b0 	b.w	8001ff8 <_getpid>

0800ac98 <_fstat_r>:
 800ac98:	b538      	push	{r3, r4, r5, lr}
 800ac9a:	4d07      	ldr	r5, [pc, #28]	; (800acb8 <_fstat_r+0x20>)
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	4604      	mov	r4, r0
 800aca0:	4608      	mov	r0, r1
 800aca2:	4611      	mov	r1, r2
 800aca4:	602b      	str	r3, [r5, #0]
 800aca6:	f7f7 fa0e 	bl	80020c6 <_fstat>
 800acaa:	1c43      	adds	r3, r0, #1
 800acac:	d102      	bne.n	800acb4 <_fstat_r+0x1c>
 800acae:	682b      	ldr	r3, [r5, #0]
 800acb0:	b103      	cbz	r3, 800acb4 <_fstat_r+0x1c>
 800acb2:	6023      	str	r3, [r4, #0]
 800acb4:	bd38      	pop	{r3, r4, r5, pc}
 800acb6:	bf00      	nop
 800acb8:	200008dc 	.word	0x200008dc

0800acbc <_isatty_r>:
 800acbc:	b538      	push	{r3, r4, r5, lr}
 800acbe:	4d06      	ldr	r5, [pc, #24]	; (800acd8 <_isatty_r+0x1c>)
 800acc0:	2300      	movs	r3, #0
 800acc2:	4604      	mov	r4, r0
 800acc4:	4608      	mov	r0, r1
 800acc6:	602b      	str	r3, [r5, #0]
 800acc8:	f7f7 fa0d 	bl	80020e6 <_isatty>
 800accc:	1c43      	adds	r3, r0, #1
 800acce:	d102      	bne.n	800acd6 <_isatty_r+0x1a>
 800acd0:	682b      	ldr	r3, [r5, #0]
 800acd2:	b103      	cbz	r3, 800acd6 <_isatty_r+0x1a>
 800acd4:	6023      	str	r3, [r4, #0]
 800acd6:	bd38      	pop	{r3, r4, r5, pc}
 800acd8:	200008dc 	.word	0x200008dc

0800acdc <roundf>:
 800acdc:	ee10 0a10 	vmov	r0, s0
 800ace0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800ace4:	3a7f      	subs	r2, #127	; 0x7f
 800ace6:	2a16      	cmp	r2, #22
 800ace8:	dc15      	bgt.n	800ad16 <roundf+0x3a>
 800acea:	2a00      	cmp	r2, #0
 800acec:	da08      	bge.n	800ad00 <roundf+0x24>
 800acee:	3201      	adds	r2, #1
 800acf0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800acf4:	d101      	bne.n	800acfa <roundf+0x1e>
 800acf6:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800acfa:	ee00 3a10 	vmov	s0, r3
 800acfe:	4770      	bx	lr
 800ad00:	4907      	ldr	r1, [pc, #28]	; (800ad20 <roundf+0x44>)
 800ad02:	4111      	asrs	r1, r2
 800ad04:	4208      	tst	r0, r1
 800ad06:	d0fa      	beq.n	800acfe <roundf+0x22>
 800ad08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ad0c:	4113      	asrs	r3, r2
 800ad0e:	4403      	add	r3, r0
 800ad10:	ea23 0301 	bic.w	r3, r3, r1
 800ad14:	e7f1      	b.n	800acfa <roundf+0x1e>
 800ad16:	2a80      	cmp	r2, #128	; 0x80
 800ad18:	d1f1      	bne.n	800acfe <roundf+0x22>
 800ad1a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ad1e:	4770      	bx	lr
 800ad20:	007fffff 	.word	0x007fffff

0800ad24 <_init>:
 800ad24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad26:	bf00      	nop
 800ad28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad2a:	bc08      	pop	{r3}
 800ad2c:	469e      	mov	lr, r3
 800ad2e:	4770      	bx	lr

0800ad30 <_fini>:
 800ad30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad32:	bf00      	nop
 800ad34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad36:	bc08      	pop	{r3}
 800ad38:	469e      	mov	lr, r3
 800ad3a:	4770      	bx	lr
